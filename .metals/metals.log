SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@255873ab]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@207f9389]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@255873ab]
2024.06.17 23:40:46 WARN  Flyway upgrade recommended: H2 2.2.224 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.
2024.06.17 23:40:48 INFO  no build target found for D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 01\5.scala. Using presentation compiler with project's scala-library version: 3.3.3
2024.06.17 23:40:48 INFO  no build target found for D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 01\5.scala. Using presentation compiler with project's scala-library version: 3.3.3
2024.06.17 23:40:49 INFO  no build target found for D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 01\5.scala. Using presentation compiler with project's scala-library version: 3.3.3
Jun 17, 2024 11:40:49 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2
Jun 17, 2024 11:40:49 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
Jun 17, 2024 11:40:49 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 7
Jun 17, 2024 11:40:49 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 17
2024.06.17 23:40:49 INFO  no build target found for D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 01\5.scala. Using presentation compiler with project's scala-library version: 3.3.3
2024.06.17 23:40:51 INFO  Running List(C:\Users\USER\AppData\Local\Coursier\data\bin\scala-cli.BAT, setup-ide, D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals)
2024.06.17 23:40:52 INFO  no build target found for D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 01\5.scala. Using presentation compiler with project's scala-library version: 3.3.3
2024.06.17 23:40:52 INFO  Attempting to connect to the build server...
2024.06.17 23:40:52 INFO  Running BSP server List(C:\Users\USER\AppData\Local\Coursier\data\bin\.scala-cli.aux.exe, bsp, --json-options, D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\.scala-build\ide-options-v2.json, --json-launcher-options, D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\.scala-build\ide-launcher-options.json, --envs-file, D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\.scala-build\ide-envs.json, D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals)
2024.06.17 23:40:52 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\.metals\bsp.trace.json or C:\Users\USER\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.06.17 23:40:56 INFO  no build target found for D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 01\5.scala. Using presentation compiler with project's scala-library version: 3.3.3
2024.06.17 23:40:56 INFO  time: Connected to build server in 4.7s
2024.06.17 23:40:56 INFO  Connected to Build server: scala-cli v1.3.2
2024.06.17 23:40:57 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (5 scala sources)
2024.06.17 23:40:58 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 1.09s
2024.06.17 23:41:01 INFO  time: indexed workspace in 4.07s
2024.06.17 23:41:32 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (1 scala source)
2024.06.17 23:41:32 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.62s
2024.06.17 23:50:25 INFO  Shutting down server
2024.06.17 23:50:25 INFO  shutting down Metals
2024.06.17 23:50:25 INFO  Shut down connection with build server.
2024.06.17 23:50:25 INFO  Exiting server
2024.06.18 08:11:55 INFO  Started: Metals version 1.3.1 in folders 'D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals' for client Visual Studio Code 1.90.1.
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@56ce50bb]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@684433c6]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@56ce50bb]
2024.06.18 08:11:56 WARN  Flyway upgrade recommended: H2 2.2.224 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.
2024.06.18 08:11:57 INFO  Attempting to connect to the build server...
2024.06.18 08:11:57 INFO  Running BSP server List(C:\Users\USER\AppData\Local\Coursier\data\bin\.scala-cli.aux.exe, bsp, --json-options, D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\.scala-build\ide-options-v2.json, --json-launcher-options, D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\.scala-build\ide-launcher-options.json, --envs-file, D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\.scala-build\ide-envs.json, D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals)
2024.06.18 08:11:57 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\.metals\bsp.trace.json or C:\Users\USER\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.06.18 08:12:02 INFO  BSP server: Starting compilation server
2024.06.18 08:12:06 INFO  time: Connected to build server in 9.42s
2024.06.18 08:12:06 INFO  Connected to Build server: scala-cli v1.3.2
2024.06.18 08:12:07 INFO  time: Imported build in 0.16s
2024.06.18 08:12:12 INFO  time: indexed workspace in 5.52s
2024.06.18 08:25:22 INFO  tracing is disabled for protocol dap-server, to enable tracing of incoming and outgoing JSON messages create an empty file at D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\.metals\dap-server.trace.json or C:\Users\USER\AppData\Local\scalameta\metals\cache\dap-server.trace.json
2024.06.18 08:25:22 INFO  tracing is disabled for protocol dap-client, to enable tracing of incoming and outgoing JSON messages create an empty file at D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\.metals\dap-client.trace.json or C:\Users\USER\AppData\Local\scalameta\metals\cache\dap-client.trace.json
2024.06.18 08:25:22 INFO  Starting debug proxy for [CalculateVolume]
2024.06.18 08:25:23 INFO  Loaded expression compiler in 1 second
2024.06.18 08:25:23 INFO  C:\Users\USER\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\ch\epfl\scala\scala-debug-decoder_3\4.1.1\scala-debug-decoder_3-4.1.1.jar
2024.06.18 08:25:23 INFO  C:\Users\USER\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\scala-lang\scala3-library_3\3.5.0-RC1\scala3-library_3-3.5.0-RC1.jar
2024.06.18 08:25:23 INFO  C:\Users\USER\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\ch\epfl\scala\tasty-query_3\1.3.0\tasty-query_3-1.3.0.jar
2024.06.18 08:25:23 INFO  C:\Users\USER\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\ow2\asm\asm\9.7\asm-9.7.jar
2024.06.18 08:25:23 INFO  C:\Users\USER\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\ow2\asm\asm-util\9.7\asm-util-9.7.jar
2024.06.18 08:25:23 INFO  C:\Users\USER\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\scala-lang\scala-library\2.13.12\scala-library-2.13.12.jar
2024.06.18 08:25:23 INFO  C:\Users\USER\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\ow2\asm\asm-tree\9.7\asm-tree-9.7.jar
2024.06.18 08:25:23 INFO  C:\Users\USER\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\ow2\asm\asm-analysis\9.7\asm-analysis-9.7.jar
2024.06.18 08:25:23 INFO  Loaded step filter in 125 milliseconds
2024.06.18 08:25:26 INFO  Loaded all sources and classes in 2 seconds
2024.06.18 08:25:28 INFO  Initialized Scala 3 decoder in 1 second
2024.06.18 08:25:28 INFO  Trying to attach to remote debuggee VM 127.0.0.1:14568 .
2024.06.18 08:25:28 INFO  Attaching to debuggee VM succeeded.
2024.06.18 08:25:29 INFO  Canceling debug proxy for [CalculateVolume]
2024.06.18 08:25:28 INFO  Closing debug server tcp://0.0.0.0:14566
2024.06.18 08:25:39 INFO  Shutting down server
2024.06.18 08:25:39 INFO  shutting down Metals
2024.06.18 08:25:39 INFO  Shut down connection with build server.
2024.06.18 08:25:39 INFO  Exiting server
2024.07.01 13:25:35 INFO  Started: Metals version 1.3.2 in folders 'D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals' for client Visual Studio Code 1.90.2.
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@3900d3ba]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@462c20f3]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@3900d3ba]
2024.07.01 13:25:36 WARN  Flyway upgrade recommended: H2 2.2.224 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.
2024.07.01 13:25:37 INFO  Attempting to connect to the build server...
2024.07.01 13:25:37 INFO  Running BSP server List(C:\Users\USER\AppData\Local\Coursier\data\bin\.scala-cli.aux.exe, bsp, --json-options, D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\.scala-build\ide-options-v2.json, --json-launcher-options, D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\.scala-build\ide-launcher-options.json, --envs-file, D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\.scala-build\ide-envs.json, D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals)
2024.07.01 13:25:37 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\.metals\bsp.trace.json or C:\Users\USER\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.07.01 13:25:41 INFO  BSP server: Starting compilation server
2024.07.01 13:25:43 INFO  no build target found for D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 01\3.scala. Using presentation compiler with project's scala-library version: 3.3.3
2024.07.01 13:25:46 INFO  time: Connected to build server in 9.62s
2024.07.01 13:25:46 INFO  Connected to Build server: scala-cli v1.3.2
2024.07.01 13:25:46 INFO  time: Imported build in 0.19s
2024.07.01 13:25:47 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (5 scala sources)
2024.07.01 13:25:50 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 3.1s
2024.07.01 13:25:50 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (5 scala sources)
2024.07.01 13:25:51 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.53s
2024.07.01 13:25:51 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (5 scala sources)
2024.07.01 13:25:51 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.35s
2024.07.01 13:25:58 INFO  time: indexed workspace in 11s
2024.07.01 13:25:58 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (5 scala sources)
2024.07.01 13:25:58 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.81s
2024.07.01 13:25:59 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (5 scala sources)
2024.07.01 13:25:59 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.68s
2024.07.01 13:26:00 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (5 scala sources)
2024.07.01 13:26:00 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.26s
Jul 01, 2024 1:29:00 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 55
Jul 01, 2024 1:29:31 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 90
2024.07.01 13:29:44 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (5 scala sources)
2024.07.01 13:29:44 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.33s
Jul 01, 2024 1:29:51 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 150
2024.07.01 13:30:14 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (5 scala sources)
2024.07.01 13:30:14 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.28s
2024.07.01 13:30:29 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (5 scala sources)
2024.07.01 13:30:29 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.25s
2024.07.01 13:31:02 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (5 scala sources)
2024.07.01 13:31:03 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 1.21s
Jul 01, 2024 1:31:03 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 502
Jul 01, 2024 1:31:05 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 512
2024.07.01 13:31:10 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (5 scala sources)
2024.07.01 13:31:10 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.25s
2024.07.01 13:31:23 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (5 scala sources)
2024.07.01 13:31:23 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.22s
Jul 01, 2024 1:37:43 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 878
2024.07.01 13:39:05 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (5 scala sources)
2024.07.01 13:39:06 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 1.36s
2024.07.01 13:39:54 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (5 scala sources)
2024.07.01 13:39:54 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.17s
2024.07.01 13:46:28 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (5 scala sources)
2024.07.01 13:46:28 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.79s
2024.07.01 13:46:41 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (5 scala sources)
2024.07.01 13:46:43 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 1.09s
2024.07.01 13:46:54 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (5 scala sources)
2024.07.01 13:46:54 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.22s
2024.07.01 13:47:07 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (5 scala sources)
2024.07.01 13:47:07 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.17s
2024.07.01 13:47:16 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (5 scala sources)
2024.07.01 13:47:16 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.17s
Jul 01, 2024 1:47:37 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1437
2024.07.01 13:47:51 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (5 scala sources)
2024.07.01 13:47:52 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 1.05s
2024.07.01 13:48:34 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (5 scala sources)
2024.07.01 13:48:34 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.2s
Jul 01, 2024 1:48:46 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1526
2024.07.01 13:48:59 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (5 scala sources)
2024.07.01 13:48:59 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.34s
2024.07.01 13:49:13 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (5 scala sources)
2024.07.01 13:49:13 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.16s
2024.07.01 13:50:09 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (5 scala sources)
2024.07.01 13:50:09 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.35s
2024.07.01 13:50:28 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (5 scala sources)
2024.07.01 13:50:28 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.15s
Jul 01, 2024 1:50:41 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1984
2024.07.01 13:51:03 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (5 scala sources)
2024.07.01 13:51:03 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.32s
2024.07.01 13:51:08 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (5 scala sources)
2024.07.01 13:51:08 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.14s
2024.07.01 13:53:02 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (5 scala sources)
2024.07.01 13:53:02 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.19s
2024.07.01 13:53:14 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-20/lib/src.zip!/java.base/java/lang/String.java

Uri: jar:file:///C:/Program Files/Java/jdk-20/lib/src.zip!/java.base/java/lang/String.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:911)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:756)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:753)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:739)
	scala.meta.internal.metals.WorkspaceLspService.getServiceForOpt(WorkspaceLspService.scala:305)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:314)
	scala.meta.internal.metals.WorkspaceLspService.executeCommand(WorkspaceLspService.scala:780)
	scala.meta.metals.lsp.DelegatingScalaService.executeCommand(DelegatingScalaService.scala:169)
	java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	java.base/java.lang.reflect.Method.invoke(Method.java:578)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$recursiveFindRpcMethods$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:128)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:271)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:201)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:185)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:97)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:114)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:577)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	java.base/java.lang.Thread.run(Thread.java:1623)
```

Jul 01, 2024 1:53:14 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-20/lib/src.zip%21/java.base/java/lang/String.java",
      "languageId": "java",
      "version": 1,
      "text": "/*\n * Copyright (c) 1994, 2022, Oracle and/or its affiliates. All rights reserved.\n * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n */\n\npackage java.lang;\n\nimport java.io.ObjectStreamField;\nimport java.io.UnsupportedEncodingException;\nimport java.lang.annotation.Native;\nimport java.lang.invoke.MethodHandles;\nimport java.lang.constant.Constable;\nimport java.lang.constant.ConstantDesc;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.charset.*;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Formatter;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Objects;\nimport java.util.Optional;\nimport java.util.Spliterator;\nimport java.util.function.Function;\nimport java.util.regex.Pattern;\nimport java.util.regex.PatternSyntaxException;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\nimport java.util.stream.Stream;\nimport java.util.stream.StreamSupport;\n\nimport jdk.internal.util.Preconditions;\nimport jdk.internal.vm.annotation.ForceInline;\nimport jdk.internal.vm.annotation.IntrinsicCandidate;\nimport jdk.internal.vm.annotation.Stable;\nimport sun.nio.cs.ArrayDecoder;\nimport sun.nio.cs.ArrayEncoder;\n\nimport sun.nio.cs.ISO_8859_1;\nimport sun.nio.cs.US_ASCII;\nimport sun.nio.cs.UTF_8;\n\n/**\n * The {@code String} class represents character strings. All\n * string literals in Java programs, such as {@code \"abc\"}, are\n * implemented as instances of this class.\n * \u003cp\u003e\n * Strings are constant; their values cannot be changed after they\n * are created. String buffers support mutable strings.\n * Because String objects are immutable they can be shared. For example:\n * \u003cblockquote\u003e\u003cpre\u003e\n *     String str \u003d \"abc\";\n * \u003c/pre\u003e\u003c/blockquote\u003e\u003cp\u003e\n * is equivalent to:\n * \u003cblockquote\u003e\u003cpre\u003e\n *     char data[] \u003d {\u0027a\u0027, \u0027b\u0027, \u0027c\u0027};\n *     String str \u003d new String(data);\n * \u003c/pre\u003e\u003c/blockquote\u003e\u003cp\u003e\n * Here are some more examples of how strings can be used:\n * \u003cblockquote\u003e\u003cpre\u003e\n *     System.out.println(\"abc\");\n *     String cde \u003d \"cde\";\n *     System.out.println(\"abc\" + cde);\n *     String c \u003d \"abc\".substring(2, 3);\n *     String d \u003d cde.substring(1, 2);\n * \u003c/pre\u003e\u003c/blockquote\u003e\n * \u003cp\u003e\n * The class {@code String} includes methods for examining\n * individual characters of the sequence, for comparing strings, for\n * searching strings, for extracting substrings, and for creating a\n * copy of a string with all characters translated to uppercase or to\n * lowercase. Case mapping is based on the Unicode Standard version\n * specified by the {@link java.lang.Character Character} class.\n * \u003cp\u003e\n * The Java language provides special support for the string\n * concatenation operator (\u0026nbsp;+\u0026nbsp;), and for conversion of\n * other objects to strings. For additional information on string\n * concatenation and conversion, see \u003ci\u003eThe Java Language Specification\u003c/i\u003e.\n *\n * \u003cp\u003e Unless otherwise noted, passing a {@code null} argument to a constructor\n * or method in this class will cause a {@link NullPointerException} to be\n * thrown.\n *\n * \u003cp\u003eA {@code String} represents a string in the UTF-16 format\n * in which \u003cem\u003esupplementary characters\u003c/em\u003e are represented by \u003cem\u003esurrogate\n * pairs\u003c/em\u003e (see the section \u003ca href\u003d\"Character.html#unicode\"\u003eUnicode\n * Character Representations\u003c/a\u003e in the {@code Character} class for\n * more information).\n * Index values refer to {@code char} code units, so a supplementary\n * character uses two positions in a {@code String}.\n * \u003cp\u003eThe {@code String} class provides methods for dealing with\n * Unicode code points (i.e., characters), in addition to those for\n * dealing with Unicode code units (i.e., {@code char} values).\n *\n * \u003cp\u003eUnless otherwise noted, methods for comparing Strings do not take locale\n * into account.  The {@link java.text.Collator} class provides methods for\n * finer-grain, locale-sensitive String comparison.\n *\n * @implNote The implementation of the string concatenation operator is left to\n * the discretion of a Java compiler, as long as the compiler ultimately conforms\n * to \u003ci\u003eThe Java Language Specification\u003c/i\u003e. For example, the {@code javac} compiler\n * may implement the operator with {@code StringBuffer}, {@code StringBuilder},\n * or {@code java.lang.invoke.StringConcatFactory} depending on the JDK version. The\n * implementation of string conversion is typically through the method {@code toString},\n * defined by {@code Object} and inherited by all classes in Java.\n *\n * @author  Lee Boynton\n * @author  Arthur van Hoff\n * @author  Martin Buchholz\n * @author  Ulf Zibis\n * @see     java.lang.Object#toString()\n * @see     java.lang.StringBuffer\n * @see     java.lang.StringBuilder\n * @see     java.nio.charset.Charset\n * @since   1.0\n * @jls     15.18.1 String Concatenation Operator +\n */\n\npublic final class String\n    implements java.io.Serializable, Comparable\u003cString\u003e, CharSequence,\n               Constable, ConstantDesc {\n\n    /**\n     * The value is used for character storage.\n     *\n     * @implNote This field is trusted by the VM, and is a subject to\n     * constant folding if String instance is constant. Overwriting this\n     * field after construction will cause problems.\n     *\n     * Additionally, it is marked with {@link Stable} to trust the contents\n     * of the array. No other facility in JDK provides this functionality (yet).\n     * {@link Stable} is safe here, because value is never null.\n     */\n    @Stable\n    private final byte[] value;\n\n    /**\n     * The identifier of the encoding used to encode the bytes in\n     * {@code value}. The supported values in this implementation are\n     *\n     * LATIN1\n     * UTF16\n     *\n     * @implNote This field is trusted by the VM, and is a subject to\n     * constant folding if String instance is constant. Overwriting this\n     * field after construction will cause problems.\n     */\n    private final byte coder;\n\n    /** Cache the hash code for the string */\n    private int hash; // Default to 0\n\n    /**\n     * Cache if the hash has been calculated as actually being zero, enabling\n     * us to avoid recalculating this.\n     */\n    private boolean hashIsZero; // Default to false;\n\n    /** use serialVersionUID from JDK 1.0.2 for interoperability */\n    @java.io.Serial\n    private static final long serialVersionUID \u003d -6849794470754667710L;\n\n    /**\n     * If String compaction is disabled, the bytes in {@code value} are\n     * always encoded in UTF16.\n     *\n     * For methods with several possible implementation paths, when String\n     * compaction is disabled, only one code path is taken.\n     *\n     * The instance field value is generally opaque to optimizing JIT\n     * compilers. Therefore, in performance-sensitive place, an explicit\n     * check of the static boolean {@code COMPACT_STRINGS} is done first\n     * before checking the {@code coder} field since the static boolean\n     * {@code COMPACT_STRINGS} would be constant folded away by an\n     * optimizing JIT compiler. The idioms for these cases are as follows.\n     *\n     * For code such as:\n     *\n     *    if (coder \u003d\u003d LATIN1) { ... }\n     *\n     * can be written more optimally as\n     *\n     *    if (coder() \u003d\u003d LATIN1) { ... }\n     *\n     * or:\n     *\n     *    if (COMPACT_STRINGS \u0026\u0026 coder \u003d\u003d LATIN1) { ... }\n     *\n     * An optimizing JIT compiler can fold the above conditional as:\n     *\n     *    COMPACT_STRINGS \u003d\u003d true  \u003d\u003e if (coder \u003d\u003d LATIN1) { ... }\n     *    COMPACT_STRINGS \u003d\u003d false \u003d\u003e if (false)           { ... }\n     *\n     * @implNote\n     * The actual value for this field is injected by JVM. The static\n     * initialization block is used to set the value here to communicate\n     * that this static final field is not statically foldable, and to\n     * avoid any possible circular dependency during vm initialization.\n     */\n    static final boolean COMPACT_STRINGS;\n\n    static {\n        COMPACT_STRINGS \u003d true;\n    }\n\n    /**\n     * Class String is special cased within the Serialization Stream Protocol.\n     *\n     * A String instance is written into an ObjectOutputStream according to\n     * \u003ca href\u003d\"{@docRoot}/../specs/serialization/protocol.html#stream-elements\"\u003e\n     * \u003ccite\u003eJava Object Serialization Specification\u003c/cite\u003e, Section 6.2, \"Stream Elements\"\u003c/a\u003e\n     */\n    @java.io.Serial\n    private static final ObjectStreamField[] serialPersistentFields \u003d\n        new ObjectStreamField[0];\n\n    /**\n     * Initializes a newly created {@code String} object so that it represents\n     * an empty character sequence.  Note that use of this constructor is\n     * unnecessary since Strings are immutable.\n     */\n    public String() {\n        this.value \u003d \"\".value;\n        this.coder \u003d \"\".coder;\n    }\n\n    /**\n     * Initializes a newly created {@code String} object so that it represents\n     * the same sequence of characters as the argument; in other words, the\n     * newly created string is a copy of the argument string. Unless an\n     * explicit copy of {@code original} is needed, use of this constructor is\n     * unnecessary since Strings are immutable.\n     *\n     * @param  original\n     *         A {@code String}\n     */\n    @IntrinsicCandidate\n    public String(String original) {\n        this.value \u003d original.value;\n        this.coder \u003d original.coder;\n        this.hash \u003d original.hash;\n        this.hashIsZero \u003d original.hashIsZero;\n    }\n\n    /**\n     * Allocates a new {@code String} so that it represents the sequence of\n     * characters currently contained in the character array argument. The\n     * contents of the character array are copied; subsequent modification of\n     * the character array does not affect the newly created string.\n     *\n     * @param  value\n     *         The initial value of the string\n     */\n    public String(char[] value) {\n        this(value, 0, value.length, null);\n    }\n\n    /**\n     * Allocates a new {@code String} that contains characters from a subarray\n     * of the character array argument. The {@code offset} argument is the\n     * index of the first character of the subarray and the {@code count}\n     * argument specifies the length of the subarray. The contents of the\n     * subarray are copied; subsequent modification of the character array does\n     * not affect the newly created string.\n     *\n     * @param  value\n     *         Array that is the source of characters\n     *\n     * @param  offset\n     *         The initial offset\n     *\n     * @param  count\n     *         The length\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code count} is negative, or\n     *          {@code offset} is greater than {@code value.length - count}\n     */\n    public String(char[] value, int offset, int count) {\n        this(value, offset, count, rangeCheck(value, offset, count));\n    }\n\n    private static Void rangeCheck(char[] value, int offset, int count) {\n        checkBoundsOffCount(offset, count, value.length);\n        return null;\n    }\n\n    /**\n     * Allocates a new {@code String} that contains characters from a subarray\n     * of the \u003ca href\u003d\"Character.html#unicode\"\u003eUnicode code point\u003c/a\u003e array\n     * argument.  The {@code offset} argument is the index of the first code\n     * point of the subarray and the {@code count} argument specifies the\n     * length of the subarray.  The contents of the subarray are converted to\n     * {@code char}s; subsequent modification of the {@code int} array does not\n     * affect the newly created string.\n     *\n     * @param  codePoints\n     *         Array that is the source of Unicode code points\n     *\n     * @param  offset\n     *         The initial offset\n     *\n     * @param  count\n     *         The length\n     *\n     * @throws  IllegalArgumentException\n     *          If any invalid Unicode code point is found in {@code\n     *          codePoints}\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code count} is negative, or\n     *          {@code offset} is greater than {@code codePoints.length - count}\n     *\n     * @since  1.5\n     */\n    public String(int[] codePoints, int offset, int count) {\n        checkBoundsOffCount(offset, count, codePoints.length);\n        if (count \u003d\u003d 0) {\n            this.value \u003d \"\".value;\n            this.coder \u003d \"\".coder;\n            return;\n        }\n        if (COMPACT_STRINGS) {\n            byte[] val \u003d StringLatin1.toBytes(codePoints, offset, count);\n            if (val !\u003d null) {\n                this.coder \u003d LATIN1;\n                this.value \u003d val;\n                return;\n            }\n        }\n        this.coder \u003d UTF16;\n        this.value \u003d StringUTF16.toBytes(codePoints, offset, count);\n    }\n\n    /**\n     * Allocates a new {@code String} constructed from a subarray of an array\n     * of 8-bit integer values.\n     *\n     * \u003cp\u003e The {@code offset} argument is the index of the first byte of the\n     * subarray, and the {@code count} argument specifies the length of the\n     * subarray.\n     *\n     * \u003cp\u003e Each {@code byte} in the subarray is converted to a {@code char} as\n     * specified in the {@link #String(byte[],int) String(byte[],int)} constructor.\n     *\n     * @deprecated This method does not properly convert bytes into characters.\n     * As of JDK\u0026nbsp;1.1, the preferred way to do this is via the\n     * {@code String} constructors that take a {@link Charset}, charset name,\n     * or that use the {@link Charset#defaultCharset() default charset}.\n     *\n     * @param  ascii\n     *         The bytes to be converted to characters\n     *\n     * @param  hibyte\n     *         The top 8 bits of each 16-bit Unicode code unit\n     *\n     * @param  offset\n     *         The initial offset\n     * @param  count\n     *         The length\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code count} is negative, or\n     *          {@code offset} is greater than {@code ascii.length - count}\n     *\n     * @see  #String(byte[], int)\n     * @see  #String(byte[], int, int, java.lang.String)\n     * @see  #String(byte[], int, int, java.nio.charset.Charset)\n     * @see  #String(byte[], int, int)\n     * @see  #String(byte[], java.lang.String)\n     * @see  #String(byte[], java.nio.charset.Charset)\n     * @see  #String(byte[])\n     */\n    @Deprecated(since\u003d\"1.1\")\n    public String(byte[] ascii, int hibyte, int offset, int count) {\n        checkBoundsOffCount(offset, count, ascii.length);\n        if (count \u003d\u003d 0) {\n            this.value \u003d \"\".value;\n            this.coder \u003d \"\".coder;\n            return;\n        }\n        if (COMPACT_STRINGS \u0026\u0026 (byte)hibyte \u003d\u003d 0) {\n            this.value \u003d Arrays.copyOfRange(ascii, offset, offset + count);\n            this.coder \u003d LATIN1;\n        } else {\n            hibyte \u003c\u003c\u003d 8;\n            byte[] val \u003d StringUTF16.newBytesFor(count);\n            for (int i \u003d 0; i \u003c count; i++) {\n                StringUTF16.putChar(val, i, hibyte | (ascii[offset++] \u0026 0xff));\n            }\n            this.value \u003d val;\n            this.coder \u003d UTF16;\n        }\n    }\n\n    /**\n     * Allocates a new {@code String} containing characters constructed from\n     * an array of 8-bit integer values. Each character \u003ci\u003ec\u003c/i\u003e in the\n     * resulting string is constructed from the corresponding component\n     * \u003ci\u003eb\u003c/i\u003e in the byte array such that:\n     *\n     * \u003cblockquote\u003e\u003cpre\u003e\n     *     \u003cb\u003e\u003ci\u003ec\u003c/i\u003e\u003c/b\u003e \u003d\u003d (char)(((hibyte \u0026amp; 0xff) \u0026lt;\u0026lt; 8)\n     *                         | (\u003cb\u003e\u003ci\u003eb\u003c/i\u003e\u003c/b\u003e \u0026amp; 0xff))\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @deprecated  This method does not properly convert bytes into\n     * characters.  As of JDK\u0026nbsp;1.1, the preferred way to do this is via the\n     * {@code String} constructors that take a {@link Charset}, charset name,\n     * or that use the {@link Charset#defaultCharset() default charset}.\n     *\n     * @param  ascii\n     *         The bytes to be converted to characters\n     *\n     * @param  hibyte\n     *         The top 8 bits of each 16-bit Unicode code unit\n     *\n     * @see  #String(byte[], int, int, java.lang.String)\n     * @see  #String(byte[], int, int, java.nio.charset.Charset)\n     * @see  #String(byte[], int, int)\n     * @see  #String(byte[], java.lang.String)\n     * @see  #String(byte[], java.nio.charset.Charset)\n     * @see  #String(byte[])\n     */\n    @Deprecated(since\u003d\"1.1\")\n    public String(byte[] ascii, int hibyte) {\n        this(ascii, hibyte, 0, ascii.length);\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified subarray of\n     * bytes using the specified charset.  The length of the new {@code String}\n     * is a function of the charset, and hence may not be equal to the length\n     * of the subarray.\n     *\n     * \u003cp\u003e The behavior of this constructor when the given bytes are not valid\n     * in the given charset is unspecified.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  offset\n     *         The index of the first byte to decode\n     *\n     * @param  length\n     *         The number of bytes to decode\n     *\n     * @param  charsetName\n     *         The name of a supported {@linkplain java.nio.charset.Charset\n     *         charset}\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named charset is not supported\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code length} is negative, or\n     *          {@code offset} is greater than {@code bytes.length - length}\n     *\n     * @since  1.1\n     */\n    public String(byte[] bytes, int offset, int length, String charsetName)\n            throws UnsupportedEncodingException {\n        this(lookupCharset(charsetName), bytes, checkBoundsOffCount(offset, length, bytes.length), length);\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified subarray of\n     * bytes using the specified {@linkplain java.nio.charset.Charset charset}.\n     * The length of the new {@code String} is a function of the charset, and\n     * hence may not be equal to the length of the subarray.\n     *\n     * \u003cp\u003e This method always replaces malformed-input and unmappable-character\n     * sequences with this charset\u0027s default replacement string.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  offset\n     *         The index of the first byte to decode\n     *\n     * @param  length\n     *         The number of bytes to decode\n     *\n     * @param  charset\n     *         The {@linkplain java.nio.charset.Charset charset} to be used to\n     *         decode the {@code bytes}\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code length} is negative, or\n     *          {@code offset} is greater than {@code bytes.length - length}\n     *\n     * @since  1.6\n     */\n    public String(byte[] bytes, int offset, int length, Charset charset) {\n        this(Objects.requireNonNull(charset), bytes, checkBoundsOffCount(offset, length, bytes.length), length);\n    }\n\n    /**\n     * This method does not do any precondition checks on its arguments.\n     * \u003cp\u003e\n     * Important: parameter order of this method is deliberately changed in order to\n     * disambiguate it against other similar methods of this class.\n     */\n    @SuppressWarnings(\"removal\")\n    private String(Charset charset, byte[] bytes, int offset, int length) {\n        if (length \u003d\u003d 0) {\n            this.value \u003d \"\".value;\n            this.coder \u003d \"\".coder;\n        } else if (charset \u003d\u003d UTF_8.INSTANCE) {\n            if (COMPACT_STRINGS) {\n                int dp \u003d StringCoding.countPositives(bytes, offset, length);\n                if (dp \u003d\u003d length) {\n                    this.value \u003d Arrays.copyOfRange(bytes, offset, offset + length);\n                    this.coder \u003d LATIN1;\n                    return;\n                }\n                int sl \u003d offset + length;\n                byte[] dst \u003d new byte[length];\n                if (dp \u003e 0) {\n                    System.arraycopy(bytes, offset, dst, 0, dp);\n                    offset +\u003d dp;\n                }\n                while (offset \u003c sl) {\n                    int b1 \u003d bytes[offset++];\n                    if (b1 \u003e\u003d 0) {\n                        dst[dp++] \u003d (byte)b1;\n                        continue;\n                    }\n                    if ((b1 \u0026 0xfe) \u003d\u003d 0xc2 \u0026\u0026 offset \u003c sl) { // b1 either 0xc2 or 0xc3\n                        int b2 \u003d bytes[offset];\n                        if (b2 \u003c -64) { // continuation bytes are always negative values in the range -128 to -65\n                            dst[dp++] \u003d (byte)decode2(b1, b2);\n                            offset++;\n                            continue;\n                        }\n                    }\n                    // anything not a latin1, including the REPL\n                    // we have to go with the utf16\n                    offset--;\n                    break;\n                }\n                if (offset \u003d\u003d sl) {\n                    if (dp !\u003d dst.length) {\n                        dst \u003d Arrays.copyOf(dst, dp);\n                    }\n                    this.value \u003d dst;\n                    this.coder \u003d LATIN1;\n                    return;\n                }\n                byte[] buf \u003d new byte[length \u003c\u003c 1];\n                StringLatin1.inflate(dst, 0, buf, 0, dp);\n                dst \u003d buf;\n                dp \u003d decodeUTF8_UTF16(bytes, offset, sl, dst, dp, true);\n                if (dp !\u003d length) {\n                    dst \u003d Arrays.copyOf(dst, dp \u003c\u003c 1);\n                }\n                this.value \u003d dst;\n                this.coder \u003d UTF16;\n            } else { // !COMPACT_STRINGS\n                byte[] dst \u003d new byte[length \u003c\u003c 1];\n                int dp \u003d decodeUTF8_UTF16(bytes, offset, offset + length, dst, 0, true);\n                if (dp !\u003d length) {\n                    dst \u003d Arrays.copyOf(dst, dp \u003c\u003c 1);\n                }\n                this.value \u003d dst;\n                this.coder \u003d UTF16;\n            }\n        } else if (charset \u003d\u003d ISO_8859_1.INSTANCE) {\n            if (COMPACT_STRINGS) {\n                this.value \u003d Arrays.copyOfRange(bytes, offset, offset + length);\n                this.coder \u003d LATIN1;\n            } else {\n                this.value \u003d StringLatin1.inflate(bytes, offset, length);\n                this.coder \u003d UTF16;\n            }\n        } else if (charset \u003d\u003d US_ASCII.INSTANCE) {\n            if (COMPACT_STRINGS \u0026\u0026 !StringCoding.hasNegatives(bytes, offset, length)) {\n                this.value \u003d Arrays.copyOfRange(bytes, offset, offset + length);\n                this.coder \u003d LATIN1;\n            } else {\n                byte[] dst \u003d new byte[length \u003c\u003c 1];\n                int dp \u003d 0;\n                while (dp \u003c length) {\n                    int b \u003d bytes[offset++];\n                    StringUTF16.putChar(dst, dp++, (b \u003e\u003d 0) ? (char) b : REPL);\n                }\n                this.value \u003d dst;\n                this.coder \u003d UTF16;\n            }\n        } else {\n            // (1)We never cache the \"external\" cs, the only benefit of creating\n            // an additional StringDe/Encoder object to wrap it is to share the\n            // de/encode() method. These SD/E objects are short-lived, the young-gen\n            // gc should be able to take care of them well. But the best approach\n            // is still not to generate them if not really necessary.\n            // (2)The defensive copy of the input byte/char[] has a big performance\n            // impact, as well as the outgoing result byte/char[]. Need to do the\n            // optimization check of (sm\u003d\u003dnull \u0026\u0026 classLoader0\u003d\u003dnull) for both.\n            CharsetDecoder cd \u003d charset.newDecoder();\n            // ArrayDecoder fastpaths\n            if (cd instanceof ArrayDecoder ad) {\n                // ascii\n                if (ad.isASCIICompatible() \u0026\u0026 !StringCoding.hasNegatives(bytes, offset, length)) {\n                    if (COMPACT_STRINGS) {\n                        this.value \u003d Arrays.copyOfRange(bytes, offset, offset + length);\n                        this.coder \u003d LATIN1;\n                        return;\n                    }\n                    this.value \u003d StringLatin1.inflate(bytes, offset, length);\n                    this.coder \u003d UTF16;\n                    return;\n                }\n\n                // fastpath for always Latin1 decodable single byte\n                if (COMPACT_STRINGS \u0026\u0026 ad.isLatin1Decodable()) {\n                    byte[] dst \u003d new byte[length];\n                    ad.decodeToLatin1(bytes, offset, length, dst);\n                    this.value \u003d dst;\n                    this.coder \u003d LATIN1;\n                    return;\n                }\n\n                int en \u003d scale(length, cd.maxCharsPerByte());\n                cd.onMalformedInput(CodingErrorAction.REPLACE)\n                        .onUnmappableCharacter(CodingErrorAction.REPLACE);\n                char[] ca \u003d new char[en];\n                int clen \u003d ad.decode(bytes, offset, length, ca);\n                if (COMPACT_STRINGS) {\n                    byte[] bs \u003d StringUTF16.compress(ca, 0, clen);\n                    if (bs !\u003d null) {\n                        value \u003d bs;\n                        coder \u003d LATIN1;\n                        return;\n                    }\n                }\n                coder \u003d UTF16;\n                value \u003d StringUTF16.toBytes(ca, 0, clen);\n                return;\n            }\n\n            // decode using CharsetDecoder\n            int en \u003d scale(length, cd.maxCharsPerByte());\n            cd.onMalformedInput(CodingErrorAction.REPLACE)\n                    .onUnmappableCharacter(CodingErrorAction.REPLACE);\n            char[] ca \u003d new char[en];\n            if (charset.getClass().getClassLoader0() !\u003d null \u0026\u0026\n                    System.getSecurityManager() !\u003d null) {\n                bytes \u003d Arrays.copyOfRange(bytes, offset, offset + length);\n                offset \u003d 0;\n            }\n\n            int caLen;\n            try {\n                caLen \u003d decodeWithDecoder(cd, ca, bytes, offset, length);\n            } catch (CharacterCodingException x) {\n                // Substitution is enabled, so this shouldn\u0027t happen\n                throw new Error(x);\n            }\n            if (COMPACT_STRINGS) {\n                byte[] bs \u003d StringUTF16.compress(ca, 0, caLen);\n                if (bs !\u003d null) {\n                    value \u003d bs;\n                    coder \u003d LATIN1;\n                    return;\n                }\n            }\n            coder \u003d UTF16;\n            value \u003d StringUTF16.toBytes(ca, 0, caLen);\n        }\n    }\n\n    /*\n     * Throws iae, instead of replacing, if malformed or unmappable.\n     */\n    static String newStringUTF8NoRepl(byte[] bytes, int offset, int length) {\n        checkBoundsOffCount(offset, length, bytes.length);\n        if (length \u003d\u003d 0) {\n            return \"\";\n        }\n        int dp;\n        byte[] dst;\n        if (COMPACT_STRINGS) {\n            dp \u003d StringCoding.countPositives(bytes, offset, length);\n            int sl \u003d offset + length;\n            if (dp \u003d\u003d length) {\n                return new String(Arrays.copyOfRange(bytes, offset, offset + length), LATIN1);\n            }\n            dst \u003d new byte[length];\n            System.arraycopy(bytes, offset, dst, 0, dp);\n            offset +\u003d dp;\n            while (offset \u003c sl) {\n                int b1 \u003d bytes[offset++];\n                if (b1 \u003e\u003d 0) {\n                    dst[dp++] \u003d (byte)b1;\n                    continue;\n                }\n                if ((b1 \u0026 0xfe) \u003d\u003d 0xc2 \u0026\u0026 offset \u003c sl) { // b1 either 0xc2 or 0xc3\n                    int b2 \u003d bytes[offset];\n                    if (b2 \u003c -64) { // continuation bytes are always negative values in the range -128 to -65\n                        dst[dp++] \u003d (byte)decode2(b1, b2);\n                        offset++;\n                        continue;\n                    }\n                }\n                // anything not a latin1, including the REPL\n                // we have to go with the utf16\n                offset--;\n                break;\n            }\n            if (offset \u003d\u003d sl) {\n                if (dp !\u003d dst.length) {\n                    dst \u003d Arrays.copyOf(dst, dp);\n                }\n                return new String(dst, LATIN1);\n            }\n            if (dp \u003d\u003d 0) {\n                dst \u003d new byte[length \u003c\u003c 1];\n            } else {\n                byte[] buf \u003d new byte[length \u003c\u003c 1];\n                StringLatin1.inflate(dst, 0, buf, 0, dp);\n                dst \u003d buf;\n            }\n            dp \u003d decodeUTF8_UTF16(bytes, offset, sl, dst, dp, false);\n        } else { // !COMPACT_STRINGS\n            dst \u003d new byte[length \u003c\u003c 1];\n            dp \u003d decodeUTF8_UTF16(bytes, offset, offset + length, dst, 0, false);\n        }\n        if (dp !\u003d length) {\n            dst \u003d Arrays.copyOf(dst, dp \u003c\u003c 1);\n        }\n        return new String(dst, UTF16);\n    }\n\n    static String newStringNoRepl(byte[] src, Charset cs) throws CharacterCodingException {\n        try {\n            return newStringNoRepl1(src, cs);\n        } catch (IllegalArgumentException e) {\n            //newStringNoRepl1 throws IAE with MalformedInputException or CCE as the cause\n            Throwable cause \u003d e.getCause();\n            if (cause instanceof MalformedInputException mie) {\n                throw mie;\n            }\n            throw (CharacterCodingException)cause;\n        }\n    }\n\n    @SuppressWarnings(\"removal\")\n    private static String newStringNoRepl1(byte[] src, Charset cs) {\n        int len \u003d src.length;\n        if (len \u003d\u003d 0) {\n            return \"\";\n        }\n        if (cs \u003d\u003d UTF_8.INSTANCE) {\n            return newStringUTF8NoRepl(src, 0, src.length);\n        }\n        if (cs \u003d\u003d ISO_8859_1.INSTANCE) {\n            if (COMPACT_STRINGS)\n                return new String(src, LATIN1);\n            return new String(StringLatin1.inflate(src, 0, src.length), UTF16);\n        }\n        if (cs \u003d\u003d US_ASCII.INSTANCE) {\n            if (!StringCoding.hasNegatives(src, 0, src.length)) {\n                if (COMPACT_STRINGS)\n                    return new String(src, LATIN1);\n                return new String(StringLatin1.inflate(src, 0, src.length), UTF16);\n            } else {\n                throwMalformed(src);\n            }\n        }\n\n        CharsetDecoder cd \u003d cs.newDecoder();\n        // ascii fastpath\n        if (cd instanceof ArrayDecoder ad \u0026\u0026\n                ad.isASCIICompatible() \u0026\u0026\n                !StringCoding.hasNegatives(src, 0, src.length)) {\n            return new String(src, 0, src.length, ISO_8859_1.INSTANCE);\n        }\n        int en \u003d scale(len, cd.maxCharsPerByte());\n        char[] ca \u003d new char[en];\n        if (cs.getClass().getClassLoader0() !\u003d null \u0026\u0026\n                System.getSecurityManager() !\u003d null) {\n            src \u003d Arrays.copyOf(src, len);\n        }\n        int caLen;\n        try {\n            caLen \u003d decodeWithDecoder(cd, ca, src, 0, src.length);\n        } catch (CharacterCodingException x) {\n            // throw via IAE\n            throw new IllegalArgumentException(x);\n        }\n        if (COMPACT_STRINGS) {\n            byte[] bs \u003d StringUTF16.compress(ca, 0, caLen);\n            if (bs !\u003d null) {\n                return new String(bs, LATIN1);\n            }\n        }\n        return new String(StringUTF16.toBytes(ca, 0, caLen), UTF16);\n    }\n\n    private static final char REPL \u003d \u0027\\ufffd\u0027;\n\n    // Trim the given byte array to the given length\n    @SuppressWarnings(\"removal\")\n    private static byte[] safeTrim(byte[] ba, int len, boolean isTrusted) {\n        if (len \u003d\u003d ba.length \u0026\u0026 (isTrusted || System.getSecurityManager() \u003d\u003d null)) {\n            return ba;\n        } else {\n            return Arrays.copyOf(ba, len);\n        }\n    }\n\n    private static int scale(int len, float expansionFactor) {\n        // We need to perform double, not float, arithmetic; otherwise\n        // we lose low order bits when len is larger than 2**24.\n        return (int)(len * (double)expansionFactor);\n    }\n\n    private static Charset lookupCharset(String csn) throws UnsupportedEncodingException {\n        Objects.requireNonNull(csn);\n        try {\n            return Charset.forName(csn);\n        } catch (UnsupportedCharsetException | IllegalCharsetNameException x) {\n            throw new UnsupportedEncodingException(csn);\n        }\n    }\n\n    private static byte[] encode(Charset cs, byte coder, byte[] val) {\n        if (cs \u003d\u003d UTF_8.INSTANCE) {\n            return encodeUTF8(coder, val, true);\n        }\n        if (cs \u003d\u003d ISO_8859_1.INSTANCE) {\n            return encode8859_1(coder, val);\n        }\n        if (cs \u003d\u003d US_ASCII.INSTANCE) {\n            return encodeASCII(coder, val);\n        }\n        return encodeWithEncoder(cs, coder, val, true);\n    }\n\n    private static byte[] encodeWithEncoder(Charset cs, byte coder, byte[] val, boolean doReplace) {\n        CharsetEncoder ce \u003d cs.newEncoder();\n        int len \u003d val.length \u003e\u003e coder;  // assume LATIN1\u003d0/UTF16\u003d1;\n        int en \u003d scale(len, ce.maxBytesPerChar());\n        // fastpath with ArrayEncoder implies `doReplace`.\n        if (doReplace \u0026\u0026 ce instanceof ArrayEncoder ae) {\n            // fastpath for ascii compatible\n            if (coder \u003d\u003d LATIN1 \u0026\u0026\n                    ae.isASCIICompatible() \u0026\u0026\n                    !StringCoding.hasNegatives(val, 0, val.length)) {\n                return Arrays.copyOf(val, val.length);\n            }\n            byte[] ba \u003d new byte[en];\n            if (len \u003d\u003d 0) {\n                return ba;\n            }\n\n            int blen \u003d (coder \u003d\u003d LATIN1) ? ae.encodeFromLatin1(val, 0, len, ba)\n                    : ae.encodeFromUTF16(val, 0, len, ba);\n            if (blen !\u003d -1) {\n                return safeTrim(ba, blen, true);\n            }\n        }\n\n        byte[] ba \u003d new byte[en];\n        if (len \u003d\u003d 0) {\n            return ba;\n        }\n        if (doReplace) {\n            ce.onMalformedInput(CodingErrorAction.REPLACE)\n                    .onUnmappableCharacter(CodingErrorAction.REPLACE);\n        }\n        char[] ca \u003d (coder \u003d\u003d LATIN1 ) ? StringLatin1.toChars(val)\n                : StringUTF16.toChars(val);\n        ByteBuffer bb \u003d ByteBuffer.wrap(ba);\n        CharBuffer cb \u003d CharBuffer.wrap(ca, 0, len);\n        try {\n            CoderResult cr \u003d ce.encode(cb, bb, true);\n            if (!cr.isUnderflow())\n                cr.throwException();\n            cr \u003d ce.flush(bb);\n            if (!cr.isUnderflow())\n                cr.throwException();\n        } catch (CharacterCodingException x) {\n            if (!doReplace) {\n                throw new IllegalArgumentException(x);\n            } else {\n                throw new Error(x);\n            }\n        }\n        return safeTrim(ba, bb.position(), cs.getClass().getClassLoader0() \u003d\u003d null);\n    }\n\n    /*\n     * Throws iae, instead of replacing, if unmappable.\n     */\n    static byte[] getBytesUTF8NoRepl(String s) {\n        return encodeUTF8(s.coder(), s.value(), false);\n    }\n\n    private static boolean isASCII(byte[] src) {\n        return !StringCoding.hasNegatives(src, 0, src.length);\n    }\n\n    /*\n     * Throws CCE, instead of replacing, if unmappable.\n     */\n    static byte[] getBytesNoRepl(String s, Charset cs) throws CharacterCodingException {\n        try {\n            return getBytesNoRepl1(s, cs);\n        } catch (IllegalArgumentException e) {\n            //getBytesNoRepl1 throws IAE with UnmappableCharacterException or CCE as the cause\n            Throwable cause \u003d e.getCause();\n            if (cause instanceof UnmappableCharacterException) {\n                throw (UnmappableCharacterException)cause;\n            }\n            throw (CharacterCodingException)cause;\n        }\n    }\n\n    private static byte[] getBytesNoRepl1(String s, Charset cs) {\n        byte[] val \u003d s.value();\n        byte coder \u003d s.coder();\n        if (cs \u003d\u003d UTF_8.INSTANCE) {\n            if (coder \u003d\u003d LATIN1 \u0026\u0026 isASCII(val)) {\n                return val;\n            }\n            return encodeUTF8(coder, val, false);\n        }\n        if (cs \u003d\u003d ISO_8859_1.INSTANCE) {\n            if (coder \u003d\u003d LATIN1) {\n                return val;\n            }\n            return encode8859_1(coder, val, false);\n        }\n        if (cs \u003d\u003d US_ASCII.INSTANCE) {\n            if (coder \u003d\u003d LATIN1) {\n                if (isASCII(val)) {\n                    return val;\n                } else {\n                    throwUnmappable(val);\n                }\n            }\n        }\n        return encodeWithEncoder(cs, coder, val, false);\n    }\n\n    private static byte[] encodeASCII(byte coder, byte[] val) {\n        if (coder \u003d\u003d LATIN1) {\n            byte[] dst \u003d Arrays.copyOf(val, val.length);\n            for (int i \u003d 0; i \u003c dst.length; i++) {\n                if (dst[i] \u003c 0) {\n                    dst[i] \u003d \u0027?\u0027;\n                }\n            }\n            return dst;\n        }\n        int len \u003d val.length \u003e\u003e 1;\n        byte[] dst \u003d new byte[len];\n        int dp \u003d 0;\n        for (int i \u003d 0; i \u003c len; i++) {\n            char c \u003d StringUTF16.getChar(val, i);\n            if (c \u003c 0x80) {\n                dst[dp++] \u003d (byte)c;\n                continue;\n            }\n            if (Character.isHighSurrogate(c) \u0026\u0026 i + 1 \u003c len \u0026\u0026\n                    Character.isLowSurrogate(StringUTF16.getChar(val, i + 1))) {\n                i++;\n            }\n            dst[dp++] \u003d \u0027?\u0027;\n        }\n        if (len \u003d\u003d dp) {\n            return dst;\n        }\n        return Arrays.copyOf(dst, dp);\n    }\n\n    private static byte[] encode8859_1(byte coder, byte[] val) {\n        return encode8859_1(coder, val, true);\n    }\n\n    private static byte[] encode8859_1(byte coder, byte[] val, boolean doReplace) {\n        if (coder \u003d\u003d LATIN1) {\n            return Arrays.copyOf(val, val.length);\n        }\n        int len \u003d val.length \u003e\u003e 1;\n        byte[] dst \u003d new byte[len];\n        int dp \u003d 0;\n        int sp \u003d 0;\n        int sl \u003d len;\n        while (sp \u003c sl) {\n            int ret \u003d StringCoding.implEncodeISOArray(val, sp, dst, dp, len);\n            sp \u003d sp + ret;\n            dp \u003d dp + ret;\n            if (ret !\u003d len) {\n                if (!doReplace) {\n                    throwUnmappable(sp);\n                }\n                char c \u003d StringUTF16.getChar(val, sp++);\n                if (Character.isHighSurrogate(c) \u0026\u0026 sp \u003c sl \u0026\u0026\n                        Character.isLowSurrogate(StringUTF16.getChar(val, sp))) {\n                    sp++;\n                }\n                dst[dp++] \u003d \u0027?\u0027;\n                len \u003d sl - sp;\n            }\n        }\n        if (dp \u003d\u003d dst.length) {\n            return dst;\n        }\n        return Arrays.copyOf(dst, dp);\n    }\n\n    //////////////////////////////// utf8 ////////////////////////////////////\n\n    /**\n     * Decodes ASCII from the source byte array into the destination\n     * char array. Used via JavaLangAccess from UTF_8 and other charset\n     * decoders.\n     *\n     * @return the number of bytes successfully decoded, at most len\n     */\n    /* package-private */\n    static int decodeASCII(byte[] sa, int sp, char[] da, int dp, int len) {\n        int count \u003d StringCoding.countPositives(sa, sp, len);\n        while (count \u003c len) {\n            if (sa[sp + count] \u003c 0) {\n                break;\n            }\n            count++;\n        }\n        StringLatin1.inflate(sa, sp, da, dp, count);\n        return count;\n    }\n\n    private static boolean isNotContinuation(int b) {\n        return (b \u0026 0xc0) !\u003d 0x80;\n    }\n\n    private static boolean isMalformed3(int b1, int b2, int b3) {\n        return (b1 \u003d\u003d (byte)0xe0 \u0026\u0026 (b2 \u0026 0xe0) \u003d\u003d 0x80) ||\n                (b2 \u0026 0xc0) !\u003d 0x80 || (b3 \u0026 0xc0) !\u003d 0x80;\n    }\n\n    private static boolean isMalformed3_2(int b1, int b2) {\n        return (b1 \u003d\u003d (byte)0xe0 \u0026\u0026 (b2 \u0026 0xe0) \u003d\u003d 0x80) ||\n                (b2 \u0026 0xc0) !\u003d 0x80;\n    }\n\n    private static boolean isMalformed4(int b2, int b3, int b4) {\n        return (b2 \u0026 0xc0) !\u003d 0x80 || (b3 \u0026 0xc0) !\u003d 0x80 ||\n                (b4 \u0026 0xc0) !\u003d 0x80;\n    }\n\n    private static boolean isMalformed4_2(int b1, int b2) {\n        return (b1 \u003d\u003d 0xf0 \u0026\u0026 (b2 \u003c 0x90 || b2 \u003e 0xbf)) ||\n                (b1 \u003d\u003d 0xf4 \u0026\u0026 (b2 \u0026 0xf0) !\u003d 0x80) ||\n                (b2 \u0026 0xc0) !\u003d 0x80;\n    }\n\n    private static boolean isMalformed4_3(int b3) {\n        return (b3 \u0026 0xc0) !\u003d 0x80;\n    }\n\n    private static char decode2(int b1, int b2) {\n        return (char)(((b1 \u003c\u003c 6) ^ b2) ^\n                (((byte) 0xC0 \u003c\u003c 6) ^\n                        ((byte) 0x80 \u003c\u003c 0)));\n    }\n\n    private static char decode3(int b1, int b2, int b3) {\n        return (char)((b1 \u003c\u003c 12) ^\n                (b2 \u003c\u003c  6) ^\n                (b3 ^\n                        (((byte) 0xE0 \u003c\u003c 12) ^\n                                ((byte) 0x80 \u003c\u003c  6) ^\n                                ((byte) 0x80 \u003c\u003c  0))));\n    }\n\n    private static int decode4(int b1, int b2, int b3, int b4) {\n        return ((b1 \u003c\u003c 18) ^\n                (b2 \u003c\u003c 12) ^\n                (b3 \u003c\u003c  6) ^\n                (b4 ^\n                        (((byte) 0xF0 \u003c\u003c 18) ^\n                                ((byte) 0x80 \u003c\u003c 12) ^\n                                ((byte) 0x80 \u003c\u003c  6) ^\n                                ((byte) 0x80 \u003c\u003c  0))));\n    }\n\n    private static int decodeUTF8_UTF16(byte[] src, int sp, int sl, byte[] dst, int dp, boolean doReplace) {\n        while (sp \u003c sl) {\n            int b1 \u003d src[sp++];\n            if (b1 \u003e\u003d 0) {\n                StringUTF16.putChar(dst, dp++, (char) b1);\n            } else if ((b1 \u003e\u003e 5) \u003d\u003d -2 \u0026\u0026 (b1 \u0026 0x1e) !\u003d 0) {\n                if (sp \u003c sl) {\n                    int b2 \u003d src[sp++];\n                    if (isNotContinuation(b2)) {\n                        if (!doReplace) {\n                            throwMalformed(sp - 1, 1);\n                        }\n                        StringUTF16.putChar(dst, dp++, REPL);\n                        sp--;\n                    } else {\n                        StringUTF16.putChar(dst, dp++, decode2(b1, b2));\n                    }\n                    continue;\n                }\n                if (!doReplace) {\n                    throwMalformed(sp, 1);  // underflow()\n                }\n                StringUTF16.putChar(dst, dp++, REPL);\n                break;\n            } else if ((b1 \u003e\u003e 4) \u003d\u003d -2) {\n                if (sp + 1 \u003c sl) {\n                    int b2 \u003d src[sp++];\n                    int b3 \u003d src[sp++];\n                    if (isMalformed3(b1, b2, b3)) {\n                        if (!doReplace) {\n                            throwMalformed(sp - 3, 3);\n                        }\n                        StringUTF16.putChar(dst, dp++, REPL);\n                        sp -\u003d 3;\n                        sp +\u003d malformed3(src, sp);\n                    } else {\n                        char c \u003d decode3(b1, b2, b3);\n                        if (Character.isSurrogate(c)) {\n                            if (!doReplace) {\n                                throwMalformed(sp - 3, 3);\n                            }\n                            StringUTF16.putChar(dst, dp++, REPL);\n                        } else {\n                            StringUTF16.putChar(dst, dp++, c);\n                        }\n                    }\n                    continue;\n                }\n                if (sp \u003c sl \u0026\u0026 isMalformed3_2(b1, src[sp])) {\n                    if (!doReplace) {\n                        throwMalformed(sp - 1, 2);\n                    }\n                    StringUTF16.putChar(dst, dp++, REPL);\n                    continue;\n                }\n                if (!doReplace) {\n                    throwMalformed(sp, 1);\n                }\n                StringUTF16.putChar(dst, dp++, REPL);\n                break;\n            } else if ((b1 \u003e\u003e 3) \u003d\u003d -2) {\n                if (sp + 2 \u003c sl) {\n                    int b2 \u003d src[sp++];\n                    int b3 \u003d src[sp++];\n                    int b4 \u003d src[sp++];\n                    int uc \u003d decode4(b1, b2, b3, b4);\n                    if (isMalformed4(b2, b3, b4) ||\n                            !Character.isSupplementaryCodePoint(uc)) { // shortest form check\n                        if (!doReplace) {\n                            throwMalformed(sp - 4, 4);\n                        }\n                        StringUTF16.putChar(dst, dp++, REPL);\n                        sp -\u003d 4;\n                        sp +\u003d malformed4(src, sp);\n                    } else {\n                        StringUTF16.putChar(dst, dp++, Character.highSurrogate(uc));\n                        StringUTF16.putChar(dst, dp++, Character.lowSurrogate(uc));\n                    }\n                    continue;\n                }\n                b1 \u0026\u003d 0xff;\n                if (b1 \u003e 0xf4 || sp \u003c sl \u0026\u0026 isMalformed4_2(b1, src[sp] \u0026 0xff)) {\n                    if (!doReplace) {\n                        throwMalformed(sp - 1, 1);  // or 2\n                    }\n                    StringUTF16.putChar(dst, dp++, REPL);\n                    continue;\n                }\n                if (!doReplace) {\n                    throwMalformed(sp - 1, 1);\n                }\n                sp++;\n                StringUTF16.putChar(dst, dp++, REPL);\n                if (sp \u003c sl \u0026\u0026 isMalformed4_3(src[sp])) {\n                    continue;\n                }\n                break;\n            } else {\n                if (!doReplace) {\n                    throwMalformed(sp - 1, 1);\n                }\n                StringUTF16.putChar(dst, dp++, REPL);\n            }\n        }\n        return dp;\n    }\n\n    private static int decodeWithDecoder(CharsetDecoder cd, char[] dst, byte[] src, int offset, int length)\n                                            throws CharacterCodingException {\n        ByteBuffer bb \u003d ByteBuffer.wrap(src, offset, length);\n        CharBuffer cb \u003d CharBuffer.wrap(dst, 0, dst.length);\n        CoderResult cr \u003d cd.decode(bb, cb, true);\n        if (!cr.isUnderflow())\n            cr.throwException();\n        cr \u003d cd.flush(cb);\n        if (!cr.isUnderflow())\n            cr.throwException();\n        return cb.position();\n    }\n\n    private static int malformed3(byte[] src, int sp) {\n        int b1 \u003d src[sp++];\n        int b2 \u003d src[sp];    // no need to lookup b3\n        return ((b1 \u003d\u003d (byte)0xe0 \u0026\u0026 (b2 \u0026 0xe0) \u003d\u003d 0x80) ||\n                isNotContinuation(b2)) ? 1 : 2;\n    }\n\n    private static int malformed4(byte[] src, int sp) {\n        // we don\u0027t care the speed here\n        int b1 \u003d src[sp++] \u0026 0xff;\n        int b2 \u003d src[sp++] \u0026 0xff;\n        if (b1 \u003e 0xf4 ||\n                (b1 \u003d\u003d 0xf0 \u0026\u0026 (b2 \u003c 0x90 || b2 \u003e 0xbf)) ||\n                (b1 \u003d\u003d 0xf4 \u0026\u0026 (b2 \u0026 0xf0) !\u003d 0x80) ||\n                isNotContinuation(b2))\n            return 1;\n        if (isNotContinuation(src[sp]))\n            return 2;\n        return 3;\n    }\n\n    private static void throwMalformed(int off, int nb) {\n        String msg \u003d \"malformed input off : \" + off + \", length : \" + nb;\n        throw new IllegalArgumentException(msg, new MalformedInputException(nb));\n    }\n\n    private static void throwMalformed(byte[] val) {\n        int dp \u003d 0;\n        while (dp \u003c val.length \u0026\u0026 val[dp] \u003e\u003d0) { dp++; }\n        throwMalformed(dp, 1);\n    }\n\n    private static void throwUnmappable(int off) {\n        String msg \u003d \"malformed input off : \" + off + \", length : 1\";\n        throw new IllegalArgumentException(msg, new UnmappableCharacterException(1));\n    }\n\n    private static void throwUnmappable(byte[] val) {\n        int dp \u003d 0;\n        while (dp \u003c val.length \u0026\u0026 val[dp] \u003e\u003d0) { dp++; }\n        throwUnmappable(dp);\n    }\n\n    private static byte[] encodeUTF8(byte coder, byte[] val, boolean doReplace) {\n        if (coder \u003d\u003d UTF16)\n            return encodeUTF8_UTF16(val, doReplace);\n\n        if (!StringCoding.hasNegatives(val, 0, val.length))\n            return Arrays.copyOf(val, val.length);\n\n        int dp \u003d 0;\n        byte[] dst \u003d new byte[val.length \u003c\u003c 1];\n        for (byte c : val) {\n            if (c \u003c 0) {\n                dst[dp++] \u003d (byte) (0xc0 | ((c \u0026 0xff) \u003e\u003e 6));\n                dst[dp++] \u003d (byte) (0x80 | (c \u0026 0x3f));\n            } else {\n                dst[dp++] \u003d c;\n            }\n        }\n        if (dp \u003d\u003d dst.length)\n            return dst;\n        return Arrays.copyOf(dst, dp);\n    }\n\n    private static byte[] encodeUTF8_UTF16(byte[] val, boolean doReplace) {\n        int dp \u003d 0;\n        int sp \u003d 0;\n        int sl \u003d val.length \u003e\u003e 1;\n        byte[] dst \u003d new byte[sl * 3];\n        while (sp \u003c sl) {\n            // ascii fast loop;\n            char c \u003d StringUTF16.getChar(val, sp);\n            if (c \u003e\u003d \u0027\\u0080\u0027) {\n                break;\n            }\n            dst[dp++] \u003d (byte)c;\n            sp++;\n        }\n        while (sp \u003c sl) {\n            char c \u003d StringUTF16.getChar(val, sp++);\n            if (c \u003c 0x80) {\n                dst[dp++] \u003d (byte)c;\n            } else if (c \u003c 0x800) {\n                dst[dp++] \u003d (byte)(0xc0 | (c \u003e\u003e 6));\n                dst[dp++] \u003d (byte)(0x80 | (c \u0026 0x3f));\n            } else if (Character.isSurrogate(c)) {\n                int uc \u003d -1;\n                char c2;\n                if (Character.isHighSurrogate(c) \u0026\u0026 sp \u003c sl \u0026\u0026\n                        Character.isLowSurrogate(c2 \u003d StringUTF16.getChar(val, sp))) {\n                    uc \u003d Character.toCodePoint(c, c2);\n                }\n                if (uc \u003c 0) {\n                    if (doReplace) {\n                        dst[dp++] \u003d \u0027?\u0027;\n                    } else {\n                        throwUnmappable(sp - 1);\n                    }\n                } else {\n                    dst[dp++] \u003d (byte)(0xf0 | ((uc \u003e\u003e 18)));\n                    dst[dp++] \u003d (byte)(0x80 | ((uc \u003e\u003e 12) \u0026 0x3f));\n                    dst[dp++] \u003d (byte)(0x80 | ((uc \u003e\u003e  6) \u0026 0x3f));\n                    dst[dp++] \u003d (byte)(0x80 | (uc \u0026 0x3f));\n                    sp++;  // 2 chars\n                }\n            } else {\n                // 3 bytes, 16 bits\n                dst[dp++] \u003d (byte)(0xe0 | ((c \u003e\u003e 12)));\n                dst[dp++] \u003d (byte)(0x80 | ((c \u003e\u003e  6) \u0026 0x3f));\n                dst[dp++] \u003d (byte)(0x80 | (c \u0026 0x3f));\n            }\n        }\n        if (dp \u003d\u003d dst.length) {\n            return dst;\n        }\n        return Arrays.copyOf(dst, dp);\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified array of bytes\n     * using the specified {@linkplain java.nio.charset.Charset charset}.  The\n     * length of the new {@code String} is a function of the charset, and hence\n     * may not be equal to the length of the byte array.\n     *\n     * \u003cp\u003e The behavior of this constructor when the given bytes are not valid\n     * in the given charset is unspecified.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  charsetName\n     *         The name of a supported {@linkplain java.nio.charset.Charset\n     *         charset}\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named charset is not supported\n     *\n     * @since  1.1\n     */\n    public String(byte[] bytes, String charsetName)\n            throws UnsupportedEncodingException {\n        this(lookupCharset(charsetName), bytes, 0, bytes.length);\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified array of\n     * bytes using the specified {@linkplain java.nio.charset.Charset charset}.\n     * The length of the new {@code String} is a function of the charset, and\n     * hence may not be equal to the length of the byte array.\n     *\n     * \u003cp\u003e This method always replaces malformed-input and unmappable-character\n     * sequences with this charset\u0027s default replacement string.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  charset\n     *         The {@linkplain java.nio.charset.Charset charset} to be used to\n     *         decode the {@code bytes}\n     *\n     * @since  1.6\n     */\n    public String(byte[] bytes, Charset charset) {\n        this(Objects.requireNonNull(charset), bytes, 0, bytes.length);\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified subarray of\n     * bytes using the {@link Charset#defaultCharset() default charset}.\n     * The length of the new {@code String} is a function of the charset,\n     * and hence may not be equal to the length of the subarray.\n     *\n     * \u003cp\u003e The behavior of this constructor when the given bytes are not valid\n     * in the default charset is unspecified.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  offset\n     *         The index of the first byte to decode\n     *\n     * @param  length\n     *         The number of bytes to decode\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code length} is negative, or\n     *          {@code offset} is greater than {@code bytes.length - length}\n     *\n     * @since  1.1\n     */\n    public String(byte[] bytes, int offset, int length) {\n        this(Charset.defaultCharset(), bytes, checkBoundsOffCount(offset, length, bytes.length), length);\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified array of bytes\n     * using the {@link Charset#defaultCharset() default charset}. The length\n     * of the new {@code String} is a function of the charset, and hence may not\n     * be equal to the length of the byte array.\n     *\n     * \u003cp\u003e The behavior of this constructor when the given bytes are not valid\n     * in the default charset is unspecified.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @since  1.1\n     */\n    public String(byte[] bytes) {\n        this(Charset.defaultCharset(), bytes, 0, bytes.length);\n    }\n\n    /**\n     * Allocates a new string that contains the sequence of characters\n     * currently contained in the string buffer argument. The contents of the\n     * string buffer are copied; subsequent modification of the string buffer\n     * does not affect the newly created string.\n     *\n     * @param  buffer\n     *         A {@code StringBuffer}\n     */\n    public String(StringBuffer buffer) {\n        this(buffer.toString());\n    }\n\n    /**\n     * Allocates a new string that contains the sequence of characters\n     * currently contained in the string builder argument. The contents of the\n     * string builder are copied; subsequent modification of the string builder\n     * does not affect the newly created string.\n     *\n     * \u003cp\u003e This constructor is provided to ease migration to {@code\n     * StringBuilder}. Obtaining a string from a string builder via the {@code\n     * toString} method is likely to run faster and is generally preferred.\n     *\n     * @param   builder\n     *          A {@code StringBuilder}\n     *\n     * @since  1.5\n     */\n    public String(StringBuilder builder) {\n        this(builder, null);\n    }\n\n    /**\n     * Returns the length of this string.\n     * The length is equal to the number of \u003ca href\u003d\"Character.html#unicode\"\u003eUnicode\n     * code units\u003c/a\u003e in the string.\n     *\n     * @return  the length of the sequence of characters represented by this\n     *          object.\n     */\n    public int length() {\n        return value.length \u003e\u003e coder();\n    }\n\n    /**\n     * Returns {@code true} if, and only if, {@link #length()} is {@code 0}.\n     *\n     * @return {@code true} if {@link #length()} is {@code 0}, otherwise\n     * {@code false}\n     *\n     * @since 1.6\n     */\n    @Override\n    public boolean isEmpty() {\n        return value.length \u003d\u003d 0;\n    }\n\n    /**\n     * Returns the {@code char} value at the\n     * specified index. An index ranges from {@code 0} to\n     * {@code length() - 1}. The first {@code char} value of the sequence\n     * is at index {@code 0}, the next at index {@code 1},\n     * and so on, as for array indexing.\n     *\n     * \u003cp\u003eIf the {@code char} value specified by the index is a\n     * \u003ca href\u003d\"Character.html#unicode\"\u003esurrogate\u003c/a\u003e, the surrogate\n     * value is returned.\n     *\n     * @param      index   the index of the {@code char} value.\n     * @return     the {@code char} value at the specified index of this string.\n     *             The first {@code char} value is at index {@code 0}.\n     * @throws     IndexOutOfBoundsException  if the {@code index}\n     *             argument is negative or not less than the length of this\n     *             string.\n     */\n    public char charAt(int index) {\n        if (isLatin1()) {\n            return StringLatin1.charAt(value, index);\n        } else {\n            return StringUTF16.charAt(value, index);\n        }\n    }\n\n    /**\n     * Returns the character (Unicode code point) at the specified\n     * index. The index refers to {@code char} values\n     * (Unicode code units) and ranges from {@code 0} to\n     * {@link #length()}{@code  - 1}.\n     *\n     * \u003cp\u003e If the {@code char} value specified at the given index\n     * is in the high-surrogate range, the following index is less\n     * than the length of this {@code String}, and the\n     * {@code char} value at the following index is in the\n     * low-surrogate range, then the supplementary code point\n     * corresponding to this surrogate pair is returned. Otherwise,\n     * the {@code char} value at the given index is returned.\n     *\n     * @param      index the index to the {@code char} values\n     * @return     the code point value of the character at the\n     *             {@code index}\n     * @throws     IndexOutOfBoundsException  if the {@code index}\n     *             argument is negative or not less than the length of this\n     *             string.\n     * @since      1.5\n     */\n    public int codePointAt(int index) {\n        if (isLatin1()) {\n            checkIndex(index, value.length);\n            return value[index] \u0026 0xff;\n        }\n        int length \u003d value.length \u003e\u003e 1;\n        checkIndex(index, length);\n        return StringUTF16.codePointAt(value, index, length);\n    }\n\n    /**\n     * Returns the character (Unicode code point) before the specified\n     * index. The index refers to {@code char} values\n     * (Unicode code units) and ranges from {@code 1} to {@link\n     * CharSequence#length() length}.\n     *\n     * \u003cp\u003e If the {@code char} value at {@code (index - 1)}\n     * is in the low-surrogate range, {@code (index - 2)} is not\n     * negative, and the {@code char} value at {@code (index -\n     * 2)} is in the high-surrogate range, then the\n     * supplementary code point value of the surrogate pair is\n     * returned. If the {@code char} value at {@code index -\n     * 1} is an unpaired low-surrogate or a high-surrogate, the\n     * surrogate value is returned.\n     *\n     * @param     index the index following the code point that should be returned\n     * @return    the Unicode code point value before the given index.\n     * @throws    IndexOutOfBoundsException if the {@code index}\n     *            argument is less than 1 or greater than the length\n     *            of this string.\n     * @since     1.5\n     */\n    public int codePointBefore(int index) {\n        int i \u003d index - 1;\n        checkIndex(i, length());\n        if (isLatin1()) {\n            return (value[i] \u0026 0xff);\n        }\n        return StringUTF16.codePointBefore(value, index);\n    }\n\n    /**\n     * Returns the number of Unicode code points in the specified text\n     * range of this {@code String}. The text range begins at the\n     * specified {@code beginIndex} and extends to the\n     * {@code char} at index {@code endIndex - 1}. Thus the\n     * length (in {@code char}s) of the text range is\n     * {@code endIndex-beginIndex}. Unpaired surrogates within\n     * the text range count as one code point each.\n     *\n     * @param beginIndex the index to the first {@code char} of\n     * the text range.\n     * @param endIndex the index after the last {@code char} of\n     * the text range.\n     * @return the number of Unicode code points in the specified text\n     * range\n     * @throws    IndexOutOfBoundsException if the\n     * {@code beginIndex} is negative, or {@code endIndex}\n     * is larger than the length of this {@code String}, or\n     * {@code beginIndex} is larger than {@code endIndex}.\n     * @since  1.5\n     */\n    public int codePointCount(int beginIndex, int endIndex) {\n        Objects.checkFromToIndex(beginIndex, endIndex, length());\n        if (isLatin1()) {\n            return endIndex - beginIndex;\n        }\n        return StringUTF16.codePointCount(value, beginIndex, endIndex);\n    }\n\n    /**\n     * Returns the index within this {@code String} that is\n     * offset from the given {@code index} by\n     * {@code codePointOffset} code points. Unpaired surrogates\n     * within the text range given by {@code index} and\n     * {@code codePointOffset} count as one code point each.\n     *\n     * @param index the index to be offset\n     * @param codePointOffset the offset in code points\n     * @return the index within this {@code String}\n     * @throws    IndexOutOfBoundsException if {@code index}\n     *   is negative or larger than the length of this\n     *   {@code String}, or if {@code codePointOffset} is positive\n     *   and the substring starting with {@code index} has fewer\n     *   than {@code codePointOffset} code points,\n     *   or if {@code codePointOffset} is negative and the substring\n     *   before {@code index} has fewer than the absolute value\n     *   of {@code codePointOffset} code points.\n     * @since 1.5\n     */\n    public int offsetByCodePoints(int index, int codePointOffset) {\n        return Character.offsetByCodePoints(this, index, codePointOffset);\n    }\n\n    /**\n     * Copies characters from this string into the destination character\n     * array.\n     * \u003cp\u003e\n     * The first character to be copied is at index {@code srcBegin};\n     * the last character to be copied is at index {@code srcEnd-1}\n     * (thus the total number of characters to be copied is\n     * {@code srcEnd-srcBegin}). The characters are copied into the\n     * subarray of {@code dst} starting at index {@code dstBegin}\n     * and ending at index:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     *     dstBegin + (srcEnd-srcBegin) - 1\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @param      srcBegin   index of the first character in the string\n     *                        to copy.\n     * @param      srcEnd     index after the last character in the string\n     *                        to copy.\n     * @param      dst        the destination array.\n     * @param      dstBegin   the start offset in the destination array.\n     * @throws    IndexOutOfBoundsException If any of the following\n     *            is true:\n     *            \u003cul\u003e\u003cli\u003e{@code srcBegin} is negative.\n     *            \u003cli\u003e{@code srcBegin} is greater than {@code srcEnd}\n     *            \u003cli\u003e{@code srcEnd} is greater than the length of this\n     *                string\n     *            \u003cli\u003e{@code dstBegin} is negative\n     *            \u003cli\u003e{@code dstBegin+(srcEnd-srcBegin)} is larger than\n     *                {@code dst.length}\u003c/ul\u003e\n     */\n    public void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin) {\n        checkBoundsBeginEnd(srcBegin, srcEnd, length());\n        checkBoundsOffCount(dstBegin, srcEnd - srcBegin, dst.length);\n        if (isLatin1()) {\n            StringLatin1.getChars(value, srcBegin, srcEnd, dst, dstBegin);\n        } else {\n            StringUTF16.getChars(value, srcBegin, srcEnd, dst, dstBegin);\n        }\n    }\n\n    /**\n     * Copies characters from this string into the destination byte array. Each\n     * byte receives the 8 low-order bits of the corresponding character. The\n     * eight high-order bits of each character are not copied and do not\n     * participate in the transfer in any way.\n     *\n     * \u003cp\u003e The first character to be copied is at index {@code srcBegin}; the\n     * last character to be copied is at index {@code srcEnd-1}.  The total\n     * number of characters to be copied is {@code srcEnd-srcBegin}. The\n     * characters, converted to bytes, are copied into the subarray of {@code\n     * dst} starting at index {@code dstBegin} and ending at index:\n     *\n     * \u003cblockquote\u003e\u003cpre\u003e\n     *     dstBegin + (srcEnd-srcBegin) - 1\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @deprecated  This method does not properly convert characters into\n     * bytes.  As of JDK\u0026nbsp;1.1, the preferred way to do this is via the\n     * {@link #getBytes()} method, which uses the {@link Charset#defaultCharset()\n     * default charset}.\n     *\n     * @param  srcBegin\n     *         Index of the first character in the string to copy\n     *\n     * @param  srcEnd\n     *         Index after the last character in the string to copy\n     *\n     * @param  dst\n     *         The destination array\n     *\n     * @param  dstBegin\n     *         The start offset in the destination array\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If any of the following is true:\n     *          \u003cul\u003e\n     *            \u003cli\u003e {@code srcBegin} is negative\n     *            \u003cli\u003e {@code srcBegin} is greater than {@code srcEnd}\n     *            \u003cli\u003e {@code srcEnd} is greater than the length of this String\n     *            \u003cli\u003e {@code dstBegin} is negative\n     *            \u003cli\u003e {@code dstBegin+(srcEnd-srcBegin)} is larger than {@code\n     *                 dst.length}\n     *          \u003c/ul\u003e\n     */\n    @Deprecated(since\u003d\"1.1\")\n    public void getBytes(int srcBegin, int srcEnd, byte[] dst, int dstBegin) {\n        checkBoundsBeginEnd(srcBegin, srcEnd, length());\n        Objects.requireNonNull(dst);\n        checkBoundsOffCount(dstBegin, srcEnd - srcBegin, dst.length);\n        if (isLatin1()) {\n            StringLatin1.getBytes(value, srcBegin, srcEnd, dst, dstBegin);\n        } else {\n            StringUTF16.getBytes(value, srcBegin, srcEnd, dst, dstBegin);\n        }\n    }\n\n    /**\n     * Encodes this {@code String} into a sequence of bytes using the named\n     * charset, storing the result into a new byte array.\n     *\n     * \u003cp\u003e The behavior of this method when this string cannot be encoded in\n     * the given charset is unspecified.  The {@link\n     * java.nio.charset.CharsetEncoder} class should be used when more control\n     * over the encoding process is required.\n     *\n     * @param  charsetName\n     *         The name of a supported {@linkplain java.nio.charset.Charset\n     *         charset}\n     *\n     * @return  The resultant byte array\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named charset is not supported\n     *\n     * @since  1.1\n     */\n    public byte[] getBytes(String charsetName)\n            throws UnsupportedEncodingException {\n        return encode(lookupCharset(charsetName), coder(), value);\n    }\n\n    /**\n     * Encodes this {@code String} into a sequence of bytes using the given\n     * {@linkplain java.nio.charset.Charset charset}, storing the result into a\n     * new byte array.\n     *\n     * \u003cp\u003e This method always replaces malformed-input and unmappable-character\n     * sequences with this charset\u0027s default replacement byte array.  The\n     * {@link java.nio.charset.CharsetEncoder} class should be used when more\n     * control over the encoding process is required.\n     *\n     * @param  charset\n     *         The {@linkplain java.nio.charset.Charset} to be used to encode\n     *         the {@code String}\n     *\n     * @return  The resultant byte array\n     *\n     * @since  1.6\n     */\n    public byte[] getBytes(Charset charset) {\n        if (charset \u003d\u003d null) throw new NullPointerException();\n        return encode(charset, coder(), value);\n     }\n\n    /**\n     * Encodes this {@code String} into a sequence of bytes using the\n     * {@link Charset#defaultCharset() default charset}, storing the result\n     * into a new byte array.\n     *\n     * \u003cp\u003e The behavior of this method when this string cannot be encoded in\n     * the default charset is unspecified.  The {@link\n     * java.nio.charset.CharsetEncoder} class should be used when more control\n     * over the encoding process is required.\n     *\n     * @return  The resultant byte array\n     *\n     * @since      1.1\n     */\n    public byte[] getBytes() {\n        return encode(Charset.defaultCharset(), coder(), value);\n    }\n\n    /**\n     * Compares this string to the specified object.  The result is {@code\n     * true} if and only if the argument is not {@code null} and is a {@code\n     * String} object that represents the same sequence of characters as this\n     * object.\n     *\n     * \u003cp\u003eFor finer-grained String comparison, refer to\n     * {@link java.text.Collator}.\n     *\n     * @param  anObject\n     *         The object to compare this {@code String} against\n     *\n     * @return  {@code true} if the given object represents a {@code String}\n     *          equivalent to this string, {@code false} otherwise\n     *\n     * @see  #compareTo(String)\n     * @see  #equalsIgnoreCase(String)\n     */\n    public boolean equals(Object anObject) {\n        if (this \u003d\u003d anObject) {\n            return true;\n        }\n        return (anObject instanceof String aString)\n                \u0026\u0026 (!COMPACT_STRINGS || this.coder \u003d\u003d aString.coder)\n                \u0026\u0026 StringLatin1.equals(value, aString.value);\n    }\n\n    /**\n     * Compares this string to the specified {@code StringBuffer}.  The result\n     * is {@code true} if and only if this {@code String} represents the same\n     * sequence of characters as the specified {@code StringBuffer}. This method\n     * synchronizes on the {@code StringBuffer}.\n     *\n     * \u003cp\u003eFor finer-grained String comparison, refer to\n     * {@link java.text.Collator}.\n     *\n     * @param  sb\n     *         The {@code StringBuffer} to compare this {@code String} against\n     *\n     * @return  {@code true} if this {@code String} represents the same\n     *          sequence of characters as the specified {@code StringBuffer},\n     *          {@code false} otherwise\n     *\n     * @since  1.4\n     */\n    public boolean contentEquals(StringBuffer sb) {\n        return contentEquals((CharSequence)sb);\n    }\n\n    private boolean nonSyncContentEquals(AbstractStringBuilder sb) {\n        int len \u003d length();\n        if (len !\u003d sb.length()) {\n            return false;\n        }\n        byte v1[] \u003d value;\n        byte v2[] \u003d sb.getValue();\n        byte coder \u003d coder();\n        if (coder \u003d\u003d sb.getCoder()) {\n            int n \u003d v1.length;\n            for (int i \u003d 0; i \u003c n; i++) {\n                if (v1[i] !\u003d v2[i]) {\n                    return false;\n                }\n            }\n        } else {\n            if (coder !\u003d LATIN1) {  // utf16 str and latin1 abs can never be \"equal\"\n                return false;\n            }\n            return StringUTF16.contentEquals(v1, v2, len);\n        }\n        return true;\n    }\n\n    /**\n     * Compares this string to the specified {@code CharSequence}.  The\n     * result is {@code true} if and only if this {@code String} represents the\n     * same sequence of char values as the specified sequence. Note that if the\n     * {@code CharSequence} is a {@code StringBuffer} then the method\n     * synchronizes on it.\n     *\n     * \u003cp\u003eFor finer-grained String comparison, refer to\n     * {@link java.text.Collator}.\n     *\n     * @param  cs\n     *         The sequence to compare this {@code String} against\n     *\n     * @return  {@code true} if this {@code String} represents the same\n     *          sequence of char values as the specified sequence, {@code\n     *          false} otherwise\n     *\n     * @since  1.5\n     */\n    public boolean contentEquals(CharSequence cs) {\n        // Argument is a StringBuffer, StringBuilder\n        if (cs instanceof AbstractStringBuilder) {\n            if (cs instanceof StringBuffer) {\n                synchronized(cs) {\n                   return nonSyncContentEquals((AbstractStringBuilder)cs);\n                }\n            } else {\n                return nonSyncContentEquals((AbstractStringBuilder)cs);\n            }\n        }\n        // Argument is a String\n        if (cs instanceof String) {\n            return equals(cs);\n        }\n        // Argument is a generic CharSequence\n        int n \u003d cs.length();\n        if (n !\u003d length()) {\n            return false;\n        }\n        byte[] val \u003d this.value;\n        if (isLatin1()) {\n            for (int i \u003d 0; i \u003c n; i++) {\n                if ((val[i] \u0026 0xff) !\u003d cs.charAt(i)) {\n                    return false;\n                }\n            }\n        } else {\n            if (!StringUTF16.contentEquals(val, cs, n)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Compares this {@code String} to another {@code String}, ignoring case\n     * considerations.  Two strings are considered equal ignoring case if they\n     * are of the same length and corresponding Unicode code points in the two\n     * strings are equal ignoring case.\n     *\n     * \u003cp\u003e Two Unicode code points are considered the same\n     * ignoring case if at least one of the following is true:\n     * \u003cul\u003e\n     *   \u003cli\u003e The two Unicode code points are the same (as compared by the\n     *        {@code \u003d\u003d} operator)\n     *   \u003cli\u003e Calling {@code Character.toLowerCase(Character.toUpperCase(int))}\n     *        on each Unicode code point produces the same result\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eNote that this method does \u003cem\u003enot\u003c/em\u003e take locale into account, and\n     * will result in unsatisfactory results for certain locales.  The\n     * {@link java.text.Collator} class provides locale-sensitive comparison.\n     *\n     * @param  anotherString\n     *         The {@code String} to compare this {@code String} against\n     *\n     * @return  {@code true} if the argument is not {@code null} and it\n     *          represents an equivalent {@code String} ignoring case; {@code\n     *          false} otherwise\n     *\n     * @see  #equals(Object)\n     * @see  #codePoints()\n     */\n    public boolean equalsIgnoreCase(String anotherString) {\n        return (this \u003d\u003d anotherString) ? true\n                : (anotherString !\u003d null)\n                \u0026\u0026 (anotherString.length() \u003d\u003d length())\n                \u0026\u0026 regionMatches(true, 0, anotherString, 0, length());\n    }\n\n    /**\n     * Compares two strings lexicographically.\n     * The comparison is based on the Unicode value of each character in\n     * the strings. The character sequence represented by this\n     * {@code String} object is compared lexicographically to the\n     * character sequence represented by the argument string. The result is\n     * a negative integer if this {@code String} object\n     * lexicographically precedes the argument string. The result is a\n     * positive integer if this {@code String} object lexicographically\n     * follows the argument string. The result is zero if the strings\n     * are equal; {@code compareTo} returns {@code 0} exactly when\n     * the {@link #equals(Object)} method would return {@code true}.\n     * \u003cp\u003e\n     * This is the definition of lexicographic ordering. If two strings are\n     * different, then either they have different characters at some index\n     * that is a valid index for both strings, or their lengths are different,\n     * or both. If they have different characters at one or more index\n     * positions, let \u003ci\u003ek\u003c/i\u003e be the smallest such index; then the string\n     * whose character at position \u003ci\u003ek\u003c/i\u003e has the smaller value, as\n     * determined by using the {@code \u003c} operator, lexicographically precedes the\n     * other string. In this case, {@code compareTo} returns the\n     * difference of the two character values at position {@code k} in\n     * the two string -- that is, the value:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.charAt(k)-anotherString.charAt(k)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * If there is no index position at which they differ, then the shorter\n     * string lexicographically precedes the longer string. In this case,\n     * {@code compareTo} returns the difference of the lengths of the\n     * strings -- that is, the value:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.length()-anotherString.length()\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * \u003cp\u003eFor finer-grained String comparison, refer to\n     * {@link java.text.Collator}.\n     *\n     * @param   anotherString   the {@code String} to be compared.\n     * @return  the value {@code 0} if the argument string is equal to\n     *          this string; a value less than {@code 0} if this string\n     *          is lexicographically less than the string argument; and a\n     *          value greater than {@code 0} if this string is\n     *          lexicographically greater than the string argument.\n     */\n    public int compareTo(String anotherString) {\n        byte v1[] \u003d value;\n        byte v2[] \u003d anotherString.value;\n        byte coder \u003d coder();\n        if (coder \u003d\u003d anotherString.coder()) {\n            return coder \u003d\u003d LATIN1 ? StringLatin1.compareTo(v1, v2)\n                                   : StringUTF16.compareTo(v1, v2);\n        }\n        return coder \u003d\u003d LATIN1 ? StringLatin1.compareToUTF16(v1, v2)\n                               : StringUTF16.compareToLatin1(v1, v2);\n     }\n\n    /**\n     * A Comparator that orders {@code String} objects as by\n     * {@link #compareToIgnoreCase(String) compareToIgnoreCase}.\n     * This comparator is serializable.\n     * \u003cp\u003e\n     * Note that this Comparator does \u003cem\u003enot\u003c/em\u003e take locale into account,\n     * and will result in an unsatisfactory ordering for certain locales.\n     * The {@link java.text.Collator} class provides locale-sensitive comparison.\n     *\n     * @see     java.text.Collator\n     * @since   1.2\n     */\n    public static final Comparator\u003cString\u003e CASE_INSENSITIVE_ORDER\n                                         \u003d new CaseInsensitiveComparator();\n\n    /**\n     * CaseInsensitiveComparator for Strings.\n     */\n    private static class CaseInsensitiveComparator\n            implements Comparator\u003cString\u003e, java.io.Serializable {\n        // use serialVersionUID from JDK 1.2.2 for interoperability\n        @java.io.Serial\n        private static final long serialVersionUID \u003d 8575799808933029326L;\n\n        public int compare(String s1, String s2) {\n            byte v1[] \u003d s1.value;\n            byte v2[] \u003d s2.value;\n            byte coder \u003d s1.coder();\n            if (coder \u003d\u003d s2.coder()) {\n                return coder \u003d\u003d LATIN1 ? StringLatin1.compareToCI(v1, v2)\n                                       : StringUTF16.compareToCI(v1, v2);\n            }\n            return coder \u003d\u003d LATIN1 ? StringLatin1.compareToCI_UTF16(v1, v2)\n                                   : StringUTF16.compareToCI_Latin1(v1, v2);\n        }\n\n        /** Replaces the de-serialized object. */\n        @java.io.Serial\n        private Object readResolve() { return CASE_INSENSITIVE_ORDER; }\n    }\n\n    /**\n     * Compares two strings lexicographically, ignoring case\n     * differences. This method returns an integer whose sign is that of\n     * calling {@code compareTo} with case folded versions of the strings\n     * where case differences have been eliminated by calling\n     * {@code Character.toLowerCase(Character.toUpperCase(int))} on\n     * each Unicode code point.\n     * \u003cp\u003e\n     * Note that this method does \u003cem\u003enot\u003c/em\u003e take locale into account,\n     * and will result in an unsatisfactory ordering for certain locales.\n     * The {@link java.text.Collator} class provides locale-sensitive comparison.\n     *\n     * @param   str   the {@code String} to be compared.\n     * @return  a negative integer, zero, or a positive integer as the\n     *          specified String is greater than, equal to, or less\n     *          than this String, ignoring case considerations.\n     * @see     java.text.Collator\n     * @see     #codePoints()\n     * @since   1.2\n     */\n    public int compareToIgnoreCase(String str) {\n        return CASE_INSENSITIVE_ORDER.compare(this, str);\n    }\n\n    /**\n     * Tests if two string regions are equal.\n     * \u003cp\u003e\n     * A substring of this {@code String} object is compared to a substring\n     * of the argument other. The result is true if these substrings\n     * represent identical character sequences. The substring of this\n     * {@code String} object to be compared begins at index {@code toffset}\n     * and has length {@code len}. The substring of other to be compared\n     * begins at index {@code ooffset} and has length {@code len}. The\n     * result is {@code false} if and only if at least one of the following\n     * is true:\n     * \u003cul\u003e\u003cli\u003e{@code toffset} is negative.\n     * \u003cli\u003e{@code ooffset} is negative.\n     * \u003cli\u003e{@code toffset+len} is greater than the length of this\n     * {@code String} object.\n     * \u003cli\u003e{@code ooffset+len} is greater than the length of the other\n     * argument.\n     * \u003cli\u003eThere is some nonnegative integer \u003ci\u003ek\u003c/i\u003e less than {@code len}\n     * such that:\n     * {@code this.charAt(toffset + }\u003ci\u003ek\u003c/i\u003e{@code ) !\u003d other.charAt(ooffset + }\n     * \u003ci\u003ek\u003c/i\u003e{@code )}\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eNote that this method does \u003cem\u003enot\u003c/em\u003e take locale into account.  The\n     * {@link java.text.Collator} class provides locale-sensitive comparison.\n     *\n     * @param   toffset   the starting offset of the subregion in this string.\n     * @param   other     the string argument.\n     * @param   ooffset   the starting offset of the subregion in the string\n     *                    argument.\n     * @param   len       the number of characters to compare.\n     * @return  {@code true} if the specified subregion of this string\n     *          exactly matches the specified subregion of the string argument;\n     *          {@code false} otherwise.\n     */\n    public boolean regionMatches(int toffset, String other, int ooffset, int len) {\n        byte tv[] \u003d value;\n        byte ov[] \u003d other.value;\n        // Note: toffset, ooffset, or len might be near -1\u003e\u003e\u003e1.\n        if ((ooffset \u003c 0) || (toffset \u003c 0) ||\n             (toffset \u003e (long)length() - len) ||\n             (ooffset \u003e (long)other.length() - len)) {\n            return false;\n        }\n        byte coder \u003d coder();\n        if (coder \u003d\u003d other.coder()) {\n            if (!isLatin1() \u0026\u0026 (len \u003e 0)) {\n                toffset \u003d toffset \u003c\u003c 1;\n                ooffset \u003d ooffset \u003c\u003c 1;\n                len \u003d len \u003c\u003c 1;\n            }\n            while (len-- \u003e 0) {\n                if (tv[toffset++] !\u003d ov[ooffset++]) {\n                    return false;\n                }\n            }\n        } else {\n            if (coder \u003d\u003d LATIN1) {\n                while (len-- \u003e 0) {\n                    if (StringLatin1.getChar(tv, toffset++) !\u003d\n                        StringUTF16.getChar(ov, ooffset++)) {\n                        return false;\n                    }\n                }\n            } else {\n                while (len-- \u003e 0) {\n                    if (StringUTF16.getChar(tv, toffset++) !\u003d\n                        StringLatin1.getChar(ov, ooffset++)) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Tests if two string regions are equal.\n     * \u003cp\u003e\n     * A substring of this {@code String} object is compared to a substring\n     * of the argument {@code other}. The result is {@code true} if these\n     * substrings represent Unicode code point sequences that are the same,\n     * ignoring case if and only if {@code ignoreCase} is true.\n     * The sequences {@code tsequence} and {@code osequence} are compared,\n     * where {@code tsequence} is the sequence produced as if by calling\n     * {@code this.substring(toffset, toffset + len).codePoints()} and\n     * {@code osequence} is the sequence produced as if by calling\n     * {@code other.substring(ooffset, ooffset + len).codePoints()}.\n     * The result is {@code true} if and only if all of the following\n     * are true:\n     * \u003cul\u003e\u003cli\u003e{@code toffset} is non-negative.\n     * \u003cli\u003e{@code ooffset} is non-negative.\n     * \u003cli\u003e{@code toffset+len} is less than or equal to the length of this\n     * {@code String} object.\n     * \u003cli\u003e{@code ooffset+len} is less than or equal to the length of the other\n     * argument.\n     * \u003cli\u003eif {@code ignoreCase} is {@code false}, all pairs of corresponding Unicode\n     * code points are equal integer values; or if {@code ignoreCase} is {@code true},\n     * {@link Character#toLowerCase(int) Character.toLowerCase(}\n     * {@link Character#toUpperCase(int)}{@code )} on all pairs of Unicode code points\n     * results in equal integer values.\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eNote that this method does \u003cem\u003enot\u003c/em\u003e take locale into account,\n     * and will result in unsatisfactory results for certain locales when\n     * {@code ignoreCase} is {@code true}.  The {@link java.text.Collator} class\n     * provides locale-sensitive comparison.\n     *\n     * @param   ignoreCase   if {@code true}, ignore case when comparing\n     *                       characters.\n     * @param   toffset      the starting offset of the subregion in this\n     *                       string.\n     * @param   other        the string argument.\n     * @param   ooffset      the starting offset of the subregion in the string\n     *                       argument.\n     * @param   len          the number of characters (Unicode code units -\n     *                       16bit {@code char} value) to compare.\n     * @return  {@code true} if the specified subregion of this string\n     *          matches the specified subregion of the string argument;\n     *          {@code false} otherwise. Whether the matching is exact\n     *          or case insensitive depends on the {@code ignoreCase}\n     *          argument.\n     * @see     #codePoints()\n     */\n    public boolean regionMatches(boolean ignoreCase, int toffset,\n            String other, int ooffset, int len) {\n        if (!ignoreCase) {\n            return regionMatches(toffset, other, ooffset, len);\n        }\n        // Note: toffset, ooffset, or len might be near -1\u003e\u003e\u003e1.\n        if ((ooffset \u003c 0) || (toffset \u003c 0)\n                || (toffset \u003e (long)length() - len)\n                || (ooffset \u003e (long)other.length() - len)) {\n            return false;\n        }\n        byte tv[] \u003d value;\n        byte ov[] \u003d other.value;\n        byte coder \u003d coder();\n        if (coder \u003d\u003d other.coder()) {\n            return coder \u003d\u003d LATIN1\n              ? StringLatin1.regionMatchesCI(tv, toffset, ov, ooffset, len)\n              : StringUTF16.regionMatchesCI(tv, toffset, ov, ooffset, len);\n        }\n        return coder \u003d\u003d LATIN1\n              ? StringLatin1.regionMatchesCI_UTF16(tv, toffset, ov, ooffset, len)\n              : StringUTF16.regionMatchesCI_Latin1(tv, toffset, ov, ooffset, len);\n    }\n\n    /**\n     * Tests if the substring of this string beginning at the\n     * specified index starts with the specified prefix.\n     *\n     * @param   prefix    the prefix.\n     * @param   toffset   where to begin looking in this string.\n     * @return  {@code true} if the character sequence represented by the\n     *          argument is a prefix of the substring of this object starting\n     *          at index {@code toffset}; {@code false} otherwise.\n     *          The result is {@code false} if {@code toffset} is\n     *          negative or greater than the length of this\n     *          {@code String} object; otherwise the result is the same\n     *          as the result of the expression\n     *          \u003cpre\u003e\n     *          this.substring(toffset).startsWith(prefix)\n     *          \u003c/pre\u003e\n     */\n    public boolean startsWith(String prefix, int toffset) {\n        // Note: toffset might be near -1\u003e\u003e\u003e1.\n        if (toffset \u003c 0 || toffset \u003e length() - prefix.length()) {\n            return false;\n        }\n        byte ta[] \u003d value;\n        byte pa[] \u003d prefix.value;\n        int po \u003d 0;\n        int pc \u003d pa.length;\n        byte coder \u003d coder();\n        if (coder \u003d\u003d prefix.coder()) {\n            int to \u003d (coder \u003d\u003d LATIN1) ? toffset : toffset \u003c\u003c 1;\n            while (po \u003c pc) {\n                if (ta[to++] !\u003d pa[po++]) {\n                    return false;\n                }\n            }\n        } else {\n            if (coder \u003d\u003d LATIN1) {  // \u0026\u0026 pcoder \u003d\u003d UTF16\n                return false;\n            }\n            // coder \u003d\u003d UTF16 \u0026\u0026 pcoder \u003d\u003d LATIN1)\n            while (po \u003c pc) {\n                if (StringUTF16.getChar(ta, toffset++) !\u003d (pa[po++] \u0026 0xff)) {\n                    return false;\n               }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Tests if this string starts with the specified prefix.\n     *\n     * @param   prefix   the prefix.\n     * @return  {@code true} if the character sequence represented by the\n     *          argument is a prefix of the character sequence represented by\n     *          this string; {@code false} otherwise.\n     *          Note also that {@code true} will be returned if the\n     *          argument is an empty string or is equal to this\n     *          {@code String} object as determined by the\n     *          {@link #equals(Object)} method.\n     * @since   1.0\n     */\n    public boolean startsWith(String prefix) {\n        return startsWith(prefix, 0);\n    }\n\n    /**\n     * Tests if this string ends with the specified suffix.\n     *\n     * @param   suffix   the suffix.\n     * @return  {@code true} if the character sequence represented by the\n     *          argument is a suffix of the character sequence represented by\n     *          this object; {@code false} otherwise. Note that the\n     *          result will be {@code true} if the argument is the\n     *          empty string or is equal to this {@code String} object\n     *          as determined by the {@link #equals(Object)} method.\n     */\n    public boolean endsWith(String suffix) {\n        return startsWith(suffix, length() - suffix.length());\n    }\n\n    /**\n     * Returns a hash code for this string. The hash code for a\n     * {@code String} object is computed as\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * using {@code int} arithmetic, where {@code s[i]} is the\n     * \u003ci\u003ei\u003c/i\u003eth character of the string, {@code n} is the length of\n     * the string, and {@code ^} indicates exponentiation.\n     * (The hash value of the empty string is zero.)\n     *\n     * @return  a hash code value for this object.\n     */\n    public int hashCode() {\n        // The hash or hashIsZero fields are subject to a benign data race,\n        // making it crucial to ensure that any observable result of the\n        // calculation in this method stays correct under any possible read of\n        // these fields. Necessary restrictions to allow this to be correct\n        // without explicit memory fences or similar concurrency primitives is\n        // that we can ever only write to one of these two fields for a given\n        // String instance, and that the computation is idempotent and derived\n        // from immutable state\n        int h \u003d hash;\n        if (h \u003d\u003d 0 \u0026\u0026 !hashIsZero) {\n            h \u003d isLatin1() ? StringLatin1.hashCode(value)\n                           : StringUTF16.hashCode(value);\n            if (h \u003d\u003d 0) {\n                hashIsZero \u003d true;\n            } else {\n                hash \u003d h;\n            }\n        }\n        return h;\n    }\n\n    /**\n     * Returns the index within this string of the first occurrence of\n     * the specified character. If a character with value\n     * {@code ch} occurs in the character sequence represented by\n     * this {@code String} object, then the index (in Unicode\n     * code units) of the first such occurrence is returned. For\n     * values of {@code ch} in the range from 0 to 0xFFFF\n     * (inclusive), this is the smallest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.charAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. For other values of {@code ch}, it is the\n     * smallest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.codePointAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. In either case, if no such character occurs in this\n     * string, then {@code -1} is returned.\n     *\n     * @param   ch   a character (Unicode code point).\n     * @return  the index of the first occurrence of the character in the\n     *          character sequence represented by this object, or\n     *          {@code -1} if the character does not occur.\n     */\n    public int indexOf(int ch) {\n        return indexOf(ch, 0);\n    }\n\n    /**\n     * Returns the index within this string of the first occurrence of the\n     * specified character, starting the search at the specified index.\n     * \u003cp\u003e\n     * If a character with value {@code ch} occurs in the\n     * character sequence represented by this {@code String}\n     * object at an index no smaller than {@code fromIndex}, then\n     * the index of the first such occurrence is returned. For values\n     * of {@code ch} in the range from 0 to 0xFFFF (inclusive),\n     * this is the smallest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * (this.charAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch) {@code \u0026\u0026} (\u003ci\u003ek\u003c/i\u003e \u0026gt;\u003d fromIndex)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. For other values of {@code ch}, it is the\n     * smallest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * (this.codePointAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch) {@code \u0026\u0026} (\u003ci\u003ek\u003c/i\u003e \u0026gt;\u003d fromIndex)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. In either case, if no such character occurs in this\n     * string at or after position {@code fromIndex}, then\n     * {@code -1} is returned.\n     *\n     * \u003cp\u003e\n     * There is no restriction on the value of {@code fromIndex}. If it\n     * is negative, it has the same effect as if it were zero: this entire\n     * string may be searched. If it is greater than the length of this\n     * string, it has the same effect as if it were equal to the length of\n     * this string: {@code -1} is returned.\n     *\n     * \u003cp\u003eAll indices are specified in {@code char} values\n     * (Unicode code units).\n     *\n     * @param   ch          a character (Unicode code point).\n     * @param   fromIndex   the index to start the search from.\n     * @return  the index of the first occurrence of the character in the\n     *          character sequence represented by this object that is greater\n     *          than or equal to {@code fromIndex}, or {@code -1}\n     *          if the character does not occur.\n     */\n    public int indexOf(int ch, int fromIndex) {\n        return isLatin1() ? StringLatin1.indexOf(value, ch, fromIndex)\n                          : StringUTF16.indexOf(value, ch, fromIndex);\n    }\n\n    /**\n     * Returns the index within this string of the last occurrence of\n     * the specified character. For values of {@code ch} in the\n     * range from 0 to 0xFFFF (inclusive), the index (in Unicode code\n     * units) returned is the largest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.charAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. For other values of {@code ch}, it is the\n     * largest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.codePointAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true.  In either case, if no such character occurs in this\n     * string, then {@code -1} is returned.  The\n     * {@code String} is searched backwards starting at the last\n     * character.\n     *\n     * @param   ch   a character (Unicode code point).\n     * @return  the index of the last occurrence of the character in the\n     *          character sequence represented by this object, or\n     *          {@code -1} if the character does not occur.\n     */\n    public int lastIndexOf(int ch) {\n        return lastIndexOf(ch, length() - 1);\n    }\n\n    /**\n     * Returns the index within this string of the last occurrence of\n     * the specified character, searching backward starting at the\n     * specified index. For values of {@code ch} in the range\n     * from 0 to 0xFFFF (inclusive), the index returned is the largest\n     * value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * (this.charAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch) {@code \u0026\u0026} (\u003ci\u003ek\u003c/i\u003e \u0026lt;\u003d fromIndex)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. For other values of {@code ch}, it is the\n     * largest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * (this.codePointAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch) {@code \u0026\u0026} (\u003ci\u003ek\u003c/i\u003e \u0026lt;\u003d fromIndex)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. In either case, if no such character occurs in this\n     * string at or before position {@code fromIndex}, then\n     * {@code -1} is returned.\n     *\n     * \u003cp\u003eAll indices are specified in {@code char} values\n     * (Unicode code units).\n     *\n     * @param   ch          a character (Unicode code point).\n     * @param   fromIndex   the index to start the search from. There is no\n     *          restriction on the value of {@code fromIndex}. If it is\n     *          greater than or equal to the length of this string, it has\n     *          the same effect as if it were equal to one less than the\n     *          length of this string: this entire string may be searched.\n     *          If it is negative, it has the same effect as if it were -1:\n     *          -1 is returned.\n     * @return  the index of the last occurrence of the character in the\n     *          character sequence represented by this object that is less\n     *          than or equal to {@code fromIndex}, or {@code -1}\n     *          if the character does not occur before that point.\n     */\n    public int lastIndexOf(int ch, int fromIndex) {\n        return isLatin1() ? StringLatin1.lastIndexOf(value, ch, fromIndex)\n                          : StringUTF16.lastIndexOf(value, ch, fromIndex);\n    }\n\n    /**\n     * Returns the index within this string of the first occurrence of the\n     * specified substring.\n     *\n     * \u003cp\u003eThe returned index is the smallest value {@code k} for which:\n     * \u003cpre\u003e{@code\n     * this.startsWith(str, k)\n     * }\u003c/pre\u003e\n     * If no such value of {@code k} exists, then {@code -1} is returned.\n     *\n     * @param   str   the substring to search for.\n     * @return  the index of the first occurrence of the specified substring,\n     *          or {@code -1} if there is no such occurrence.\n     */\n    public int indexOf(String str) {\n        byte coder \u003d coder();\n        if (coder \u003d\u003d str.coder()) {\n            return isLatin1() ? StringLatin1.indexOf(value, str.value)\n                              : StringUTF16.indexOf(value, str.value);\n        }\n        if (coder \u003d\u003d LATIN1) {  // str.coder \u003d\u003d UTF16\n            return -1;\n        }\n        return StringUTF16.indexOfLatin1(value, str.value);\n    }\n\n    /**\n     * Returns the index within this string of the first occurrence of the\n     * specified substring, starting at the specified index.\n     *\n     * \u003cp\u003eThe returned index is the smallest value {@code k} for which:\n     * \u003cpre\u003e{@code\n     *     k \u003e\u003d Math.min(fromIndex, this.length()) \u0026\u0026\n     *                   this.startsWith(str, k)\n     * }\u003c/pre\u003e\n     * If no such value of {@code k} exists, then {@code -1} is returned.\n     *\n     * @param   str         the substring to search for.\n     * @param   fromIndex   the index from which to start the search.\n     * @return  the index of the first occurrence of the specified substring,\n     *          starting at the specified index,\n     *          or {@code -1} if there is no such occurrence.\n     */\n    public int indexOf(String str, int fromIndex) {\n        return indexOf(value, coder(), length(), str, fromIndex);\n    }\n\n    /**\n     * Code shared by String and AbstractStringBuilder to do searches. The\n     * source is the character array being searched, and the target\n     * is the string being searched for.\n     *\n     * @param   src       the characters being searched.\n     * @param   srcCoder  the coder of the source string.\n     * @param   srcCount  length of the source string.\n     * @param   tgtStr    the characters being searched for.\n     * @param   fromIndex the index to begin searching from.\n     */\n    static int indexOf(byte[] src, byte srcCoder, int srcCount,\n                       String tgtStr, int fromIndex) {\n        byte[] tgt    \u003d tgtStr.value;\n        byte tgtCoder \u003d tgtStr.coder();\n        int tgtCount  \u003d tgtStr.length();\n\n        if (fromIndex \u003e\u003d srcCount) {\n            return (tgtCount \u003d\u003d 0 ? srcCount : -1);\n        }\n        if (fromIndex \u003c 0) {\n            fromIndex \u003d 0;\n        }\n        if (tgtCount \u003d\u003d 0) {\n            return fromIndex;\n        }\n        if (tgtCount \u003e srcCount) {\n            return -1;\n        }\n        if (srcCoder \u003d\u003d tgtCoder) {\n            return srcCoder \u003d\u003d LATIN1\n                ? StringLatin1.indexOf(src, srcCount, tgt, tgtCount, fromIndex)\n                : StringUTF16.indexOf(src, srcCount, tgt, tgtCount, fromIndex);\n        }\n        if (srcCoder \u003d\u003d LATIN1) {    //  \u0026\u0026 tgtCoder \u003d\u003d UTF16\n            return -1;\n        }\n        // srcCoder \u003d\u003d UTF16 \u0026\u0026 tgtCoder \u003d\u003d LATIN1) {\n        return StringUTF16.indexOfLatin1(src, srcCount, tgt, tgtCount, fromIndex);\n    }\n\n    /**\n     * Returns the index within this string of the last occurrence of the\n     * specified substring.  The last occurrence of the empty string \"\"\n     * is considered to occur at the index value {@code this.length()}.\n     *\n     * \u003cp\u003eThe returned index is the largest value {@code k} for which:\n     * \u003cpre\u003e{@code\n     * this.startsWith(str, k)\n     * }\u003c/pre\u003e\n     * If no such value of {@code k} exists, then {@code -1} is returned.\n     *\n     * @param   str   the substring to search for.\n     * @return  the index of the last occurrence of the specified substring,\n     *          or {@code -1} if there is no such occurrence.\n     */\n    public int lastIndexOf(String str) {\n        return lastIndexOf(str, length());\n    }\n\n    /**\n     * Returns the index within this string of the last occurrence of the\n     * specified substring, searching backward starting at the specified index.\n     *\n     * \u003cp\u003eThe returned index is the largest value {@code k} for which:\n     * \u003cpre\u003e{@code\n     *     k \u003c\u003d Math.min(fromIndex, this.length()) \u0026\u0026\n     *                   this.startsWith(str, k)\n     * }\u003c/pre\u003e\n     * If no such value of {@code k} exists, then {@code -1} is returned.\n     *\n     * @param   str         the substring to search for.\n     * @param   fromIndex   the index to start the search from.\n     * @return  the index of the last occurrence of the specified substring,\n     *          searching backward from the specified index,\n     *          or {@code -1} if there is no such occurrence.\n     */\n    public int lastIndexOf(String str, int fromIndex) {\n        return lastIndexOf(value, coder(), length(), str, fromIndex);\n    }\n\n    /**\n     * Code shared by String and AbstractStringBuilder to do searches. The\n     * source is the character array being searched, and the target\n     * is the string being searched for.\n     *\n     * @param   src         the characters being searched.\n     * @param   srcCoder    coder handles the mapping between bytes/chars\n     * @param   srcCount    count of the source string.\n     * @param   tgtStr      the characters being searched for.\n     * @param   fromIndex   the index to begin searching from.\n     */\n    static int lastIndexOf(byte[] src, byte srcCoder, int srcCount,\n                           String tgtStr, int fromIndex) {\n        byte[] tgt \u003d tgtStr.value;\n        byte tgtCoder \u003d tgtStr.coder();\n        int tgtCount \u003d tgtStr.length();\n        /*\n         * Check arguments; return immediately where possible. For\n         * consistency, don\u0027t check for null str.\n         */\n        int rightIndex \u003d srcCount - tgtCount;\n        if (fromIndex \u003e rightIndex) {\n            fromIndex \u003d rightIndex;\n        }\n        if (fromIndex \u003c 0) {\n            return -1;\n        }\n        /* Empty string always matches. */\n        if (tgtCount \u003d\u003d 0) {\n            return fromIndex;\n        }\n        if (srcCoder \u003d\u003d tgtCoder) {\n            return srcCoder \u003d\u003d LATIN1\n                ? StringLatin1.lastIndexOf(src, srcCount, tgt, tgtCount, fromIndex)\n                : StringUTF16.lastIndexOf(src, srcCount, tgt, tgtCount, fromIndex);\n        }\n        if (srcCoder \u003d\u003d LATIN1) {    // \u0026\u0026 tgtCoder \u003d\u003d UTF16\n            return -1;\n        }\n        // srcCoder \u003d\u003d UTF16 \u0026\u0026 tgtCoder \u003d\u003d LATIN1\n        return StringUTF16.lastIndexOfLatin1(src, srcCount, tgt, tgtCount, fromIndex);\n    }\n\n    /**\n     * Returns a string that is a substring of this string. The\n     * substring begins with the character at the specified index and\n     * extends to the end of this string. \u003cp\u003e\n     * Examples:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * \"unhappy\".substring(2) returns \"happy\"\n     * \"Harbison\".substring(3) returns \"bison\"\n     * \"emptiness\".substring(9) returns \"\" (an empty string)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @param      beginIndex   the beginning index, inclusive.\n     * @return     the specified substring.\n     * @throws     IndexOutOfBoundsException  if\n     *             {@code beginIndex} is negative or larger than the\n     *             length of this {@code String} object.\n     */\n    public String substring(int beginIndex) {\n        return substring(beginIndex, length());\n    }\n\n    /**\n     * Returns a string that is a substring of this string. The\n     * substring begins at the specified {@code beginIndex} and\n     * extends to the character at index {@code endIndex - 1}.\n     * Thus the length of the substring is {@code endIndex-beginIndex}.\n     * \u003cp\u003e\n     * Examples:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * \"hamburger\".substring(4, 8) returns \"urge\"\n     * \"smiles\".substring(1, 5) returns \"mile\"\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @param      beginIndex   the beginning index, inclusive.\n     * @param      endIndex     the ending index, exclusive.\n     * @return     the specified substring.\n     * @throws     IndexOutOfBoundsException  if the\n     *             {@code beginIndex} is negative, or\n     *             {@code endIndex} is larger than the length of\n     *             this {@code String} object, or\n     *             {@code beginIndex} is larger than\n     *             {@code endIndex}.\n     */\n    public String substring(int beginIndex, int endIndex) {\n        int length \u003d length();\n        checkBoundsBeginEnd(beginIndex, endIndex, length);\n        if (beginIndex \u003d\u003d 0 \u0026\u0026 endIndex \u003d\u003d length) {\n            return this;\n        }\n        int subLen \u003d endIndex - beginIndex;\n        return isLatin1() ? StringLatin1.newString(value, beginIndex, subLen)\n                          : StringUTF16.newString(value, beginIndex, subLen);\n    }\n\n    /**\n     * Returns a character sequence that is a subsequence of this sequence.\n     *\n     * \u003cp\u003e An invocation of this method of the form\n     *\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * str.subSequence(begin,\u0026nbsp;end)\u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * behaves in exactly the same way as the invocation\n     *\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * str.substring(begin,\u0026nbsp;end)\u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @apiNote\n     * This method is defined so that the {@code String} class can implement\n     * the {@link CharSequence} interface.\n     *\n     * @param   beginIndex   the begin index, inclusive.\n     * @param   endIndex     the end index, exclusive.\n     * @return  the specified subsequence.\n     *\n     * @throws  IndexOutOfBoundsException\n     *          if {@code beginIndex} or {@code endIndex} is negative,\n     *          if {@code endIndex} is greater than {@code length()},\n     *          or if {@code beginIndex} is greater than {@code endIndex}\n     *\n     * @since 1.4\n     */\n    public CharSequence subSequence(int beginIndex, int endIndex) {\n        return this.substring(beginIndex, endIndex);\n    }\n\n    /**\n     * Concatenates the specified string to the end of this string.\n     * \u003cp\u003e\n     * If the length of the argument string is {@code 0}, then this\n     * {@code String} object is returned. Otherwise, a\n     * {@code String} object is returned that represents a character\n     * sequence that is the concatenation of the character sequence\n     * represented by this {@code String} object and the character\n     * sequence represented by the argument string.\u003cp\u003e\n     * Examples:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * \"cares\".concat(\"s\") returns \"caress\"\n     * \"to\".concat(\"get\").concat(\"her\") returns \"together\"\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @param   str   the {@code String} that is concatenated to the end\n     *                of this {@code String}.\n     * @return  a string that represents the concatenation of this object\u0027s\n     *          characters followed by the string argument\u0027s characters.\n     */\n    public String concat(String str) {\n        if (str.isEmpty()) {\n            return this;\n        }\n        return StringConcatHelper.simpleConcat(this, str);\n    }\n\n    /**\n     * Returns a string resulting from replacing all occurrences of\n     * {@code oldChar} in this string with {@code newChar}.\n     * \u003cp\u003e\n     * If the character {@code oldChar} does not occur in the\n     * character sequence represented by this {@code String} object,\n     * then a reference to this {@code String} object is returned.\n     * Otherwise, a {@code String} object is returned that\n     * represents a character sequence identical to the character sequence\n     * represented by this {@code String} object, except that every\n     * occurrence of {@code oldChar} is replaced by an occurrence\n     * of {@code newChar}.\n     * \u003cp\u003e\n     * Examples:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * \"mesquite in your cellar\".replace(\u0027e\u0027, \u0027o\u0027)\n     *         returns \"mosquito in your collar\"\n     * \"the war of baronets\".replace(\u0027r\u0027, \u0027y\u0027)\n     *         returns \"the way of bayonets\"\n     * \"sparring with a purple porpoise\".replace(\u0027p\u0027, \u0027t\u0027)\n     *         returns \"starring with a turtle tortoise\"\n     * \"JonL\".replace(\u0027q\u0027, \u0027x\u0027) returns \"JonL\" (no change)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @param   oldChar   the old character.\n     * @param   newChar   the new character.\n     * @return  a string derived from this string by replacing every\n     *          occurrence of {@code oldChar} with {@code newChar}.\n     */\n    public String replace(char oldChar, char newChar) {\n        if (oldChar !\u003d newChar) {\n            String ret \u003d isLatin1() ? StringLatin1.replace(value, oldChar, newChar)\n                                    : StringUTF16.replace(value, oldChar, newChar);\n            if (ret !\u003d null) {\n                return ret;\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Tells whether or not this string matches the given \u003ca\n     * href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e.\n     *\n     * \u003cp\u003e An invocation of this method of the form\n     * \u003ci\u003estr\u003c/i\u003e{@code .matches(}\u003ci\u003eregex\u003c/i\u003e{@code )} yields exactly the\n     * same result as the expression\n     *\n     * \u003cblockquote\u003e\n     * {@link java.util.regex.Pattern}.{@link java.util.regex.Pattern#matches(String,CharSequence)\n     * matches(\u003ci\u003eregex\u003c/i\u003e, \u003ci\u003estr\u003c/i\u003e)}\n     * \u003c/blockquote\u003e\n     *\n     * @param   regex\n     *          the regular expression to which this string is to be matched\n     *\n     * @return  {@code true} if, and only if, this string matches the\n     *          given regular expression\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\u0027s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     */\n    public boolean matches(String regex) {\n        return Pattern.matches(regex, this);\n    }\n\n    /**\n     * Returns true if and only if this string contains the specified\n     * sequence of char values.\n     *\n     * @param s the sequence to search for\n     * @return true if this string contains {@code s}, false otherwise\n     * @since 1.5\n     */\n    public boolean contains(CharSequence s) {\n        return indexOf(s.toString()) \u003e\u003d 0;\n    }\n\n    /**\n     * Replaces the first substring of this string that matches the given \u003ca\n     * href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e with the\n     * given replacement.\n     *\n     * \u003cp\u003e An invocation of this method of the form\n     * \u003ci\u003estr\u003c/i\u003e{@code .replaceFirst(}\u003ci\u003eregex\u003c/i\u003e{@code ,} \u003ci\u003erepl\u003c/i\u003e{@code )}\n     * yields exactly the same result as the expression\n     *\n     * \u003cblockquote\u003e\n     * \u003ccode\u003e\n     * {@link java.util.regex.Pattern}.{@link\n     * java.util.regex.Pattern#compile(String) compile}(\u003ci\u003eregex\u003c/i\u003e).{@link\n     * java.util.regex.Pattern#matcher(java.lang.CharSequence) matcher}(\u003ci\u003estr\u003c/i\u003e).{@link\n     * java.util.regex.Matcher#replaceFirst(String) replaceFirst}(\u003ci\u003erepl\u003c/i\u003e)\n     * \u003c/code\u003e\n     * \u003c/blockquote\u003e\n     *\n     *\u003cp\u003e\n     * Note that backslashes ({@code \\}) and dollar signs ({@code $}) in the\n     * replacement string may cause the results to be different than if it were\n     * being treated as a literal replacement string; see\n     * {@link java.util.regex.Matcher#replaceFirst}.\n     * Use {@link java.util.regex.Matcher#quoteReplacement} to suppress the special\n     * meaning of these characters, if desired.\n     *\n     * @param   regex\n     *          the regular expression to which this string is to be matched\n     * @param   replacement\n     *          the string to be substituted for the first match\n     *\n     * @return  The resulting {@code String}\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\u0027s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     */\n    public String replaceFirst(String regex, String replacement) {\n        return Pattern.compile(regex).matcher(this).replaceFirst(replacement);\n    }\n\n    /**\n     * Replaces each substring of this string that matches the given \u003ca\n     * href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e with the\n     * given replacement.\n     *\n     * \u003cp\u003e An invocation of this method of the form\n     * \u003ci\u003estr\u003c/i\u003e{@code .replaceAll(}\u003ci\u003eregex\u003c/i\u003e{@code ,} \u003ci\u003erepl\u003c/i\u003e{@code )}\n     * yields exactly the same result as the expression\n     *\n     * \u003cblockquote\u003e\n     * \u003ccode\u003e\n     * {@link java.util.regex.Pattern}.{@link\n     * java.util.regex.Pattern#compile(String) compile}(\u003ci\u003eregex\u003c/i\u003e).{@link\n     * java.util.regex.Pattern#matcher(java.lang.CharSequence) matcher}(\u003ci\u003estr\u003c/i\u003e).{@link\n     * java.util.regex.Matcher#replaceAll(String) replaceAll}(\u003ci\u003erepl\u003c/i\u003e)\n     * \u003c/code\u003e\n     * \u003c/blockquote\u003e\n     *\n     *\u003cp\u003e\n     * Note that backslashes ({@code \\}) and dollar signs ({@code $}) in the\n     * replacement string may cause the results to be different than if it were\n     * being treated as a literal replacement string; see\n     * {@link java.util.regex.Matcher#replaceAll Matcher.replaceAll}.\n     * Use {@link java.util.regex.Matcher#quoteReplacement} to suppress the special\n     * meaning of these characters, if desired.\n     *\n     * @param   regex\n     *          the regular expression to which this string is to be matched\n     * @param   replacement\n     *          the string to be substituted for each match\n     *\n     * @return  The resulting {@code String}\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\u0027s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     */\n    public String replaceAll(String regex, String replacement) {\n        return Pattern.compile(regex).matcher(this).replaceAll(replacement);\n    }\n\n    /**\n     * Replaces each substring of this string that matches the literal target\n     * sequence with the specified literal replacement sequence. The\n     * replacement proceeds from the beginning of the string to the end, for\n     * example, replacing \"aa\" with \"b\" in the string \"aaa\" will result in\n     * \"ba\" rather than \"ab\".\n     *\n     * @param  target The sequence of char values to be replaced\n     * @param  replacement The replacement sequence of char values\n     * @return  The resulting string\n     * @since 1.5\n     */\n    public String replace(CharSequence target, CharSequence replacement) {\n        String trgtStr \u003d target.toString();\n        String replStr \u003d replacement.toString();\n        int thisLen \u003d length();\n        int trgtLen \u003d trgtStr.length();\n        int replLen \u003d replStr.length();\n\n        if (trgtLen \u003e 0) {\n            if (trgtLen \u003d\u003d 1 \u0026\u0026 replLen \u003d\u003d 1) {\n                return replace(trgtStr.charAt(0), replStr.charAt(0));\n            }\n\n            boolean thisIsLatin1 \u003d this.isLatin1();\n            boolean trgtIsLatin1 \u003d trgtStr.isLatin1();\n            boolean replIsLatin1 \u003d replStr.isLatin1();\n            String ret \u003d (thisIsLatin1 \u0026\u0026 trgtIsLatin1 \u0026\u0026 replIsLatin1)\n                    ? StringLatin1.replace(value, thisLen,\n                                           trgtStr.value, trgtLen,\n                                           replStr.value, replLen)\n                    : StringUTF16.replace(value, thisLen, thisIsLatin1,\n                                          trgtStr.value, trgtLen, trgtIsLatin1,\n                                          replStr.value, replLen, replIsLatin1);\n            if (ret !\u003d null) {\n                return ret;\n            }\n            return this;\n\n        } else { // trgtLen \u003d\u003d 0\n            int resultLen;\n            try {\n                resultLen \u003d Math.addExact(thisLen, Math.multiplyExact(\n                        Math.addExact(thisLen, 1), replLen));\n            } catch (ArithmeticException ignored) {\n                throw new OutOfMemoryError(\"Required length exceeds implementation limit\");\n            }\n\n            StringBuilder sb \u003d new StringBuilder(resultLen);\n            sb.append(replStr);\n            for (int i \u003d 0; i \u003c thisLen; ++i) {\n                sb.append(charAt(i)).append(replStr);\n            }\n            return sb.toString();\n        }\n    }\n\n    /**\n     * Splits this string around matches of the given\n     * \u003ca href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e.\n     *\n     * \u003cp\u003e The array returned by this method contains each substring of this\n     * string that is terminated by another substring that matches the given\n     * expression or is terminated by the end of the string.  The substrings in\n     * the array are in the order in which they occur in this string.  If the\n     * expression does not match any part of the input then the resulting array\n     * has just one element, namely this string.\n     *\n     * \u003cp\u003e When there is a positive-width match at the beginning of this\n     * string then an empty leading substring is included at the beginning\n     * of the resulting array. A zero-width match at the beginning however\n     * never produces such empty leading substring.\n     *\n     * \u003cp\u003e The {@code limit} parameter controls the number of times the\n     * pattern is applied and therefore affects the length of the resulting\n     * array.\n     * \u003cul\u003e\n     *    \u003cli\u003e\u003cp\u003e\n     *    If the \u003ci\u003elimit\u003c/i\u003e is positive then the pattern will be applied\n     *    at most \u003ci\u003elimit\u003c/i\u003e\u0026nbsp;-\u0026nbsp;1 times, the array\u0027s length will be\n     *    no greater than \u003ci\u003elimit\u003c/i\u003e, and the array\u0027s last entry will contain\n     *    all input beyond the last matched delimiter.\u003c/p\u003e\u003c/li\u003e\n     *\n     *    \u003cli\u003e\u003cp\u003e\n     *    If the \u003ci\u003elimit\u003c/i\u003e is zero then the pattern will be applied as\n     *    many times as possible, the array can have any length, and trailing\n     *    empty strings will be discarded.\u003c/p\u003e\u003c/li\u003e\n     *\n     *    \u003cli\u003e\u003cp\u003e\n     *    If the \u003ci\u003elimit\u003c/i\u003e is negative then the pattern will be applied\n     *    as many times as possible and the array can have any length.\u003c/p\u003e\u003c/li\u003e\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003e The string {@code \"boo:and:foo\"}, for example, yields the\n     * following results with these parameters:\n     *\n     * \u003cblockquote\u003e\u003ctable class\u003d\"plain\"\u003e\n     * \u003ccaption style\u003d\"display:none\"\u003eSplit example showing regex, limit, and result\u003c/caption\u003e\n     * \u003cthead\u003e\n     * \u003ctr\u003e\n     *     \u003cth scope\u003d\"col\"\u003eRegex\u003c/th\u003e\n     *     \u003cth scope\u003d\"col\"\u003eLimit\u003c/th\u003e\n     *     \u003cth scope\u003d\"col\"\u003eResult\u003c/th\u003e\n     * \u003c/tr\u003e\n     * \u003c/thead\u003e\n     * \u003ctbody\u003e\n     * \u003ctr\u003e\u003cth scope\u003d\"row\" rowspan\u003d\"3\" style\u003d\"font-weight:normal\"\u003e:\u003c/th\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e2\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"boo\", \"and:foo\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003c!-- : --\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e5\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"boo\", \"and\", \"foo\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003c!-- : --\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e-2\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"boo\", \"and\", \"foo\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003cth scope\u003d\"row\" rowspan\u003d\"3\" style\u003d\"font-weight:normal\"\u003eo\u003c/th\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e5\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"b\", \"\", \":and:f\", \"\", \"\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003c!-- o --\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e-2\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"b\", \"\", \":and:f\", \"\", \"\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003c!-- o --\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e0\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"b\", \"\", \":and:f\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003c/tbody\u003e\n     * \u003c/table\u003e\u003c/blockquote\u003e\n     *\n     * \u003cp\u003e An invocation of this method of the form\n     * \u003ci\u003estr.\u003c/i\u003e{@code split(}\u003ci\u003eregex\u003c/i\u003e{@code ,}\u0026nbsp;\u003ci\u003en\u003c/i\u003e{@code )}\n     * yields the same result as the expression\n     *\n     * \u003cblockquote\u003e\n     * \u003ccode\u003e\n     * {@link java.util.regex.Pattern}.{@link\n     * java.util.regex.Pattern#compile(String) compile}(\u003ci\u003eregex\u003c/i\u003e).{@link\n     * java.util.regex.Pattern#split(java.lang.CharSequence,int) split}(\u003ci\u003estr\u003c/i\u003e,\u0026nbsp;\u003ci\u003en\u003c/i\u003e)\n     * \u003c/code\u003e\n     * \u003c/blockquote\u003e\n     *\n     *\n     * @param  regex\n     *         the delimiting regular expression\n     *\n     * @param  limit\n     *         the result threshold, as described above\n     *\n     * @return  the array of strings computed by splitting this string\n     *          around matches of the given regular expression\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\u0027s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     */\n    public String[] split(String regex, int limit) {\n        /* fastpath if the regex is a\n         * (1) one-char String and this character is not one of the\n         *     RegEx\u0027s meta characters \".$|()[{^?*+\\\\\", or\n         * (2) two-char String and the first char is the backslash and\n         *     the second is not the ascii digit or ascii letter.\n         */\n        char ch \u003d 0;\n        if (((regex.length() \u003d\u003d 1 \u0026\u0026\n             \".$|()[{^?*+\\\\\".indexOf(ch \u003d regex.charAt(0)) \u003d\u003d -1) ||\n             (regex.length() \u003d\u003d 2 \u0026\u0026\n              regex.charAt(0) \u003d\u003d \u0027\\\\\u0027 \u0026\u0026\n              (((ch \u003d regex.charAt(1))-\u00270\u0027)|(\u00279\u0027-ch)) \u003c 0 \u0026\u0026\n              ((ch-\u0027a\u0027)|(\u0027z\u0027-ch)) \u003c 0 \u0026\u0026\n              ((ch-\u0027A\u0027)|(\u0027Z\u0027-ch)) \u003c 0)) \u0026\u0026\n            (ch \u003c Character.MIN_HIGH_SURROGATE ||\n             ch \u003e Character.MAX_LOW_SURROGATE))\n        {\n            int off \u003d 0;\n            int next \u003d 0;\n            boolean limited \u003d limit \u003e 0;\n            ArrayList\u003cString\u003e list \u003d new ArrayList\u003c\u003e();\n            while ((next \u003d indexOf(ch, off)) !\u003d -1) {\n                if (!limited || list.size() \u003c limit - 1) {\n                    list.add(substring(off, next));\n                    off \u003d next + 1;\n                } else {    // last one\n                    //assert (list.size() \u003d\u003d limit - 1);\n                    int last \u003d length();\n                    list.add(substring(off, last));\n                    off \u003d last;\n                    break;\n                }\n            }\n            // If no match was found, return this\n            if (off \u003d\u003d 0)\n                return new String[]{this};\n\n            // Add remaining segment\n            if (!limited || list.size() \u003c limit)\n                list.add(substring(off, length()));\n\n            // Construct result\n            int resultSize \u003d list.size();\n            if (limit \u003d\u003d 0) {\n                while (resultSize \u003e 0 \u0026\u0026 list.get(resultSize - 1).isEmpty()) {\n                    resultSize--;\n                }\n            }\n            String[] result \u003d new String[resultSize];\n            return list.subList(0, resultSize).toArray(result);\n        }\n        return Pattern.compile(regex).split(this, limit);\n    }\n\n    /**\n     * Splits this string around matches of the given \u003ca\n     * href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e.\n     *\n     * \u003cp\u003e This method works as if by invoking the two-argument {@link\n     * #split(String, int) split} method with the given expression and a limit\n     * argument of zero.  Trailing empty strings are therefore not included in\n     * the resulting array.\n     *\n     * \u003cp\u003e The string {@code \"boo:and:foo\"}, for example, yields the following\n     * results with these expressions:\n     *\n     * \u003cblockquote\u003e\u003ctable class\u003d\"plain\"\u003e\n     * \u003ccaption style\u003d\"display:none\"\u003eSplit examples showing regex and result\u003c/caption\u003e\n     * \u003cthead\u003e\n     * \u003ctr\u003e\n     *  \u003cth scope\u003d\"col\"\u003eRegex\u003c/th\u003e\n     *  \u003cth scope\u003d\"col\"\u003eResult\u003c/th\u003e\n     * \u003c/tr\u003e\n     * \u003c/thead\u003e\n     * \u003ctbody\u003e\n     * \u003ctr\u003e\u003cth scope\u003d\"row\" style\u003d\"text-weight:normal\"\u003e:\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"boo\", \"and\", \"foo\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003cth scope\u003d\"row\" style\u003d\"text-weight:normal\"\u003eo\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"b\", \"\", \":and:f\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003c/tbody\u003e\n     * \u003c/table\u003e\u003c/blockquote\u003e\n     *\n     *\n     * @param  regex\n     *         the delimiting regular expression\n     *\n     * @return  the array of strings computed by splitting this string\n     *          around matches of the given regular expression\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\u0027s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     */\n    public String[] split(String regex) {\n        return split(regex, 0);\n    }\n\n    /**\n     * Returns a new String composed of copies of the\n     * {@code CharSequence elements} joined together with a copy of\n     * the specified {@code delimiter}.\n     *\n     * \u003cblockquote\u003eFor example,\n     * \u003cpre\u003e{@code\n     *     String message \u003d String.join(\"-\", \"Java\", \"is\", \"cool\");\n     *     // message returned is: \"Java-is-cool\"\n     * }\u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * Note that if an element is null, then {@code \"null\"} is added.\n     *\n     * @param  delimiter the delimiter that separates each element\n     * @param  elements the elements to join together.\n     *\n     * @return a new {@code String} that is composed of the {@code elements}\n     *         separated by the {@code delimiter}\n     *\n     * @throws NullPointerException If {@code delimiter} or {@code elements}\n     *         is {@code null}\n     *\n     * @see java.util.StringJoiner\n     * @since 1.8\n     */\n    public static String join(CharSequence delimiter, CharSequence... elements) {\n        var delim \u003d delimiter.toString();\n        var elems \u003d new String[elements.length];\n        for (int i \u003d 0; i \u003c elements.length; i++) {\n            elems[i] \u003d String.valueOf(elements[i]);\n        }\n        return join(\"\", \"\", delim, elems, elems.length);\n    }\n\n    /**\n     * Designated join routine.\n     *\n     * @param prefix the non-null prefix\n     * @param suffix the non-null suffix\n     * @param delimiter the non-null delimiter\n     * @param elements the non-null array of non-null elements\n     * @param size the number of elements in the array (\u003c\u003d elements.length)\n     * @return the joined string\n     */\n    @ForceInline\n    static String join(String prefix, String suffix, String delimiter, String[] elements, int size) {\n        int icoder \u003d prefix.coder() | suffix.coder();\n        long len \u003d (long) prefix.length() + suffix.length();\n        if (size \u003e 1) { // when there are more than one element, size - 1 delimiters will be emitted\n            len +\u003d (long) (size - 1) * delimiter.length();\n            icoder |\u003d delimiter.coder();\n        }\n        // assert len \u003e 0L; // max: (long) Integer.MAX_VALUE \u003c\u003c 32\n        // following loop will add max: (long) Integer.MAX_VALUE * Integer.MAX_VALUE to len\n        // so len can overflow at most once\n        for (int i \u003d 0; i \u003c size; i++) {\n            var el \u003d elements[i];\n            len +\u003d el.length();\n            icoder |\u003d el.coder();\n        }\n        byte coder \u003d (byte) icoder;\n        // long len overflow check, char -\u003e byte length, int len overflow check\n        if (len \u003c 0L || (len \u003c\u003c\u003d coder) !\u003d (int) len) {\n            throw new OutOfMemoryError(\"Requested string length exceeds VM limit\");\n        }\n        byte[] value \u003d StringConcatHelper.newArray(len);\n\n        int off \u003d 0;\n        prefix.getBytes(value, off, coder); off +\u003d prefix.length();\n        if (size \u003e 0) {\n            var el \u003d elements[0];\n            el.getBytes(value, off, coder); off +\u003d el.length();\n            for (int i \u003d 1; i \u003c size; i++) {\n                delimiter.getBytes(value, off, coder); off +\u003d delimiter.length();\n                el \u003d elements[i];\n                el.getBytes(value, off, coder); off +\u003d el.length();\n            }\n        }\n        suffix.getBytes(value, off, coder);\n        // assert off + suffix.length() \u003d\u003d value.length \u003e\u003e coder;\n\n        return new String(value, coder);\n    }\n\n    /**\n     * Returns a new {@code String} composed of copies of the\n     * {@code CharSequence elements} joined together with a copy of the\n     * specified {@code delimiter}.\n     *\n     * \u003cblockquote\u003eFor example,\n     * \u003cpre\u003e{@code\n     *     List\u003cString\u003e strings \u003d List.of(\"Java\", \"is\", \"cool\");\n     *     String message \u003d String.join(\" \", strings);\n     *     // message returned is: \"Java is cool\"\n     *\n     *     Set\u003cString\u003e strings \u003d\n     *         new LinkedHashSet\u003c\u003e(List.of(\"Java\", \"is\", \"very\", \"cool\"));\n     *     String message \u003d String.join(\"-\", strings);\n     *     // message returned is: \"Java-is-very-cool\"\n     * }\u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * Note that if an individual element is {@code null}, then {@code \"null\"} is added.\n     *\n     * @param  delimiter a sequence of characters that is used to separate each\n     *         of the {@code elements} in the resulting {@code String}\n     * @param  elements an {@code Iterable} that will have its {@code elements}\n     *         joined together.\n     *\n     * @return a new {@code String} that is composed from the {@code elements}\n     *         argument\n     *\n     * @throws NullPointerException If {@code delimiter} or {@code elements}\n     *         is {@code null}\n     *\n     * @see    #join(CharSequence,CharSequence...)\n     * @see    java.util.StringJoiner\n     * @since 1.8\n     */\n    public static String join(CharSequence delimiter,\n            Iterable\u003c? extends CharSequence\u003e elements) {\n        Objects.requireNonNull(delimiter);\n        Objects.requireNonNull(elements);\n        var delim \u003d delimiter.toString();\n        var elems \u003d new String[8];\n        int size \u003d 0;\n        for (CharSequence cs: elements) {\n            if (size \u003e\u003d elems.length) {\n                elems \u003d Arrays.copyOf(elems, elems.length \u003c\u003c 1);\n            }\n            elems[size++] \u003d String.valueOf(cs);\n        }\n        return join(\"\", \"\", delim, elems, size);\n    }\n\n    /**\n     * Converts all of the characters in this {@code String} to lower\n     * case using the rules of the given {@code Locale}.  Case mapping is based\n     * on the Unicode Standard version specified by the {@link java.lang.Character Character}\n     * class. Since case mappings are not always 1:1 char mappings, the resulting {@code String}\n     * and this {@code String} may differ in length.\n     * \u003cp\u003e\n     * Examples of lowercase mappings are in the following table:\n     * \u003ctable class\u003d\"plain\"\u003e\n     * \u003ccaption style\u003d\"display:none\"\u003eLowercase mapping examples showing language code of locale, upper case, lower case, and description\u003c/caption\u003e\n     * \u003cthead\u003e\n     * \u003ctr\u003e\n     *   \u003cth scope\u003d\"col\"\u003eLanguage Code of Locale\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eUpper Case\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eLower Case\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eDescription\u003c/th\u003e\n     * \u003c/tr\u003e\n     * \u003c/thead\u003e\n     * \u003ctbody\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003etr (Turkish)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u0026#92;u0130\u003c/th\u003e\n     *   \u003ctd\u003e\u0026#92;u0069\u003c/td\u003e\n     *   \u003ctd\u003ecapital letter I with dot above -\u0026gt; small letter i\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003etr (Turkish)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u0026#92;u0049\u003c/th\u003e\n     *   \u003ctd\u003e\u0026#92;u0131\u003c/td\u003e\n     *   \u003ctd\u003ecapital letter I -\u0026gt; small letter dotless i \u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003e(all)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003eFrench Fries\u003c/th\u003e\n     *   \u003ctd\u003efrench fries\u003c/td\u003e\n     *   \u003ctd\u003elowercased all chars in String\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003e(all)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\n     *       \u0026Iota;\u0026Chi;\u0026Theta;\u0026Upsilon;\u0026Sigma;\u003c/th\u003e\n     *   \u003ctd\u003e\u0026iota;\u0026chi;\u0026theta;\u0026upsilon;\u0026sigma;\u003c/td\u003e\n     *   \u003ctd\u003elowercased all chars in String\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003c/tbody\u003e\n     * \u003c/table\u003e\n     *\n     * @param locale use the case transformation rules for this locale\n     * @return the {@code String}, converted to lowercase.\n     * @see     java.lang.String#toLowerCase()\n     * @see     java.lang.String#toUpperCase()\n     * @see     java.lang.String#toUpperCase(Locale)\n     * @since   1.1\n     */\n    public String toLowerCase(Locale locale) {\n        return isLatin1() ? StringLatin1.toLowerCase(this, value, locale)\n                          : StringUTF16.toLowerCase(this, value, locale);\n    }\n\n    /**\n     * Converts all of the characters in this {@code String} to lower\n     * case using the rules of the default locale. This method is equivalent to\n     * {@code toLowerCase(Locale.getDefault())}.\n     * \u003cp\u003e\n     * \u003cb\u003eNote:\u003c/b\u003e This method is locale sensitive, and may produce unexpected\n     * results if used for strings that are intended to be interpreted locale\n     * independently.\n     * Examples are programming language identifiers, protocol keys, and HTML\n     * tags.\n     * For instance, {@code \"TITLE\".toLowerCase()} in a Turkish locale\n     * returns {@code \"t\\u005Cu0131tle\"}, where \u0027\\u005Cu0131\u0027 is the\n     * LATIN SMALL LETTER DOTLESS I character.\n     * To obtain correct results for locale insensitive strings, use\n     * {@code toLowerCase(Locale.ROOT)}.\n     *\n     * @return  the {@code String}, converted to lowercase.\n     * @see     java.lang.String#toLowerCase(Locale)\n     */\n    public String toLowerCase() {\n        return toLowerCase(Locale.getDefault());\n    }\n\n    /**\n     * Converts all of the characters in this {@code String} to upper\n     * case using the rules of the given {@code Locale}. Case mapping is based\n     * on the Unicode Standard version specified by the {@link java.lang.Character Character}\n     * class. Since case mappings are not always 1:1 char mappings, the resulting {@code String}\n     * and this {@code String} may differ in length.\n     * \u003cp\u003e\n     * Examples of locale-sensitive and 1:M case mappings are in the following table:\n     * \u003ctable class\u003d\"plain\"\u003e\n     * \u003ccaption style\u003d\"display:none\"\u003eExamples of locale-sensitive and 1:M case mappings. Shows Language code of locale, lower case, upper case, and description.\u003c/caption\u003e\n     * \u003cthead\u003e\n     * \u003ctr\u003e\n     *   \u003cth scope\u003d\"col\"\u003eLanguage Code of Locale\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eLower Case\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eUpper Case\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eDescription\u003c/th\u003e\n     * \u003c/tr\u003e\n     * \u003c/thead\u003e\n     * \u003ctbody\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003etr (Turkish)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u0026#92;u0069\u003c/th\u003e\n     *   \u003ctd\u003e\u0026#92;u0130\u003c/td\u003e\n     *   \u003ctd\u003esmall letter i -\u0026gt; capital letter I with dot above\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003etr (Turkish)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u0026#92;u0131\u003c/th\u003e\n     *   \u003ctd\u003e\u0026#92;u0049\u003c/td\u003e\n     *   \u003ctd\u003esmall letter dotless i -\u0026gt; capital letter I\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003e(all)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u0026#92;u00df\u003c/th\u003e\n     *   \u003ctd\u003e\u0026#92;u0053 \u0026#92;u0053\u003c/td\u003e\n     *   \u003ctd\u003esmall letter sharp s -\u0026gt; two letters: SS\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003e(all)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003eFahrvergn\u0026uuml;gen\u003c/th\u003e\n     *   \u003ctd\u003eFAHRVERGN\u0026Uuml;GEN\u003c/td\u003e\n     *   \u003ctd\u003e\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003c/tbody\u003e\n     * \u003c/table\u003e\n     * @param locale use the case transformation rules for this locale\n     * @return the {@code String}, converted to uppercase.\n     * @see     java.lang.String#toUpperCase()\n     * @see     java.lang.String#toLowerCase()\n     * @see     java.lang.String#toLowerCase(Locale)\n     * @since   1.1\n     */\n    public String toUpperCase(Locale locale) {\n        return isLatin1() ? StringLatin1.toUpperCase(this, value, locale)\n                          : StringUTF16.toUpperCase(this, value, locale);\n    }\n\n    /**\n     * Converts all of the characters in this {@code String} to upper\n     * case using the rules of the default locale. This method is equivalent to\n     * {@code toUpperCase(Locale.getDefault())}.\n     * \u003cp\u003e\n     * \u003cb\u003eNote:\u003c/b\u003e This method is locale sensitive, and may produce unexpected\n     * results if used for strings that are intended to be interpreted locale\n     * independently.\n     * Examples are programming language identifiers, protocol keys, and HTML\n     * tags.\n     * For instance, {@code \"title\".toUpperCase()} in a Turkish locale\n     * returns {@code \"T\\u005Cu0130TLE\"}, where \u0027\\u005Cu0130\u0027 is the\n     * LATIN CAPITAL LETTER I WITH DOT ABOVE character.\n     * To obtain correct results for locale insensitive strings, use\n     * {@code toUpperCase(Locale.ROOT)}.\n     *\n     * @return  the {@code String}, converted to uppercase.\n     * @see     java.lang.String#toUpperCase(Locale)\n     */\n    public String toUpperCase() {\n        return toUpperCase(Locale.getDefault());\n    }\n\n    /**\n     * Returns a string whose value is this string, with all leading\n     * and trailing space removed, where space is defined\n     * as any character whose codepoint is less than or equal to\n     * {@code \u0027U+0020\u0027} (the space character).\n     * \u003cp\u003e\n     * If this {@code String} object represents an empty character\n     * sequence, or the first and last characters of character sequence\n     * represented by this {@code String} object both have codes\n     * that are not space (as defined above), then a\n     * reference to this {@code String} object is returned.\n     * \u003cp\u003e\n     * Otherwise, if all characters in this string are space (as\n     * defined above), then a  {@code String} object representing an\n     * empty string is returned.\n     * \u003cp\u003e\n     * Otherwise, let \u003ci\u003ek\u003c/i\u003e be the index of the first character in the\n     * string whose code is not a space (as defined above) and let\n     * \u003ci\u003em\u003c/i\u003e be the index of the last character in the string whose code\n     * is not a space (as defined above). A {@code String}\n     * object is returned, representing the substring of this string that\n     * begins with the character at index \u003ci\u003ek\u003c/i\u003e and ends with the\n     * character at index \u003ci\u003em\u003c/i\u003e-that is, the result of\n     * {@code this.substring(k, m + 1)}.\n     * \u003cp\u003e\n     * This method may be used to trim space (as defined above) from\n     * the beginning and end of a string.\n     *\n     * @return  a string whose value is this string, with all leading\n     *          and trailing space removed, or this string if it\n     *          has no leading or trailing space.\n     */\n    public String trim() {\n        String ret \u003d isLatin1() ? StringLatin1.trim(value)\n                                : StringUTF16.trim(value);\n        return ret \u003d\u003d null ? this : ret;\n    }\n\n    /**\n     * Returns a string whose value is this string, with all leading\n     * and trailing {@linkplain Character#isWhitespace(int) white space}\n     * removed.\n     * \u003cp\u003e\n     * If this {@code String} object represents an empty string,\n     * or if all code points in this string are\n     * {@linkplain Character#isWhitespace(int) white space}, then an empty string\n     * is returned.\n     * \u003cp\u003e\n     * Otherwise, returns a substring of this string beginning with the first\n     * code point that is not a {@linkplain Character#isWhitespace(int) white space}\n     * up to and including the last code point that is not a\n     * {@linkplain Character#isWhitespace(int) white space}.\n     * \u003cp\u003e\n     * This method may be used to strip\n     * {@linkplain Character#isWhitespace(int) white space} from\n     * the beginning and end of a string.\n     *\n     * @return  a string whose value is this string, with all leading\n     *          and trailing white space removed\n     *\n     * @see Character#isWhitespace(int)\n     *\n     * @since 11\n     */\n    public String strip() {\n        String ret \u003d isLatin1() ? StringLatin1.strip(value)\n                                : StringUTF16.strip(value);\n        return ret \u003d\u003d null ? this : ret;\n    }\n\n    /**\n     * Returns a string whose value is this string, with all leading\n     * {@linkplain Character#isWhitespace(int) white space} removed.\n     * \u003cp\u003e\n     * If this {@code String} object represents an empty string,\n     * or if all code points in this string are\n     * {@linkplain Character#isWhitespace(int) white space}, then an empty string\n     * is returned.\n     * \u003cp\u003e\n     * Otherwise, returns a substring of this string beginning with the first\n     * code point that is not a {@linkplain Character#isWhitespace(int) white space}\n     * up to and including the last code point of this string.\n     * \u003cp\u003e\n     * This method may be used to trim\n     * {@linkplain Character#isWhitespace(int) white space} from\n     * the beginning of a string.\n     *\n     * @return  a string whose value is this string, with all leading white\n     *          space removed\n     *\n     * @see Character#isWhitespace(int)\n     *\n     * @since 11\n     */\n    public String stripLeading() {\n        String ret \u003d isLatin1() ? StringLatin1.stripLeading(value)\n                                : StringUTF16.stripLeading(value);\n        return ret \u003d\u003d null ? this : ret;\n    }\n\n    /**\n     * Returns a string whose value is this string, with all trailing\n     * {@linkplain Character#isWhitespace(int) white space} removed.\n     * \u003cp\u003e\n     * If this {@code String} object represents an empty string,\n     * or if all characters in this string are\n     * {@linkplain Character#isWhitespace(int) white space}, then an empty string\n     * is returned.\n     * \u003cp\u003e\n     * Otherwise, returns a substring of this string beginning with the first\n     * code point of this string up to and including the last code point\n     * that is not a {@linkplain Character#isWhitespace(int) white space}.\n     * \u003cp\u003e\n     * This method may be used to trim\n     * {@linkplain Character#isWhitespace(int) white space} from\n     * the end of a string.\n     *\n     * @return  a string whose value is this string, with all trailing white\n     *          space removed\n     *\n     * @see Character#isWhitespace(int)\n     *\n     * @since 11\n     */\n    public String stripTrailing() {\n        String ret \u003d isLatin1() ? StringLatin1.stripTrailing(value)\n                                : StringUTF16.stripTrailing(value);\n        return ret \u003d\u003d null ? this : ret;\n    }\n\n    /**\n     * Returns {@code true} if the string is empty or contains only\n     * {@linkplain Character#isWhitespace(int) white space} codepoints,\n     * otherwise {@code false}.\n     *\n     * @return {@code true} if the string is empty or contains only\n     *         {@linkplain Character#isWhitespace(int) white space} codepoints,\n     *         otherwise {@code false}\n     *\n     * @see Character#isWhitespace(int)\n     *\n     * @since 11\n     */\n    public boolean isBlank() {\n        return indexOfNonWhitespace() \u003d\u003d length();\n    }\n\n    /**\n     * Returns a stream of lines extracted from this string,\n     * separated by line terminators.\n     * \u003cp\u003e\n     * A \u003ci\u003eline terminator\u003c/i\u003e is one of the following:\n     * a line feed character {@code \"\\n\"} (U+000A),\n     * a carriage return character {@code \"\\r\"} (U+000D),\n     * or a carriage return followed immediately by a line feed\n     * {@code \"\\r\\n\"} (U+000D U+000A).\n     * \u003cp\u003e\n     * A \u003ci\u003eline\u003c/i\u003e is either a sequence of zero or more characters\n     * followed by a line terminator, or it is a sequence of one or\n     * more characters followed by the end of the string. A\n     * line does not include the line terminator.\n     * \u003cp\u003e\n     * The stream returned by this method contains the lines from\n     * this string in the order in which they occur.\n     *\n     * @apiNote This definition of \u003ci\u003eline\u003c/i\u003e implies that an empty\n     *          string has zero lines and that there is no empty line\n     *          following a line terminator at the end of a string.\n     *\n     * @implNote This method provides better performance than\n     *           split(\"\\R\") by supplying elements lazily and\n     *           by faster search of new line terminators.\n     *\n     * @return  the stream of lines extracted from this string\n     *\n     * @since 11\n     */\n    public Stream\u003cString\u003e lines() {\n        return isLatin1() ? StringLatin1.lines(value) : StringUTF16.lines(value);\n    }\n\n    /**\n     * Adjusts the indentation of each line of this string based on the value of\n     * {@code n}, and normalizes line termination characters.\n     * \u003cp\u003e\n     * This string is conceptually separated into lines using\n     * {@link String#lines()}. Each line is then adjusted as described below\n     * and then suffixed with a line feed {@code \"\\n\"} (U+000A). The resulting\n     * lines are then concatenated and returned.\n     * \u003cp\u003e\n     * If {@code n \u003e 0} then {@code n} spaces (U+0020) are inserted at the\n     * beginning of each line.\n     * \u003cp\u003e\n     * If {@code n \u003c 0} then up to {@code n}\n     * {@linkplain Character#isWhitespace(int) white space characters} are removed\n     * from the beginning of each line. If a given line does not contain\n     * sufficient white space then all leading\n     * {@linkplain Character#isWhitespace(int) white space characters} are removed.\n     * Each white space character is treated as a single character. In\n     * particular, the tab character {@code \"\\t\"} (U+0009) is considered a\n     * single character; it is not expanded.\n     * \u003cp\u003e\n     * If {@code n \u003d\u003d 0} then the line remains unchanged. However, line\n     * terminators are still normalized.\n     *\n     * @param n  number of leading\n     *           {@linkplain Character#isWhitespace(int) white space characters}\n     *           to add or remove\n     *\n     * @return string with indentation adjusted and line endings normalized\n     *\n     * @see String#lines()\n     * @see String#isBlank()\n     * @see Character#isWhitespace(int)\n     *\n     * @since 12\n     */\n    public String indent(int n) {\n        if (isEmpty()) {\n            return \"\";\n        }\n        Stream\u003cString\u003e stream \u003d lines();\n        if (n \u003e 0) {\n            final String spaces \u003d \" \".repeat(n);\n            stream \u003d stream.map(s -\u003e spaces + s);\n        } else if (n \u003d\u003d Integer.MIN_VALUE) {\n            stream \u003d stream.map(s -\u003e s.stripLeading());\n        } else if (n \u003c 0) {\n            stream \u003d stream.map(s -\u003e s.substring(Math.min(-n, s.indexOfNonWhitespace())));\n        }\n        return stream.collect(Collectors.joining(\"\\n\", \"\", \"\\n\"));\n    }\n\n    private int indexOfNonWhitespace() {\n        return isLatin1() ? StringLatin1.indexOfNonWhitespace(value)\n                          : StringUTF16.indexOfNonWhitespace(value);\n    }\n\n    private int lastIndexOfNonWhitespace() {\n        return isLatin1() ? StringLatin1.lastIndexOfNonWhitespace(value)\n                          : StringUTF16.lastIndexOfNonWhitespace(value);\n    }\n\n    /**\n     * Returns a string whose value is this string, with incidental\n     * {@linkplain Character#isWhitespace(int) white space} removed from\n     * the beginning and end of every line.\n     * \u003cp\u003e\n     * Incidental {@linkplain Character#isWhitespace(int) white space}\n     * is often present in a text block to align the content with the opening\n     * delimiter. For example, in the following code, dots represent incidental\n     * {@linkplain Character#isWhitespace(int) white space}:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * String html \u003d \"\"\"\n     * ..............\u0026lt;html\u0026gt;\n     * ..............    \u0026lt;body\u0026gt;\n     * ..............        \u0026lt;p\u0026gt;Hello, world\u0026lt;/p\u0026gt;\n     * ..............    \u0026lt;/body\u0026gt;\n     * ..............\u0026lt;/html\u0026gt;\n     * ..............\"\"\";\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * This method treats the incidental\n     * {@linkplain Character#isWhitespace(int) white space} as indentation to be\n     * stripped, producing a string that preserves the relative indentation of\n     * the content. Using | to visualize the start of each line of the string:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * |\u0026lt;html\u0026gt;\n     * |    \u0026lt;body\u0026gt;\n     * |        \u0026lt;p\u0026gt;Hello, world\u0026lt;/p\u0026gt;\n     * |    \u0026lt;/body\u0026gt;\n     * |\u0026lt;/html\u0026gt;\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * First, the individual lines of this string are extracted. A \u003ci\u003eline\u003c/i\u003e\n     * is a sequence of zero or more characters followed by either a line\n     * terminator or the end of the string.\n     * If the string has at least one line terminator, the last line consists\n     * of the characters between the last terminator and the end of the string.\n     * Otherwise, if the string has no terminators, the last line is the start\n     * of the string to the end of the string, in other words, the entire\n     * string.\n     * A line does not include the line terminator.\n     * \u003cp\u003e\n     * Then, the \u003ci\u003eminimum indentation\u003c/i\u003e (min) is determined as follows:\n     * \u003cul\u003e\n     *   \u003cli\u003e\u003cp\u003eFor each non-blank line (as defined by {@link String#isBlank()}),\n     *   the leading {@linkplain Character#isWhitespace(int) white space}\n     *   characters are counted.\u003c/p\u003e\n     *   \u003c/li\u003e\n     *   \u003cli\u003e\u003cp\u003eThe leading {@linkplain Character#isWhitespace(int) white space}\n     *   characters on the last line are also counted even if\n     *   {@linkplain String#isBlank() blank}.\u003c/p\u003e\n     *   \u003c/li\u003e\n     * \u003c/ul\u003e\n     * \u003cp\u003eThe \u003ci\u003emin\u003c/i\u003e value is the smallest of these counts.\n     * \u003cp\u003e\n     * For each {@linkplain String#isBlank() non-blank} line, \u003ci\u003emin\u003c/i\u003e leading\n     * {@linkplain Character#isWhitespace(int) white space} characters are\n     * removed, and any trailing {@linkplain Character#isWhitespace(int) white\n     * space} characters are removed. {@linkplain String#isBlank() Blank} lines\n     * are replaced with the empty string.\n     *\n     * \u003cp\u003e\n     * Finally, the lines are joined into a new string, using the LF character\n     * {@code \"\\n\"} (U+000A) to separate lines.\n     *\n     * @apiNote\n     * This method\u0027s primary purpose is to shift a block of lines as far as\n     * possible to the left, while preserving relative indentation. Lines\n     * that were indented the least will thus have no leading\n     * {@linkplain Character#isWhitespace(int) white space}.\n     * The result will have the same number of line terminators as this string.\n     * If this string ends with a line terminator then the result will end\n     * with a line terminator.\n     *\n     * @implSpec\n     * This method treats all {@linkplain Character#isWhitespace(int) white space}\n     * characters as having equal width. As long as the indentation on every\n     * line is consistently composed of the same character sequences, then the\n     * result will be as described above.\n     *\n     * @return string with incidental indentation removed and line\n     *         terminators normalized\n     *\n     * @see String#lines()\n     * @see String#isBlank()\n     * @see String#indent(int)\n     * @see Character#isWhitespace(int)\n     *\n     * @since 15\n     *\n     */\n    public String stripIndent() {\n        int length \u003d length();\n        if (length \u003d\u003d 0) {\n            return \"\";\n        }\n        char lastChar \u003d charAt(length - 1);\n        boolean optOut \u003d lastChar \u003d\u003d \u0027\\n\u0027 || lastChar \u003d\u003d \u0027\\r\u0027;\n        List\u003cString\u003e lines \u003d lines().toList();\n        final int outdent \u003d optOut ? 0 : outdent(lines);\n        return lines.stream()\n            .map(line -\u003e {\n                int firstNonWhitespace \u003d line.indexOfNonWhitespace();\n                int lastNonWhitespace \u003d line.lastIndexOfNonWhitespace();\n                int incidentalWhitespace \u003d Math.min(outdent, firstNonWhitespace);\n                return firstNonWhitespace \u003e lastNonWhitespace\n                    ? \"\" : line.substring(incidentalWhitespace, lastNonWhitespace);\n            })\n            .collect(Collectors.joining(\"\\n\", \"\", optOut ? \"\\n\" : \"\"));\n    }\n\n    private static int outdent(List\u003cString\u003e lines) {\n        // Note: outdent is guaranteed to be zero or positive number.\n        // If there isn\u0027t a non-blank line then the last must be blank\n        int outdent \u003d Integer.MAX_VALUE;\n        for (String line : lines) {\n            int leadingWhitespace \u003d line.indexOfNonWhitespace();\n            if (leadingWhitespace !\u003d line.length()) {\n                outdent \u003d Integer.min(outdent, leadingWhitespace);\n            }\n        }\n        String lastLine \u003d lines.get(lines.size() - 1);\n        if (lastLine.isBlank()) {\n            outdent \u003d Integer.min(outdent, lastLine.length());\n        }\n        return outdent;\n    }\n\n    /**\n     * Returns a string whose value is this string, with escape sequences\n     * translated as if in a string literal.\n     * \u003cp\u003e\n     * Escape sequences are translated as follows;\n     * \u003ctable class\u003d\"striped\"\u003e\n     *   \u003ccaption style\u003d\"display:none\"\u003eTranslation\u003c/caption\u003e\n     *   \u003cthead\u003e\n     *   \u003ctr\u003e\n     *     \u003cth scope\u003d\"col\"\u003eEscape\u003c/th\u003e\n     *     \u003cth scope\u003d\"col\"\u003eName\u003c/th\u003e\n     *     \u003cth scope\u003d\"col\"\u003eTranslation\u003c/th\u003e\n     *   \u003c/tr\u003e\n     *   \u003c/thead\u003e\n     *   \u003ctbody\u003e\n     *   \u003ctr\u003e\n     *     \u003cth scope\u003d\"row\"\u003e{@code \\u005Cb}\u003c/th\u003e\n     *     \u003ctd\u003ebackspace\u003c/td\u003e\n     *     \u003ctd\u003e{@code U+0008}\u003c/td\u003e\n     *   \u003c/tr\u003e\n     *   \u003ctr\u003e\n     *     \u003cth scope\u003d\"row\"\u003e{@code \\u005Ct}\u003c/th\u003e\n     *     \u003ctd\u003ehorizontal tab\u003c/td\u003e\n     *     \u003ctd\u003e{@code U+0009}\u003c/td\u003e\n     *   \u003c/tr\u003e\n     *   \u003ctr\u003e\n     *     \u003cth scope\u003d\"row\"\u003e{@code \\u005Cn}\u003c/th\u003e\n     *     \u003ctd\u003eline feed\u003c/td\u003e\n     *     \u003ctd\u003e{@code U+000A}\u003c/td\u003e\n     *   \u003c/tr\u003e\n     *   \u003ctr\u003e\n     *     \u003cth scope\u003d\"row\"\u003e{@code \\u005Cf}\u003c/th\u003e\n     *     \u003ctd\u003eform feed\u003c/td\u003e\n     *     \u003ctd\u003e{@code U+000C}\u003c/td\u003e\n     *   \u003c/tr\u003e\n     *   \u003ctr\u003e\n     *     \u003cth scope\u003d\"row\"\u003e{@code \\u005Cr}\u003c/th\u003e\n     *     \u003ctd\u003ecarriage return\u003c/td\u003e\n     *     \u003ctd\u003e{@code U+000D}\u003c/td\u003e\n     *   \u003c/tr\u003e\n     *   \u003ctr\u003e\n     *     \u003cth scope\u003d\"row\"\u003e{@code \\u005Cs}\u003c/th\u003e\n     *     \u003ctd\u003espace\u003c/td\u003e\n     *     \u003ctd\u003e{@code U+0020}\u003c/td\u003e\n     *   \u003c/tr\u003e\n     *   \u003ctr\u003e\n     *     \u003cth scope\u003d\"row\"\u003e{@code \\u005C\"}\u003c/th\u003e\n     *     \u003ctd\u003edouble quote\u003c/td\u003e\n     *     \u003ctd\u003e{@code U+0022}\u003c/td\u003e\n     *   \u003c/tr\u003e\n     *   \u003ctr\u003e\n     *     \u003cth scope\u003d\"row\"\u003e{@code \\u005C\u0027}\u003c/th\u003e\n     *     \u003ctd\u003esingle quote\u003c/td\u003e\n     *     \u003ctd\u003e{@code U+0027}\u003c/td\u003e\n     *   \u003c/tr\u003e\n     *   \u003ctr\u003e\n     *     \u003cth scope\u003d\"row\"\u003e{@code \\u005C\\u005C}\u003c/th\u003e\n     *     \u003ctd\u003ebackslash\u003c/td\u003e\n     *     \u003ctd\u003e{@code U+005C}\u003c/td\u003e\n     *   \u003c/tr\u003e\n     *   \u003ctr\u003e\n     *     \u003cth scope\u003d\"row\"\u003e{@code \\u005C0 - \\u005C377}\u003c/th\u003e\n     *     \u003ctd\u003eoctal escape\u003c/td\u003e\n     *     \u003ctd\u003ecode point equivalents\u003c/td\u003e\n     *   \u003c/tr\u003e\n     *   \u003ctr\u003e\n     *     \u003cth scope\u003d\"row\"\u003e{@code \\u005C\u003cline-terminator\u003e}\u003c/th\u003e\n     *     \u003ctd\u003econtinuation\u003c/td\u003e\n     *     \u003ctd\u003ediscard\u003c/td\u003e\n     *   \u003c/tr\u003e\n     *   \u003c/tbody\u003e\n     * \u003c/table\u003e\n     *\n     * @implNote\n     * This method does \u003cem\u003enot\u003c/em\u003e translate Unicode escapes such as \"{@code \\u005cu2022}\".\n     * Unicode escapes are translated by the Java compiler when reading input characters and\n     * are not part of the string literal specification.\n     *\n     * @throws IllegalArgumentException when an escape sequence is malformed.\n     *\n     * @return String with escape sequences translated.\n     *\n     * @jls 3.10.7 Escape Sequences\n     *\n     * @since 15\n     */\n    public String translateEscapes() {\n        if (isEmpty()) {\n            return \"\";\n        }\n        char[] chars \u003d toCharArray();\n        int length \u003d chars.length;\n        int from \u003d 0;\n        int to \u003d 0;\n        while (from \u003c length) {\n            char ch \u003d chars[from++];\n            if (ch \u003d\u003d \u0027\\\\\u0027) {\n                ch \u003d from \u003c length ? chars[from++] : \u0027\\0\u0027;\n                switch (ch) {\n                case \u0027b\u0027:\n                    ch \u003d \u0027\\b\u0027;\n                    break;\n                case \u0027f\u0027:\n                    ch \u003d \u0027\\f\u0027;\n                    break;\n                case \u0027n\u0027:\n                    ch \u003d \u0027\\n\u0027;\n                    break;\n                case \u0027r\u0027:\n                    ch \u003d \u0027\\r\u0027;\n                    break;\n                case \u0027s\u0027:\n                    ch \u003d \u0027 \u0027;\n                    break;\n                case \u0027t\u0027:\n                    ch \u003d \u0027\\t\u0027;\n                    break;\n                case \u0027\\\u0027\u0027:\n                case \u0027\\\"\u0027:\n                case \u0027\\\\\u0027:\n                    // as is\n                    break;\n                case \u00270\u0027: case \u00271\u0027: case \u00272\u0027: case \u00273\u0027:\n                case \u00274\u0027: case \u00275\u0027: case \u00276\u0027: case \u00277\u0027:\n                    int limit \u003d Integer.min(from + (ch \u003c\u003d \u00273\u0027 ? 2 : 1), length);\n                    int code \u003d ch - \u00270\u0027;\n                    while (from \u003c limit) {\n                        ch \u003d chars[from];\n                        if (ch \u003c \u00270\u0027 || \u00277\u0027 \u003c ch) {\n                            break;\n                        }\n                        from++;\n                        code \u003d (code \u003c\u003c 3) | (ch - \u00270\u0027);\n                    }\n                    ch \u003d (char)code;\n                    break;\n                case \u0027\\n\u0027:\n                    continue;\n                case \u0027\\r\u0027:\n                    if (from \u003c length \u0026\u0026 chars[from] \u003d\u003d \u0027\\n\u0027) {\n                        from++;\n                    }\n                    continue;\n                default: {\n                    String msg \u003d String.format(\n                        \"Invalid escape sequence: \\\\%c \\\\\\\\u%04X\",\n                        ch, (int)ch);\n                    throw new IllegalArgumentException(msg);\n                }\n                }\n            }\n\n            chars[to++] \u003d ch;\n        }\n\n        return new String(chars, 0, to);\n    }\n\n    /**\n     * This method allows the application of a function to {@code this}\n     * string. The function should expect a single String argument\n     * and produce an {@code R} result.\n     * \u003cp\u003e\n     * Any exception thrown by {@code f.apply()} will be propagated to the\n     * caller.\n     *\n     * @param f    a function to apply\n     *\n     * @param \u003cR\u003e  the type of the result\n     *\n     * @return     the result of applying the function to this string\n     *\n     * @see java.util.function.Function\n     *\n     * @since 12\n     */\n    public \u003cR\u003e R transform(Function\u003c? super String, ? extends R\u003e f) {\n        return f.apply(this);\n    }\n\n    /**\n     * This object (which is already a string!) is itself returned.\n     *\n     * @return  the string itself.\n     */\n    public String toString() {\n        return this;\n    }\n\n    /**\n     * Returns a stream of {@code int} zero-extending the {@code char} values\n     * from this sequence.  Any char which maps to a \u003ca\n     * href\u003d\"{@docRoot}/java.base/java/lang/Character.html#unicode\"\u003esurrogate code\n     * point\u003c/a\u003e is passed through uninterpreted.\n     *\n     * @return an IntStream of char values from this sequence\n     * @since 9\n     */\n    @Override\n    public IntStream chars() {\n        return StreamSupport.intStream(\n            isLatin1() ? new StringLatin1.CharsSpliterator(value, Spliterator.IMMUTABLE)\n                       : new StringUTF16.CharsSpliterator(value, Spliterator.IMMUTABLE),\n            false);\n    }\n\n\n    /**\n     * Returns a stream of code point values from this sequence.  Any surrogate\n     * pairs encountered in the sequence are combined as if by {@linkplain\n     * Character#toCodePoint Character.toCodePoint} and the result is passed\n     * to the stream. Any other code units, including ordinary BMP characters,\n     * unpaired surrogates, and undefined code units, are zero-extended to\n     * {@code int} values which are then passed to the stream.\n     *\n     * @return an IntStream of Unicode code points from this sequence\n     * @since 9\n     */\n    @Override\n    public IntStream codePoints() {\n        return StreamSupport.intStream(\n            isLatin1() ? new StringLatin1.CharsSpliterator(value, Spliterator.IMMUTABLE)\n                       : new StringUTF16.CodePointsSpliterator(value, Spliterator.IMMUTABLE),\n            false);\n    }\n\n    /**\n     * Converts this string to a new character array.\n     *\n     * @return  a newly allocated character array whose length is the length\n     *          of this string and whose contents are initialized to contain\n     *          the character sequence represented by this string.\n     */\n    public char[] toCharArray() {\n        return isLatin1() ? StringLatin1.toChars(value)\n                          : StringUTF16.toChars(value);\n    }\n\n    /**\n     * Returns a formatted string using the specified format string and\n     * arguments.\n     *\n     * \u003cp\u003e The locale always used is the one returned by {@link\n     * java.util.Locale#getDefault(java.util.Locale.Category)\n     * Locale.getDefault(Locale.Category)} with\n     * {@link java.util.Locale.Category#FORMAT FORMAT} category specified.\n     *\n     * @param  format\n     *         A \u003ca href\u003d\"../util/Formatter.html#syntax\"\u003eformat string\u003c/a\u003e\n     *\n     * @param  args\n     *         Arguments referenced by the format specifiers in the format\n     *         string.  If there are more arguments than format specifiers, the\n     *         extra arguments are ignored.  The number of arguments is\n     *         variable and may be zero.  The maximum number of arguments is\n     *         limited by the maximum dimension of a Java array as defined by\n     *         \u003ccite\u003eThe Java Virtual Machine Specification\u003c/cite\u003e.\n     *         The behaviour on a\n     *         {@code null} argument depends on the \u003ca\n     *         href\u003d\"../util/Formatter.html#syntax\"\u003econversion\u003c/a\u003e.\n     *\n     * @throws  java.util.IllegalFormatException\n     *          If a format string contains an illegal syntax, a format\n     *          specifier that is incompatible with the given arguments,\n     *          insufficient arguments given the format string, or other\n     *          illegal conditions.  For specification of all possible\n     *          formatting errors, see the \u003ca\n     *          href\u003d\"../util/Formatter.html#detail\"\u003eDetails\u003c/a\u003e section of the\n     *          formatter class specification.\n     *\n     * @return  A formatted string\n     *\n     * @see  java.util.Formatter\n     * @since  1.5\n     */\n    public static String format(String format, Object... args) {\n        return new Formatter().format(format, args).toString();\n    }\n\n    /**\n     * Returns a formatted string using the specified locale, format string,\n     * and arguments.\n     *\n     * @param  l\n     *         The {@linkplain java.util.Locale locale} to apply during\n     *         formatting.  If {@code l} is {@code null} then no localization\n     *         is applied.\n     *\n     * @param  format\n     *         A \u003ca href\u003d\"../util/Formatter.html#syntax\"\u003eformat string\u003c/a\u003e\n     *\n     * @param  args\n     *         Arguments referenced by the format specifiers in the format\n     *         string.  If there are more arguments than format specifiers, the\n     *         extra arguments are ignored.  The number of arguments is\n     *         variable and may be zero.  The maximum number of arguments is\n     *         limited by the maximum dimension of a Java array as defined by\n     *         \u003ccite\u003eThe Java Virtual Machine Specification\u003c/cite\u003e.\n     *         The behaviour on a\n     *         {@code null} argument depends on the\n     *         \u003ca href\u003d\"../util/Formatter.html#syntax\"\u003econversion\u003c/a\u003e.\n     *\n     * @throws  java.util.IllegalFormatException\n     *          If a format string contains an illegal syntax, a format\n     *          specifier that is incompatible with the given arguments,\n     *          insufficient arguments given the format string, or other\n     *          illegal conditions.  For specification of all possible\n     *          formatting errors, see the \u003ca\n     *          href\u003d\"../util/Formatter.html#detail\"\u003eDetails\u003c/a\u003e section of the\n     *          formatter class specification\n     *\n     * @return  A formatted string\n     *\n     * @see  java.util.Formatter\n     * @since  1.5\n     */\n    public static String format(Locale l, String format, Object... args) {\n        return new Formatter(l).format(format, args).toString();\n    }\n\n    /**\n     * Formats using this string as the format string, and the supplied\n     * arguments.\n     *\n     * @implSpec This method is equivalent to {@code String.format(this, args)}.\n     *\n     * @param  args\n     *         Arguments referenced by the format specifiers in this string.\n     *\n     * @return  A formatted string\n     *\n     * @see  java.lang.String#format(String,Object...)\n     * @see  java.util.Formatter\n     *\n     * @since 15\n     *\n     */\n    public String formatted(Object... args) {\n        return new Formatter().format(this, args).toString();\n    }\n\n    /**\n     * Returns the string representation of the {@code Object} argument.\n     *\n     * @param   obj   an {@code Object}.\n     * @return  if the argument is {@code null}, then a string equal to\n     *          {@code \"null\"}; otherwise, the value of\n     *          {@code obj.toString()} is returned.\n     * @see     java.lang.Object#toString()\n     */\n    public static String valueOf(Object obj) {\n        return (obj \u003d\u003d null) ? \"null\" : obj.toString();\n    }\n\n    /**\n     * Returns the string representation of the {@code char} array\n     * argument. The contents of the character array are copied; subsequent\n     * modification of the character array does not affect the returned\n     * string.\n     *\n     * @param   data     the character array.\n     * @return  a {@code String} that contains the characters of the\n     *          character array.\n     */\n    public static String valueOf(char[] data) {\n        return new String(data);\n    }\n\n    /**\n     * Returns the string representation of a specific subarray of the\n     * {@code char} array argument.\n     * \u003cp\u003e\n     * The {@code offset} argument is the index of the first\n     * character of the subarray. The {@code count} argument\n     * specifies the length of the subarray. The contents of the subarray\n     * are copied; subsequent modification of the character array does not\n     * affect the returned string.\n     *\n     * @param   data     the character array.\n     * @param   offset   initial offset of the subarray.\n     * @param   count    length of the subarray.\n     * @return  a {@code String} that contains the characters of the\n     *          specified subarray of the character array.\n     * @throws    IndexOutOfBoundsException if {@code offset} is\n     *          negative, or {@code count} is negative, or\n     *          {@code offset+count} is larger than\n     *          {@code data.length}.\n     */\n    public static String valueOf(char[] data, int offset, int count) {\n        return new String(data, offset, count);\n    }\n\n    /**\n     * Equivalent to {@link #valueOf(char[], int, int)}.\n     *\n     * @param   data     the character array.\n     * @param   offset   initial offset of the subarray.\n     * @param   count    length of the subarray.\n     * @return  a {@code String} that contains the characters of the\n     *          specified subarray of the character array.\n     * @throws    IndexOutOfBoundsException if {@code offset} is\n     *          negative, or {@code count} is negative, or\n     *          {@code offset+count} is larger than\n     *          {@code data.length}.\n     */\n    public static String copyValueOf(char[] data, int offset, int count) {\n        return new String(data, offset, count);\n    }\n\n    /**\n     * Equivalent to {@link #valueOf(char[])}.\n     *\n     * @param   data   the character array.\n     * @return  a {@code String} that contains the characters of the\n     *          character array.\n     */\n    public static String copyValueOf(char[] data) {\n        return new String(data);\n    }\n\n    /**\n     * Returns the string representation of the {@code boolean} argument.\n     *\n     * @param   b   a {@code boolean}.\n     * @return  if the argument is {@code true}, a string equal to\n     *          {@code \"true\"} is returned; otherwise, a string equal to\n     *          {@code \"false\"} is returned.\n     */\n    public static String valueOf(boolean b) {\n        return b ? \"true\" : \"false\";\n    }\n\n    /**\n     * Returns the string representation of the {@code char}\n     * argument.\n     *\n     * @param   c   a {@code char}.\n     * @return  a string of length {@code 1} containing\n     *          as its single character the argument {@code c}.\n     */\n    public static String valueOf(char c) {\n        if (COMPACT_STRINGS \u0026\u0026 StringLatin1.canEncode(c)) {\n            return new String(StringLatin1.toBytes(c), LATIN1);\n        }\n        return new String(StringUTF16.toBytes(c), UTF16);\n    }\n\n    /**\n     * Returns the string representation of the {@code int} argument.\n     * \u003cp\u003e\n     * The representation is exactly the one returned by the\n     * {@code Integer.toString} method of one argument.\n     *\n     * @param   i   an {@code int}.\n     * @return  a string representation of the {@code int} argument.\n     * @see     java.lang.Integer#toString(int, int)\n     */\n    public static String valueOf(int i) {\n        return Integer.toString(i);\n    }\n\n    /**\n     * Returns the string representation of the {@code long} argument.\n     * \u003cp\u003e\n     * The representation is exactly the one returned by the\n     * {@code Long.toString} method of one argument.\n     *\n     * @param   l   a {@code long}.\n     * @return  a string representation of the {@code long} argument.\n     * @see     java.lang.Long#toString(long)\n     */\n    public static String valueOf(long l) {\n        return Long.toString(l);\n    }\n\n    /**\n     * Returns the string representation of the {@code float} argument.\n     * \u003cp\u003e\n     * The representation is exactly the one returned by the\n     * {@code Float.toString} method of one argument.\n     *\n     * @param   f   a {@code float}.\n     * @return  a string representation of the {@code float} argument.\n     * @see     java.lang.Float#toString(float)\n     */\n    public static String valueOf(float f) {\n        return Float.toString(f);\n    }\n\n    /**\n     * Returns the string representation of the {@code double} argument.\n     * \u003cp\u003e\n     * The representation is exactly the one returned by the\n     * {@code Double.toString} method of one argument.\n     *\n     * @param   d   a {@code double}.\n     * @return  a  string representation of the {@code double} argument.\n     * @see     java.lang.Double#toString(double)\n     */\n    public static String valueOf(double d) {\n        return Double.toString(d);\n    }\n\n    /**\n     * Returns a canonical representation for the string object.\n     * \u003cp\u003e\n     * A pool of strings, initially empty, is maintained privately by the\n     * class {@code String}.\n     * \u003cp\u003e\n     * When the intern method is invoked, if the pool already contains a\n     * string equal to this {@code String} object as determined by\n     * the {@link #equals(Object)} method, then the string from the pool is\n     * returned. Otherwise, this {@code String} object is added to the\n     * pool and a reference to this {@code String} object is returned.\n     * \u003cp\u003e\n     * It follows that for any two strings {@code s} and {@code t},\n     * {@code s.intern() \u003d\u003d t.intern()} is {@code true}\n     * if and only if {@code s.equals(t)} is {@code true}.\n     * \u003cp\u003e\n     * All literal strings and string-valued constant expressions are\n     * interned. String literals are defined in section {@jls 3.10.5} of the\n     * \u003ccite\u003eThe Java Language Specification\u003c/cite\u003e.\n     *\n     * @return  a string that has the same contents as this string, but is\n     *          guaranteed to be from a pool of unique strings.\n     */\n    public native String intern();\n\n    /**\n     * Returns a string whose value is the concatenation of this\n     * string repeated {@code count} times.\n     * \u003cp\u003e\n     * If this string is empty or count is zero then the empty\n     * string is returned.\n     *\n     * @param   count number of times to repeat\n     *\n     * @return  A string composed of this string repeated\n     *          {@code count} times or the empty string if this\n     *          string is empty or count is zero\n     *\n     * @throws  IllegalArgumentException if the {@code count} is\n     *          negative.\n     *\n     * @since 11\n     */\n    public String repeat(int count) {\n        if (count \u003c 0) {\n            throw new IllegalArgumentException(\"count is negative: \" + count);\n        }\n        if (count \u003d\u003d 1) {\n            return this;\n        }\n        final int len \u003d value.length;\n        if (len \u003d\u003d 0 || count \u003d\u003d 0) {\n            return \"\";\n        }\n        if (Integer.MAX_VALUE / count \u003c len) {\n            throw new OutOfMemoryError(\"Required length exceeds implementation limit\");\n        }\n        if (len \u003d\u003d 1) {\n            final byte[] single \u003d new byte[count];\n            Arrays.fill(single, value[0]);\n            return new String(single, coder);\n        }\n        final int limit \u003d len * count;\n        final byte[] multiple \u003d new byte[limit];\n        System.arraycopy(value, 0, multiple, 0, len);\n        int copied \u003d len;\n        for (; copied \u003c limit - copied; copied \u003c\u003c\u003d 1) {\n            System.arraycopy(multiple, 0, multiple, copied, copied);\n        }\n        System.arraycopy(multiple, 0, multiple, copied, limit - copied);\n        return new String(multiple, coder);\n    }\n\n    ////////////////////////////////////////////////////////////////\n\n    /**\n     * Copy character bytes from this string into dst starting at dstBegin.\n     * This method doesn\u0027t perform any range checking.\n     *\n     * Invoker guarantees: dst is in UTF16 (inflate itself for asb), if two\n     * coders are different, and dst is big enough (range check)\n     *\n     * @param dstBegin  the char index, not offset of byte[]\n     * @param coder     the coder of dst[]\n     */\n    void getBytes(byte[] dst, int dstBegin, byte coder) {\n        if (coder() \u003d\u003d coder) {\n            System.arraycopy(value, 0, dst, dstBegin \u003c\u003c coder, value.length);\n        } else {    // this.coder \u003d\u003d LATIN \u0026\u0026 coder \u003d\u003d UTF16\n            StringLatin1.inflate(value, 0, dst, dstBegin, value.length);\n        }\n    }\n\n    /**\n     * Copy character bytes from this string into dst starting at dstBegin.\n     * This method doesn\u0027t perform any range checking.\n     *\n     * Invoker guarantees: dst is in UTF16 (inflate itself for asb), if two\n     * coders are different, and dst is big enough (range check)\n     *\n     * @param srcPos    the char index, not offset of byte[]\n     * @param dstBegin  the char index to start from\n     * @param coder     the coder of dst[]\n     * @param length    the amount of copied chars\n     */\n    void getBytes(byte[] dst, int srcPos, int dstBegin, byte coder, int length) {\n        if (coder() \u003d\u003d coder) {\n            System.arraycopy(value, srcPos \u003c\u003c coder, dst, dstBegin \u003c\u003c coder, length \u003c\u003c coder);\n        } else {    // this.coder \u003d\u003d LATIN \u0026\u0026 coder \u003d\u003d UTF16\n            StringLatin1.inflate(value, srcPos, dst, dstBegin, length);\n        }\n    }\n\n    /*\n     * Package private constructor. Trailing Void argument is there for\n     * disambiguating it against other (public) constructors.\n     *\n     * Stores the char[] value into a byte[] that each byte represents\n     * the8 low-order bits of the corresponding character, if the char[]\n     * contains only latin1 character. Or a byte[] that stores all\n     * characters in their byte sequences defined by the {@code StringUTF16}.\n     */\n    String(char[] value, int off, int len, Void sig) {\n        if (len \u003d\u003d 0) {\n            this.value \u003d \"\".value;\n            this.coder \u003d \"\".coder;\n            return;\n        }\n        if (COMPACT_STRINGS) {\n            byte[] val \u003d StringUTF16.compress(value, off, len);\n            if (val !\u003d null) {\n                this.value \u003d val;\n                this.coder \u003d LATIN1;\n                return;\n            }\n        }\n        this.coder \u003d UTF16;\n        this.value \u003d StringUTF16.toBytes(value, off, len);\n    }\n\n    /*\n     * Package private constructor. Trailing Void argument is there for\n     * disambiguating it against other (public) constructors.\n     */\n    String(AbstractStringBuilder asb, Void sig) {\n        byte[] val \u003d asb.getValue();\n        int length \u003d asb.length();\n        if (asb.isLatin1()) {\n            this.coder \u003d LATIN1;\n            this.value \u003d Arrays.copyOfRange(val, 0, length);\n        } else {\n            // only try to compress val if some characters were deleted.\n            if (COMPACT_STRINGS \u0026\u0026 asb.maybeLatin1) {\n                byte[] buf \u003d StringUTF16.compress(val, 0, length);\n                if (buf !\u003d null) {\n                    this.coder \u003d LATIN1;\n                    this.value \u003d buf;\n                    return;\n                }\n            }\n            this.coder \u003d UTF16;\n            this.value \u003d Arrays.copyOfRange(val, 0, length \u003c\u003c 1);\n        }\n    }\n\n   /*\n    * Package private constructor which shares value array for speed.\n    */\n    String(byte[] value, byte coder) {\n        this.value \u003d value;\n        this.coder \u003d coder;\n    }\n\n    byte coder() {\n        return COMPACT_STRINGS ? coder : UTF16;\n    }\n\n    byte[] value() {\n        return value;\n    }\n\n    boolean isLatin1() {\n        return COMPACT_STRINGS \u0026\u0026 coder \u003d\u003d LATIN1;\n    }\n\n    @Native static final byte LATIN1 \u003d 0;\n    @Native static final byte UTF16  \u003d 1;\n\n    /*\n     * StringIndexOutOfBoundsException  if {@code index} is\n     * negative or greater than or equal to {@code length}.\n     */\n    static void checkIndex(int index, int length) {\n        Preconditions.checkIndex(index, length, Preconditions.SIOOBE_FORMATTER);\n    }\n\n    /*\n     * StringIndexOutOfBoundsException  if {@code offset}\n     * is negative or greater than {@code length}.\n     */\n    static void checkOffset(int offset, int length) {\n        Preconditions.checkFromToIndex(offset, length, length, Preconditions.SIOOBE_FORMATTER);\n    }\n\n    /*\n     * Check {@code offset}, {@code count} against {@code 0} and {@code length}\n     * bounds.\n     *\n     * @return  {@code offset} if the sub-range within bounds of the range\n     * @throws  StringIndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code count} is negative,\n     *          or {@code offset} is greater than {@code length - count}\n     */\n    static int checkBoundsOffCount(int offset, int count, int length) {\n        return Preconditions.checkFromIndexSize(offset, count, length, Preconditions.SIOOBE_FORMATTER);\n    }\n\n    /*\n     * Check {@code begin}, {@code end} against {@code 0} and {@code length}\n     * bounds.\n     *\n     * @throws  StringIndexOutOfBoundsException\n     *          If {@code begin} is negative, {@code begin} is greater than\n     *          {@code end}, or {@code end} is greater than {@code length}.\n     */\n    static void checkBoundsBeginEnd(int begin, int end, int length) {\n        Preconditions.checkFromToIndex(begin, end, length, Preconditions.SIOOBE_FORMATTER);\n    }\n\n    /**\n     * Returns the string representation of the {@code codePoint}\n     * argument.\n     *\n     * @param   codePoint a {@code codePoint}.\n     * @return  a string of length {@code 1} or {@code 2} containing\n     *          as its single character the argument {@code codePoint}.\n     * @throws IllegalArgumentException if the specified\n     *          {@code codePoint} is not a {@linkplain Character#isValidCodePoint\n     *          valid Unicode code point}.\n     */\n    static String valueOfCodePoint(int codePoint) {\n        if (COMPACT_STRINGS \u0026\u0026 StringLatin1.canEncode(codePoint)) {\n            return new String(StringLatin1.toBytes((char)codePoint), LATIN1);\n        } else if (Character.isBmpCodePoint(codePoint)) {\n            return new String(StringUTF16.toBytes((char)codePoint), UTF16);\n        } else if (Character.isSupplementaryCodePoint(codePoint)) {\n            return new String(StringUTF16.toBytesSupplementary(codePoint), UTF16);\n        }\n\n        throw new IllegalArgumentException(\n            format(\"Not a valid Unicode code point: 0x%X\", codePoint));\n    }\n\n    /**\n     * Returns an {@link Optional} containing the nominal descriptor for this\n     * instance, which is the instance itself.\n     *\n     * @return an {@link Optional} describing the {@linkplain String} instance\n     * @since 12\n     */\n    @Override\n    public Optional\u003cString\u003e describeConstable() {\n        return Optional.of(this);\n    }\n\n    /**\n     * Resolves this instance as a {@link ConstantDesc}, the result of which is\n     * the instance itself.\n     *\n     * @param lookup ignored\n     * @return the {@linkplain String} instance\n     * @since 12\n     */\n    @Override\n    public String resolveConstantDesc(MethodHandles.Lookup lookup) {\n        return this;\n    }\n\n}\n"
    }
  }
}
java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-20/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI.create(URI.java:911)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:756)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:753)
	at scala.meta.internal.metals.WorkspaceLspService.didOpen(WorkspaceLspService.scala:388)
	at scala.meta.metals.lsp.DelegatingScalaService.didOpen(DelegatingScalaService.scala:39)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$recursiveFindRpcMethods$0(GenericEndpoint.java:65)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:160)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:231)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:198)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:185)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:97)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:114)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:577)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1623)
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-20/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI$Parser.fail(URI.java:2963)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3134)
	at java.base/java.net.URI$Parser.parse(URI.java:3170)
	at java.base/java.net.URI.<init>(URI.java:628)
	at java.base/java.net.URI.create(URI.java:909)
	... 22 more

Jul 01, 2024 1:53:14 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didClose",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-20/lib/src.zip%21/java.base/java/lang/String.java"
    }
  }
}
java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-20/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI.create(URI.java:911)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:756)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:753)
	at scala.meta.internal.metals.WorkspaceLspService.didClose(WorkspaceLspService.scala:407)
	at scala.meta.metals.lsp.DelegatingScalaService.didClose(DelegatingScalaService.scala:53)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$recursiveFindRpcMethods$0(GenericEndpoint.java:65)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:160)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:231)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:198)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:185)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:97)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:114)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:577)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1623)
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-20/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI$Parser.fail(URI.java:2963)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3134)
	at java.base/java.net.URI$Parser.parse(URI.java:3170)
	at java.base/java.net.URI.<init>(URI.java:628)
	at java.base/java.net.URI.create(URI.java:909)
	... 22 more

2024.07.01 13:58:42 INFO  no build target found for D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 03\2.scala. Using presentation compiler with project's scala-library version: 3.3.3
2024.07.01 13:58:43 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (11 scala sources)
2024.07.01 13:58:43 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.27s
2024.07.01 13:58:43 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (11 scala sources)
2024.07.01 13:58:43 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.24s
2024.07.01 13:58:44 INFO  no build target found for D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 03\2.scala. Using presentation compiler with project's scala-library version: 3.3.3
2024.07.01 13:58:44 INFO  time: code lens generation in 1.61s
2024.07.01 13:58:46 INFO  time: indexed workspace in 2.76s
2024.07.01 13:58:46 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (11 scala sources)
2024.07.01 13:58:46 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.16s
2024.07.01 14:01:10 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (11 scala sources)
2024.07.01 14:01:10 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.51s
2024.07.01 14:05:31 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (11 scala sources)
2024.07.01 14:05:31 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.76s
2024.07.01 14:08:37 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (11 scala sources)
2024.07.01 14:08:37 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.23s
2024.07.01 14:09:09 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (11 scala sources)
2024.07.01 14:09:09 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.36s
2024.07.01 14:11:36 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (11 scala sources)
2024.07.01 14:11:36 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.2s
Jul 01, 2024 2:11:43 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2791
2024.07.01 14:13:02 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (11 scala sources)
2024.07.01 14:13:02 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.2s
2024.07.01 14:14:21 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (11 scala sources)
2024.07.01 14:14:21 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.53s
Jul 01, 2024 2:14:26 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3011
2024.07.01 14:14:56 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (11 scala sources)
2024.07.01 14:14:56 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.41s
2024.07.01 14:17:56 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (11 scala sources)
2024.07.01 14:17:56 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.19s
2024.07.01 14:18:17 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (11 scala sources)
2024.07.01 14:18:17 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.23s
Jul 01, 2024 2:19:03 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3354
2024.07.01 14:20:39 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (11 scala sources)
2024.07.01 14:20:40 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 1.19s
2024.07.01 14:21:53 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (11 scala sources)
2024.07.01 14:21:53 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.47s
Jul 01, 2024 2:22:02 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3652
Jul 01, 2024 2:22:08 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3667
2024.07.01 14:23:21 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (11 scala sources)
2024.07.01 14:23:21 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.21s
2024.07.01 14:23:39 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (11 scala sources)
2024.07.01 14:23:39 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.22s
Jul 01, 2024 2:26:16 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4106
2024.07.01 14:26:23 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (11 scala sources)
2024.07.01 14:26:23 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.3s
2024.07.01 14:26:52 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (11 scala sources)
2024.07.01 14:26:52 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.33s
Jul 01, 2024 2:27:13 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4277
2024.07.01 14:28:24 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (11 scala sources)
2024.07.01 14:28:26 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 1.85s
Jul 01, 2024 2:28:53 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\.metals\.reports\metals-full\2024-07-01\r_compiler-error_(FunctionalProgramming_Practicals_53cb6fdf00)_14-28-53-651.md
2024.07.01 14:29:24 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (11 scala sources)
2024.07.01 14:29:24 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.51s
2024.07.01 14:29:59 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (11 scala sources)
2024.07.01 14:29:59 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.53s
2024.07.01 14:30:09 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (11 scala sources)
2024.07.01 14:30:09 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.36s
2024.07.01 14:30:31 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (11 scala sources)
2024.07.01 14:30:31 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.42s
2024.07.01 14:30:41 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (11 scala sources)
2024.07.01 14:30:41 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.35s
2024.07.01 14:30:43 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (11 scala sources)
2024.07.01 14:30:43 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.28s
2024.07.01 14:31:29 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (11 scala sources)
2024.07.01 14:31:29 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.3s
2024.07.01 14:31:37 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (11 scala sources)
2024.07.01 14:31:37 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.35s
2024.07.01 14:31:40 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-20/lib/src.zip!/java.base/java/lang/String.java

Uri: jar:file:///C:/Program Files/Java/jdk-20/lib/src.zip!/java.base/java/lang/String.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:911)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:756)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:753)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:739)
	scala.meta.internal.metals.WorkspaceLspService.getServiceForOpt(WorkspaceLspService.scala:305)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:314)
	scala.meta.internal.metals.WorkspaceLspService.executeCommand(WorkspaceLspService.scala:780)
	scala.meta.metals.lsp.DelegatingScalaService.executeCommand(DelegatingScalaService.scala:169)
	java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	java.base/java.lang.reflect.Method.invoke(Method.java:578)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$recursiveFindRpcMethods$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:128)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:271)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:201)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:185)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:97)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:114)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:577)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	java.base/java.lang.Thread.run(Thread.java:1623)
```

Jul 01, 2024 2:31:40 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-20/lib/src.zip%21/java.base/java/lang/String.java",
      "languageId": "java",
      "version": 1,
      "text": "/*\n * Copyright (c) 1994, 2022, Oracle and/or its affiliates. All rights reserved.\n * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n */\n\npackage java.lang;\n\nimport java.io.ObjectStreamField;\nimport java.io.UnsupportedEncodingException;\nimport java.lang.annotation.Native;\nimport java.lang.invoke.MethodHandles;\nimport java.lang.constant.Constable;\nimport java.lang.constant.ConstantDesc;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.charset.*;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Formatter;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Objects;\nimport java.util.Optional;\nimport java.util.Spliterator;\nimport java.util.function.Function;\nimport java.util.regex.Pattern;\nimport java.util.regex.PatternSyntaxException;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\nimport java.util.stream.Stream;\nimport java.util.stream.StreamSupport;\n\nimport jdk.internal.util.Preconditions;\nimport jdk.internal.vm.annotation.ForceInline;\nimport jdk.internal.vm.annotation.IntrinsicCandidate;\nimport jdk.internal.vm.annotation.Stable;\nimport sun.nio.cs.ArrayDecoder;\nimport sun.nio.cs.ArrayEncoder;\n\nimport sun.nio.cs.ISO_8859_1;\nimport sun.nio.cs.US_ASCII;\nimport sun.nio.cs.UTF_8;\n\n/**\n * The {@code String} class represents character strings. All\n * string literals in Java programs, such as {@code \"abc\"}, are\n * implemented as instances of this class.\n * \u003cp\u003e\n * Strings are constant; their values cannot be changed after they\n * are created. String buffers support mutable strings.\n * Because String objects are immutable they can be shared. For example:\n * \u003cblockquote\u003e\u003cpre\u003e\n *     String str \u003d \"abc\";\n * \u003c/pre\u003e\u003c/blockquote\u003e\u003cp\u003e\n * is equivalent to:\n * \u003cblockquote\u003e\u003cpre\u003e\n *     char data[] \u003d {\u0027a\u0027, \u0027b\u0027, \u0027c\u0027};\n *     String str \u003d new String(data);\n * \u003c/pre\u003e\u003c/blockquote\u003e\u003cp\u003e\n * Here are some more examples of how strings can be used:\n * \u003cblockquote\u003e\u003cpre\u003e\n *     System.out.println(\"abc\");\n *     String cde \u003d \"cde\";\n *     System.out.println(\"abc\" + cde);\n *     String c \u003d \"abc\".substring(2, 3);\n *     String d \u003d cde.substring(1, 2);\n * \u003c/pre\u003e\u003c/blockquote\u003e\n * \u003cp\u003e\n * The class {@code String} includes methods for examining\n * individual characters of the sequence, for comparing strings, for\n * searching strings, for extracting substrings, and for creating a\n * copy of a string with all characters translated to uppercase or to\n * lowercase. Case mapping is based on the Unicode Standard version\n * specified by the {@link java.lang.Character Character} class.\n * \u003cp\u003e\n * The Java language provides special support for the string\n * concatenation operator (\u0026nbsp;+\u0026nbsp;), and for conversion of\n * other objects to strings. For additional information on string\n * concatenation and conversion, see \u003ci\u003eThe Java Language Specification\u003c/i\u003e.\n *\n * \u003cp\u003e Unless otherwise noted, passing a {@code null} argument to a constructor\n * or method in this class will cause a {@link NullPointerException} to be\n * thrown.\n *\n * \u003cp\u003eA {@code String} represents a string in the UTF-16 format\n * in which \u003cem\u003esupplementary characters\u003c/em\u003e are represented by \u003cem\u003esurrogate\n * pairs\u003c/em\u003e (see the section \u003ca href\u003d\"Character.html#unicode\"\u003eUnicode\n * Character Representations\u003c/a\u003e in the {@code Character} class for\n * more information).\n * Index values refer to {@code char} code units, so a supplementary\n * character uses two positions in a {@code String}.\n * \u003cp\u003eThe {@code String} class provides methods for dealing with\n * Unicode code points (i.e., characters), in addition to those for\n * dealing with Unicode code units (i.e., {@code char} values).\n *\n * \u003cp\u003eUnless otherwise noted, methods for comparing Strings do not take locale\n * into account.  The {@link java.text.Collator} class provides methods for\n * finer-grain, locale-sensitive String comparison.\n *\n * @implNote The implementation of the string concatenation operator is left to\n * the discretion of a Java compiler, as long as the compiler ultimately conforms\n * to \u003ci\u003eThe Java Language Specification\u003c/i\u003e. For example, the {@code javac} compiler\n * may implement the operator with {@code StringBuffer}, {@code StringBuilder},\n * or {@code java.lang.invoke.StringConcatFactory} depending on the JDK version. The\n * implementation of string conversion is typically through the method {@code toString},\n * defined by {@code Object} and inherited by all classes in Java.\n *\n * @author  Lee Boynton\n * @author  Arthur van Hoff\n * @author  Martin Buchholz\n * @author  Ulf Zibis\n * @see     java.lang.Object#toString()\n * @see     java.lang.StringBuffer\n * @see     java.lang.StringBuilder\n * @see     java.nio.charset.Charset\n * @since   1.0\n * @jls     15.18.1 String Concatenation Operator +\n */\n\npublic final class String\n    implements java.io.Serializable, Comparable\u003cString\u003e, CharSequence,\n               Constable, ConstantDesc {\n\n    /**\n     * The value is used for character storage.\n     *\n     * @implNote This field is trusted by the VM, and is a subject to\n     * constant folding if String instance is constant. Overwriting this\n     * field after construction will cause problems.\n     *\n     * Additionally, it is marked with {@link Stable} to trust the contents\n     * of the array. No other facility in JDK provides this functionality (yet).\n     * {@link Stable} is safe here, because value is never null.\n     */\n    @Stable\n    private final byte[] value;\n\n    /**\n     * The identifier of the encoding used to encode the bytes in\n     * {@code value}. The supported values in this implementation are\n     *\n     * LATIN1\n     * UTF16\n     *\n     * @implNote This field is trusted by the VM, and is a subject to\n     * constant folding if String instance is constant. Overwriting this\n     * field after construction will cause problems.\n     */\n    private final byte coder;\n\n    /** Cache the hash code for the string */\n    private int hash; // Default to 0\n\n    /**\n     * Cache if the hash has been calculated as actually being zero, enabling\n     * us to avoid recalculating this.\n     */\n    private boolean hashIsZero; // Default to false;\n\n    /** use serialVersionUID from JDK 1.0.2 for interoperability */\n    @java.io.Serial\n    private static final long serialVersionUID \u003d -6849794470754667710L;\n\n    /**\n     * If String compaction is disabled, the bytes in {@code value} are\n     * always encoded in UTF16.\n     *\n     * For methods with several possible implementation paths, when String\n     * compaction is disabled, only one code path is taken.\n     *\n     * The instance field value is generally opaque to optimizing JIT\n     * compilers. Therefore, in performance-sensitive place, an explicit\n     * check of the static boolean {@code COMPACT_STRINGS} is done first\n     * before checking the {@code coder} field since the static boolean\n     * {@code COMPACT_STRINGS} would be constant folded away by an\n     * optimizing JIT compiler. The idioms for these cases are as follows.\n     *\n     * For code such as:\n     *\n     *    if (coder \u003d\u003d LATIN1) { ... }\n     *\n     * can be written more optimally as\n     *\n     *    if (coder() \u003d\u003d LATIN1) { ... }\n     *\n     * or:\n     *\n     *    if (COMPACT_STRINGS \u0026\u0026 coder \u003d\u003d LATIN1) { ... }\n     *\n     * An optimizing JIT compiler can fold the above conditional as:\n     *\n     *    COMPACT_STRINGS \u003d\u003d true  \u003d\u003e if (coder \u003d\u003d LATIN1) { ... }\n     *    COMPACT_STRINGS \u003d\u003d false \u003d\u003e if (false)           { ... }\n     *\n     * @implNote\n     * The actual value for this field is injected by JVM. The static\n     * initialization block is used to set the value here to communicate\n     * that this static final field is not statically foldable, and to\n     * avoid any possible circular dependency during vm initialization.\n     */\n    static final boolean COMPACT_STRINGS;\n\n    static {\n        COMPACT_STRINGS \u003d true;\n    }\n\n    /**\n     * Class String is special cased within the Serialization Stream Protocol.\n     *\n     * A String instance is written into an ObjectOutputStream according to\n     * \u003ca href\u003d\"{@docRoot}/../specs/serialization/protocol.html#stream-elements\"\u003e\n     * \u003ccite\u003eJava Object Serialization Specification\u003c/cite\u003e, Section 6.2, \"Stream Elements\"\u003c/a\u003e\n     */\n    @java.io.Serial\n    private static final ObjectStreamField[] serialPersistentFields \u003d\n        new ObjectStreamField[0];\n\n    /**\n     * Initializes a newly created {@code String} object so that it represents\n     * an empty character sequence.  Note that use of this constructor is\n     * unnecessary since Strings are immutable.\n     */\n    public String() {\n        this.value \u003d \"\".value;\n        this.coder \u003d \"\".coder;\n    }\n\n    /**\n     * Initializes a newly created {@code String} object so that it represents\n     * the same sequence of characters as the argument; in other words, the\n     * newly created string is a copy of the argument string. Unless an\n     * explicit copy of {@code original} is needed, use of this constructor is\n     * unnecessary since Strings are immutable.\n     *\n     * @param  original\n     *         A {@code String}\n     */\n    @IntrinsicCandidate\n    public String(String original) {\n        this.value \u003d original.value;\n        this.coder \u003d original.coder;\n        this.hash \u003d original.hash;\n        this.hashIsZero \u003d original.hashIsZero;\n    }\n\n    /**\n     * Allocates a new {@code String} so that it represents the sequence of\n     * characters currently contained in the character array argument. The\n     * contents of the character array are copied; subsequent modification of\n     * the character array does not affect the newly created string.\n     *\n     * @param  value\n     *         The initial value of the string\n     */\n    public String(char[] value) {\n        this(value, 0, value.length, null);\n    }\n\n    /**\n     * Allocates a new {@code String} that contains characters from a subarray\n     * of the character array argument. The {@code offset} argument is the\n     * index of the first character of the subarray and the {@code count}\n     * argument specifies the length of the subarray. The contents of the\n     * subarray are copied; subsequent modification of the character array does\n     * not affect the newly created string.\n     *\n     * @param  value\n     *         Array that is the source of characters\n     *\n     * @param  offset\n     *         The initial offset\n     *\n     * @param  count\n     *         The length\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code count} is negative, or\n     *          {@code offset} is greater than {@code value.length - count}\n     */\n    public String(char[] value, int offset, int count) {\n        this(value, offset, count, rangeCheck(value, offset, count));\n    }\n\n    private static Void rangeCheck(char[] value, int offset, int count) {\n        checkBoundsOffCount(offset, count, value.length);\n        return null;\n    }\n\n    /**\n     * Allocates a new {@code String} that contains characters from a subarray\n     * of the \u003ca href\u003d\"Character.html#unicode\"\u003eUnicode code point\u003c/a\u003e array\n     * argument.  The {@code offset} argument is the index of the first code\n     * point of the subarray and the {@code count} argument specifies the\n     * length of the subarray.  The contents of the subarray are converted to\n     * {@code char}s; subsequent modification of the {@code int} array does not\n     * affect the newly created string.\n     *\n     * @param  codePoints\n     *         Array that is the source of Unicode code points\n     *\n     * @param  offset\n     *         The initial offset\n     *\n     * @param  count\n     *         The length\n     *\n     * @throws  IllegalArgumentException\n     *          If any invalid Unicode code point is found in {@code\n     *          codePoints}\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code count} is negative, or\n     *          {@code offset} is greater than {@code codePoints.length - count}\n     *\n     * @since  1.5\n     */\n    public String(int[] codePoints, int offset, int count) {\n        checkBoundsOffCount(offset, count, codePoints.length);\n        if (count \u003d\u003d 0) {\n            this.value \u003d \"\".value;\n            this.coder \u003d \"\".coder;\n            return;\n        }\n        if (COMPACT_STRINGS) {\n            byte[] val \u003d StringLatin1.toBytes(codePoints, offset, count);\n            if (val !\u003d null) {\n                this.coder \u003d LATIN1;\n                this.value \u003d val;\n                return;\n            }\n        }\n        this.coder \u003d UTF16;\n        this.value \u003d StringUTF16.toBytes(codePoints, offset, count);\n    }\n\n    /**\n     * Allocates a new {@code String} constructed from a subarray of an array\n     * of 8-bit integer values.\n     *\n     * \u003cp\u003e The {@code offset} argument is the index of the first byte of the\n     * subarray, and the {@code count} argument specifies the length of the\n     * subarray.\n     *\n     * \u003cp\u003e Each {@code byte} in the subarray is converted to a {@code char} as\n     * specified in the {@link #String(byte[],int) String(byte[],int)} constructor.\n     *\n     * @deprecated This method does not properly convert bytes into characters.\n     * As of JDK\u0026nbsp;1.1, the preferred way to do this is via the\n     * {@code String} constructors that take a {@link Charset}, charset name,\n     * or that use the {@link Charset#defaultCharset() default charset}.\n     *\n     * @param  ascii\n     *         The bytes to be converted to characters\n     *\n     * @param  hibyte\n     *         The top 8 bits of each 16-bit Unicode code unit\n     *\n     * @param  offset\n     *         The initial offset\n     * @param  count\n     *         The length\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code count} is negative, or\n     *          {@code offset} is greater than {@code ascii.length - count}\n     *\n     * @see  #String(byte[], int)\n     * @see  #String(byte[], int, int, java.lang.String)\n     * @see  #String(byte[], int, int, java.nio.charset.Charset)\n     * @see  #String(byte[], int, int)\n     * @see  #String(byte[], java.lang.String)\n     * @see  #String(byte[], java.nio.charset.Charset)\n     * @see  #String(byte[])\n     */\n    @Deprecated(since\u003d\"1.1\")\n    public String(byte[] ascii, int hibyte, int offset, int count) {\n        checkBoundsOffCount(offset, count, ascii.length);\n        if (count \u003d\u003d 0) {\n            this.value \u003d \"\".value;\n            this.coder \u003d \"\".coder;\n            return;\n        }\n        if (COMPACT_STRINGS \u0026\u0026 (byte)hibyte \u003d\u003d 0) {\n            this.value \u003d Arrays.copyOfRange(ascii, offset, offset + count);\n            this.coder \u003d LATIN1;\n        } else {\n            hibyte \u003c\u003c\u003d 8;\n            byte[] val \u003d StringUTF16.newBytesFor(count);\n            for (int i \u003d 0; i \u003c count; i++) {\n                StringUTF16.putChar(val, i, hibyte | (ascii[offset++] \u0026 0xff));\n            }\n            this.value \u003d val;\n            this.coder \u003d UTF16;\n        }\n    }\n\n    /**\n     * Allocates a new {@code String} containing characters constructed from\n     * an array of 8-bit integer values. Each character \u003ci\u003ec\u003c/i\u003e in the\n     * resulting string is constructed from the corresponding component\n     * \u003ci\u003eb\u003c/i\u003e in the byte array such that:\n     *\n     * \u003cblockquote\u003e\u003cpre\u003e\n     *     \u003cb\u003e\u003ci\u003ec\u003c/i\u003e\u003c/b\u003e \u003d\u003d (char)(((hibyte \u0026amp; 0xff) \u0026lt;\u0026lt; 8)\n     *                         | (\u003cb\u003e\u003ci\u003eb\u003c/i\u003e\u003c/b\u003e \u0026amp; 0xff))\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @deprecated  This method does not properly convert bytes into\n     * characters.  As of JDK\u0026nbsp;1.1, the preferred way to do this is via the\n     * {@code String} constructors that take a {@link Charset}, charset name,\n     * or that use the {@link Charset#defaultCharset() default charset}.\n     *\n     * @param  ascii\n     *         The bytes to be converted to characters\n     *\n     * @param  hibyte\n     *         The top 8 bits of each 16-bit Unicode code unit\n     *\n     * @see  #String(byte[], int, int, java.lang.String)\n     * @see  #String(byte[], int, int, java.nio.charset.Charset)\n     * @see  #String(byte[], int, int)\n     * @see  #String(byte[], java.lang.String)\n     * @see  #String(byte[], java.nio.charset.Charset)\n     * @see  #String(byte[])\n     */\n    @Deprecated(since\u003d\"1.1\")\n    public String(byte[] ascii, int hibyte) {\n        this(ascii, hibyte, 0, ascii.length);\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified subarray of\n     * bytes using the specified charset.  The length of the new {@code String}\n     * is a function of the charset, and hence may not be equal to the length\n     * of the subarray.\n     *\n     * \u003cp\u003e The behavior of this constructor when the given bytes are not valid\n     * in the given charset is unspecified.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  offset\n     *         The index of the first byte to decode\n     *\n     * @param  length\n     *         The number of bytes to decode\n     *\n     * @param  charsetName\n     *         The name of a supported {@linkplain java.nio.charset.Charset\n     *         charset}\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named charset is not supported\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code length} is negative, or\n     *          {@code offset} is greater than {@code bytes.length - length}\n     *\n     * @since  1.1\n     */\n    public String(byte[] bytes, int offset, int length, String charsetName)\n            throws UnsupportedEncodingException {\n        this(lookupCharset(charsetName), bytes, checkBoundsOffCount(offset, length, bytes.length), length);\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified subarray of\n     * bytes using the specified {@linkplain java.nio.charset.Charset charset}.\n     * The length of the new {@code String} is a function of the charset, and\n     * hence may not be equal to the length of the subarray.\n     *\n     * \u003cp\u003e This method always replaces malformed-input and unmappable-character\n     * sequences with this charset\u0027s default replacement string.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  offset\n     *         The index of the first byte to decode\n     *\n     * @param  length\n     *         The number of bytes to decode\n     *\n     * @param  charset\n     *         The {@linkplain java.nio.charset.Charset charset} to be used to\n     *         decode the {@code bytes}\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code length} is negative, or\n     *          {@code offset} is greater than {@code bytes.length - length}\n     *\n     * @since  1.6\n     */\n    public String(byte[] bytes, int offset, int length, Charset charset) {\n        this(Objects.requireNonNull(charset), bytes, checkBoundsOffCount(offset, length, bytes.length), length);\n    }\n\n    /**\n     * This method does not do any precondition checks on its arguments.\n     * \u003cp\u003e\n     * Important: parameter order of this method is deliberately changed in order to\n     * disambiguate it against other similar methods of this class.\n     */\n    @SuppressWarnings(\"removal\")\n    private String(Charset charset, byte[] bytes, int offset, int length) {\n        if (length \u003d\u003d 0) {\n            this.value \u003d \"\".value;\n            this.coder \u003d \"\".coder;\n        } else if (charset \u003d\u003d UTF_8.INSTANCE) {\n            if (COMPACT_STRINGS) {\n                int dp \u003d StringCoding.countPositives(bytes, offset, length);\n                if (dp \u003d\u003d length) {\n                    this.value \u003d Arrays.copyOfRange(bytes, offset, offset + length);\n                    this.coder \u003d LATIN1;\n                    return;\n                }\n                int sl \u003d offset + length;\n                byte[] dst \u003d new byte[length];\n                if (dp \u003e 0) {\n                    System.arraycopy(bytes, offset, dst, 0, dp);\n                    offset +\u003d dp;\n                }\n                while (offset \u003c sl) {\n                    int b1 \u003d bytes[offset++];\n                    if (b1 \u003e\u003d 0) {\n                        dst[dp++] \u003d (byte)b1;\n                        continue;\n                    }\n                    if ((b1 \u0026 0xfe) \u003d\u003d 0xc2 \u0026\u0026 offset \u003c sl) { // b1 either 0xc2 or 0xc3\n                        int b2 \u003d bytes[offset];\n                        if (b2 \u003c -64) { // continuation bytes are always negative values in the range -128 to -65\n                            dst[dp++] \u003d (byte)decode2(b1, b2);\n                            offset++;\n                            continue;\n                        }\n                    }\n                    // anything not a latin1, including the REPL\n                    // we have to go with the utf16\n                    offset--;\n                    break;\n                }\n                if (offset \u003d\u003d sl) {\n                    if (dp !\u003d dst.length) {\n                        dst \u003d Arrays.copyOf(dst, dp);\n                    }\n                    this.value \u003d dst;\n                    this.coder \u003d LATIN1;\n                    return;\n                }\n                byte[] buf \u003d new byte[length \u003c\u003c 1];\n                StringLatin1.inflate(dst, 0, buf, 0, dp);\n                dst \u003d buf;\n                dp \u003d decodeUTF8_UTF16(bytes, offset, sl, dst, dp, true);\n                if (dp !\u003d length) {\n                    dst \u003d Arrays.copyOf(dst, dp \u003c\u003c 1);\n                }\n                this.value \u003d dst;\n                this.coder \u003d UTF16;\n            } else { // !COMPACT_STRINGS\n                byte[] dst \u003d new byte[length \u003c\u003c 1];\n                int dp \u003d decodeUTF8_UTF16(bytes, offset, offset + length, dst, 0, true);\n                if (dp !\u003d length) {\n                    dst \u003d Arrays.copyOf(dst, dp \u003c\u003c 1);\n                }\n                this.value \u003d dst;\n                this.coder \u003d UTF16;\n            }\n        } else if (charset \u003d\u003d ISO_8859_1.INSTANCE) {\n            if (COMPACT_STRINGS) {\n                this.value \u003d Arrays.copyOfRange(bytes, offset, offset + length);\n                this.coder \u003d LATIN1;\n            } else {\n                this.value \u003d StringLatin1.inflate(bytes, offset, length);\n                this.coder \u003d UTF16;\n            }\n        } else if (charset \u003d\u003d US_ASCII.INSTANCE) {\n            if (COMPACT_STRINGS \u0026\u0026 !StringCoding.hasNegatives(bytes, offset, length)) {\n                this.value \u003d Arrays.copyOfRange(bytes, offset, offset + length);\n                this.coder \u003d LATIN1;\n            } else {\n                byte[] dst \u003d new byte[length \u003c\u003c 1];\n                int dp \u003d 0;\n                while (dp \u003c length) {\n                    int b \u003d bytes[offset++];\n                    StringUTF16.putChar(dst, dp++, (b \u003e\u003d 0) ? (char) b : REPL);\n                }\n                this.value \u003d dst;\n                this.coder \u003d UTF16;\n            }\n        } else {\n            // (1)We never cache the \"external\" cs, the only benefit of creating\n            // an additional StringDe/Encoder object to wrap it is to share the\n            // de/encode() method. These SD/E objects are short-lived, the young-gen\n            // gc should be able to take care of them well. But the best approach\n            // is still not to generate them if not really necessary.\n            // (2)The defensive copy of the input byte/char[] has a big performance\n            // impact, as well as the outgoing result byte/char[]. Need to do the\n            // optimization check of (sm\u003d\u003dnull \u0026\u0026 classLoader0\u003d\u003dnull) for both.\n            CharsetDecoder cd \u003d charset.newDecoder();\n            // ArrayDecoder fastpaths\n            if (cd instanceof ArrayDecoder ad) {\n                // ascii\n                if (ad.isASCIICompatible() \u0026\u0026 !StringCoding.hasNegatives(bytes, offset, length)) {\n                    if (COMPACT_STRINGS) {\n                        this.value \u003d Arrays.copyOfRange(bytes, offset, offset + length);\n                        this.coder \u003d LATIN1;\n                        return;\n                    }\n                    this.value \u003d StringLatin1.inflate(bytes, offset, length);\n                    this.coder \u003d UTF16;\n                    return;\n                }\n\n                // fastpath for always Latin1 decodable single byte\n                if (COMPACT_STRINGS \u0026\u0026 ad.isLatin1Decodable()) {\n                    byte[] dst \u003d new byte[length];\n                    ad.decodeToLatin1(bytes, offset, length, dst);\n                    this.value \u003d dst;\n                    this.coder \u003d LATIN1;\n                    return;\n                }\n\n                int en \u003d scale(length, cd.maxCharsPerByte());\n                cd.onMalformedInput(CodingErrorAction.REPLACE)\n                        .onUnmappableCharacter(CodingErrorAction.REPLACE);\n                char[] ca \u003d new char[en];\n                int clen \u003d ad.decode(bytes, offset, length, ca);\n                if (COMPACT_STRINGS) {\n                    byte[] bs \u003d StringUTF16.compress(ca, 0, clen);\n                    if (bs !\u003d null) {\n                        value \u003d bs;\n                        coder \u003d LATIN1;\n                        return;\n                    }\n                }\n                coder \u003d UTF16;\n                value \u003d StringUTF16.toBytes(ca, 0, clen);\n                return;\n            }\n\n            // decode using CharsetDecoder\n            int en \u003d scale(length, cd.maxCharsPerByte());\n            cd.onMalformedInput(CodingErrorAction.REPLACE)\n                    .onUnmappableCharacter(CodingErrorAction.REPLACE);\n            char[] ca \u003d new char[en];\n            if (charset.getClass().getClassLoader0() !\u003d null \u0026\u0026\n                    System.getSecurityManager() !\u003d null) {\n                bytes \u003d Arrays.copyOfRange(bytes, offset, offset + length);\n                offset \u003d 0;\n            }\n\n            int caLen;\n            try {\n                caLen \u003d decodeWithDecoder(cd, ca, bytes, offset, length);\n            } catch (CharacterCodingException x) {\n                // Substitution is enabled, so this shouldn\u0027t happen\n                throw new Error(x);\n            }\n            if (COMPACT_STRINGS) {\n                byte[] bs \u003d StringUTF16.compress(ca, 0, caLen);\n                if (bs !\u003d null) {\n                    value \u003d bs;\n                    coder \u003d LATIN1;\n                    return;\n                }\n            }\n            coder \u003d UTF16;\n            value \u003d StringUTF16.toBytes(ca, 0, caLen);\n        }\n    }\n\n    /*\n     * Throws iae, instead of replacing, if malformed or unmappable.\n     */\n    static String newStringUTF8NoRepl(byte[] bytes, int offset, int length) {\n        checkBoundsOffCount(offset, length, bytes.length);\n        if (length \u003d\u003d 0) {\n            return \"\";\n        }\n        int dp;\n        byte[] dst;\n        if (COMPACT_STRINGS) {\n            dp \u003d StringCoding.countPositives(bytes, offset, length);\n            int sl \u003d offset + length;\n            if (dp \u003d\u003d length) {\n                return new String(Arrays.copyOfRange(bytes, offset, offset + length), LATIN1);\n            }\n            dst \u003d new byte[length];\n            System.arraycopy(bytes, offset, dst, 0, dp);\n            offset +\u003d dp;\n            while (offset \u003c sl) {\n                int b1 \u003d bytes[offset++];\n                if (b1 \u003e\u003d 0) {\n                    dst[dp++] \u003d (byte)b1;\n                    continue;\n                }\n                if ((b1 \u0026 0xfe) \u003d\u003d 0xc2 \u0026\u0026 offset \u003c sl) { // b1 either 0xc2 or 0xc3\n                    int b2 \u003d bytes[offset];\n                    if (b2 \u003c -64) { // continuation bytes are always negative values in the range -128 to -65\n                        dst[dp++] \u003d (byte)decode2(b1, b2);\n                        offset++;\n                        continue;\n                    }\n                }\n                // anything not a latin1, including the REPL\n                // we have to go with the utf16\n                offset--;\n                break;\n            }\n            if (offset \u003d\u003d sl) {\n                if (dp !\u003d dst.length) {\n                    dst \u003d Arrays.copyOf(dst, dp);\n                }\n                return new String(dst, LATIN1);\n            }\n            if (dp \u003d\u003d 0) {\n                dst \u003d new byte[length \u003c\u003c 1];\n            } else {\n                byte[] buf \u003d new byte[length \u003c\u003c 1];\n                StringLatin1.inflate(dst, 0, buf, 0, dp);\n                dst \u003d buf;\n            }\n            dp \u003d decodeUTF8_UTF16(bytes, offset, sl, dst, dp, false);\n        } else { // !COMPACT_STRINGS\n            dst \u003d new byte[length \u003c\u003c 1];\n            dp \u003d decodeUTF8_UTF16(bytes, offset, offset + length, dst, 0, false);\n        }\n        if (dp !\u003d length) {\n            dst \u003d Arrays.copyOf(dst, dp \u003c\u003c 1);\n        }\n        return new String(dst, UTF16);\n    }\n\n    static String newStringNoRepl(byte[] src, Charset cs) throws CharacterCodingException {\n        try {\n            return newStringNoRepl1(src, cs);\n        } catch (IllegalArgumentException e) {\n            //newStringNoRepl1 throws IAE with MalformedInputException or CCE as the cause\n            Throwable cause \u003d e.getCause();\n            if (cause instanceof MalformedInputException mie) {\n                throw mie;\n            }\n            throw (CharacterCodingException)cause;\n        }\n    }\n\n    @SuppressWarnings(\"removal\")\n    private static String newStringNoRepl1(byte[] src, Charset cs) {\n        int len \u003d src.length;\n        if (len \u003d\u003d 0) {\n            return \"\";\n        }\n        if (cs \u003d\u003d UTF_8.INSTANCE) {\n            return newStringUTF8NoRepl(src, 0, src.length);\n        }\n        if (cs \u003d\u003d ISO_8859_1.INSTANCE) {\n            if (COMPACT_STRINGS)\n                return new String(src, LATIN1);\n            return new String(StringLatin1.inflate(src, 0, src.length), UTF16);\n        }\n        if (cs \u003d\u003d US_ASCII.INSTANCE) {\n            if (!StringCoding.hasNegatives(src, 0, src.length)) {\n                if (COMPACT_STRINGS)\n                    return new String(src, LATIN1);\n                return new String(StringLatin1.inflate(src, 0, src.length), UTF16);\n            } else {\n                throwMalformed(src);\n            }\n        }\n\n        CharsetDecoder cd \u003d cs.newDecoder();\n        // ascii fastpath\n        if (cd instanceof ArrayDecoder ad \u0026\u0026\n                ad.isASCIICompatible() \u0026\u0026\n                !StringCoding.hasNegatives(src, 0, src.length)) {\n            return new String(src, 0, src.length, ISO_8859_1.INSTANCE);\n        }\n        int en \u003d scale(len, cd.maxCharsPerByte());\n        char[] ca \u003d new char[en];\n        if (cs.getClass().getClassLoader0() !\u003d null \u0026\u0026\n                System.getSecurityManager() !\u003d null) {\n            src \u003d Arrays.copyOf(src, len);\n        }\n        int caLen;\n        try {\n            caLen \u003d decodeWithDecoder(cd, ca, src, 0, src.length);\n        } catch (CharacterCodingException x) {\n            // throw via IAE\n            throw new IllegalArgumentException(x);\n        }\n        if (COMPACT_STRINGS) {\n            byte[] bs \u003d StringUTF16.compress(ca, 0, caLen);\n            if (bs !\u003d null) {\n                return new String(bs, LATIN1);\n            }\n        }\n        return new String(StringUTF16.toBytes(ca, 0, caLen), UTF16);\n    }\n\n    private static final char REPL \u003d \u0027\\ufffd\u0027;\n\n    // Trim the given byte array to the given length\n    @SuppressWarnings(\"removal\")\n    private static byte[] safeTrim(byte[] ba, int len, boolean isTrusted) {\n        if (len \u003d\u003d ba.length \u0026\u0026 (isTrusted || System.getSecurityManager() \u003d\u003d null)) {\n            return ba;\n        } else {\n            return Arrays.copyOf(ba, len);\n        }\n    }\n\n    private static int scale(int len, float expansionFactor) {\n        // We need to perform double, not float, arithmetic; otherwise\n        // we lose low order bits when len is larger than 2**24.\n        return (int)(len * (double)expansionFactor);\n    }\n\n    private static Charset lookupCharset(String csn) throws UnsupportedEncodingException {\n        Objects.requireNonNull(csn);\n        try {\n            return Charset.forName(csn);\n        } catch (UnsupportedCharsetException | IllegalCharsetNameException x) {\n            throw new UnsupportedEncodingException(csn);\n        }\n    }\n\n    private static byte[] encode(Charset cs, byte coder, byte[] val) {\n        if (cs \u003d\u003d UTF_8.INSTANCE) {\n            return encodeUTF8(coder, val, true);\n        }\n        if (cs \u003d\u003d ISO_8859_1.INSTANCE) {\n            return encode8859_1(coder, val);\n        }\n        if (cs \u003d\u003d US_ASCII.INSTANCE) {\n            return encodeASCII(coder, val);\n        }\n        return encodeWithEncoder(cs, coder, val, true);\n    }\n\n    private static byte[] encodeWithEncoder(Charset cs, byte coder, byte[] val, boolean doReplace) {\n        CharsetEncoder ce \u003d cs.newEncoder();\n        int len \u003d val.length \u003e\u003e coder;  // assume LATIN1\u003d0/UTF16\u003d1;\n        int en \u003d scale(len, ce.maxBytesPerChar());\n        // fastpath with ArrayEncoder implies `doReplace`.\n        if (doReplace \u0026\u0026 ce instanceof ArrayEncoder ae) {\n            // fastpath for ascii compatible\n            if (coder \u003d\u003d LATIN1 \u0026\u0026\n                    ae.isASCIICompatible() \u0026\u0026\n                    !StringCoding.hasNegatives(val, 0, val.length)) {\n                return Arrays.copyOf(val, val.length);\n            }\n            byte[] ba \u003d new byte[en];\n            if (len \u003d\u003d 0) {\n                return ba;\n            }\n\n            int blen \u003d (coder \u003d\u003d LATIN1) ? ae.encodeFromLatin1(val, 0, len, ba)\n                    : ae.encodeFromUTF16(val, 0, len, ba);\n            if (blen !\u003d -1) {\n                return safeTrim(ba, blen, true);\n            }\n        }\n\n        byte[] ba \u003d new byte[en];\n        if (len \u003d\u003d 0) {\n            return ba;\n        }\n        if (doReplace) {\n            ce.onMalformedInput(CodingErrorAction.REPLACE)\n                    .onUnmappableCharacter(CodingErrorAction.REPLACE);\n        }\n        char[] ca \u003d (coder \u003d\u003d LATIN1 ) ? StringLatin1.toChars(val)\n                : StringUTF16.toChars(val);\n        ByteBuffer bb \u003d ByteBuffer.wrap(ba);\n        CharBuffer cb \u003d CharBuffer.wrap(ca, 0, len);\n        try {\n            CoderResult cr \u003d ce.encode(cb, bb, true);\n            if (!cr.isUnderflow())\n                cr.throwException();\n            cr \u003d ce.flush(bb);\n            if (!cr.isUnderflow())\n                cr.throwException();\n        } catch (CharacterCodingException x) {\n            if (!doReplace) {\n                throw new IllegalArgumentException(x);\n            } else {\n                throw new Error(x);\n            }\n        }\n        return safeTrim(ba, bb.position(), cs.getClass().getClassLoader0() \u003d\u003d null);\n    }\n\n    /*\n     * Throws iae, instead of replacing, if unmappable.\n     */\n    static byte[] getBytesUTF8NoRepl(String s) {\n        return encodeUTF8(s.coder(), s.value(), false);\n    }\n\n    private static boolean isASCII(byte[] src) {\n        return !StringCoding.hasNegatives(src, 0, src.length);\n    }\n\n    /*\n     * Throws CCE, instead of replacing, if unmappable.\n     */\n    static byte[] getBytesNoRepl(String s, Charset cs) throws CharacterCodingException {\n        try {\n            return getBytesNoRepl1(s, cs);\n        } catch (IllegalArgumentException e) {\n            //getBytesNoRepl1 throws IAE with UnmappableCharacterException or CCE as the cause\n            Throwable cause \u003d e.getCause();\n            if (cause instanceof UnmappableCharacterException) {\n                throw (UnmappableCharacterException)cause;\n            }\n            throw (CharacterCodingException)cause;\n        }\n    }\n\n    private static byte[] getBytesNoRepl1(String s, Charset cs) {\n        byte[] val \u003d s.value();\n        byte coder \u003d s.coder();\n        if (cs \u003d\u003d UTF_8.INSTANCE) {\n            if (coder \u003d\u003d LATIN1 \u0026\u0026 isASCII(val)) {\n                return val;\n            }\n            return encodeUTF8(coder, val, false);\n        }\n        if (cs \u003d\u003d ISO_8859_1.INSTANCE) {\n            if (coder \u003d\u003d LATIN1) {\n                return val;\n            }\n            return encode8859_1(coder, val, false);\n        }\n        if (cs \u003d\u003d US_ASCII.INSTANCE) {\n            if (coder \u003d\u003d LATIN1) {\n                if (isASCII(val)) {\n                    return val;\n                } else {\n                    throwUnmappable(val);\n                }\n            }\n        }\n        return encodeWithEncoder(cs, coder, val, false);\n    }\n\n    private static byte[] encodeASCII(byte coder, byte[] val) {\n        if (coder \u003d\u003d LATIN1) {\n            byte[] dst \u003d Arrays.copyOf(val, val.length);\n            for (int i \u003d 0; i \u003c dst.length; i++) {\n                if (dst[i] \u003c 0) {\n                    dst[i] \u003d \u0027?\u0027;\n                }\n            }\n            return dst;\n        }\n        int len \u003d val.length \u003e\u003e 1;\n        byte[] dst \u003d new byte[len];\n        int dp \u003d 0;\n        for (int i \u003d 0; i \u003c len; i++) {\n            char c \u003d StringUTF16.getChar(val, i);\n            if (c \u003c 0x80) {\n                dst[dp++] \u003d (byte)c;\n                continue;\n            }\n            if (Character.isHighSurrogate(c) \u0026\u0026 i + 1 \u003c len \u0026\u0026\n                    Character.isLowSurrogate(StringUTF16.getChar(val, i + 1))) {\n                i++;\n            }\n            dst[dp++] \u003d \u0027?\u0027;\n        }\n        if (len \u003d\u003d dp) {\n            return dst;\n        }\n        return Arrays.copyOf(dst, dp);\n    }\n\n    private static byte[] encode8859_1(byte coder, byte[] val) {\n        return encode8859_1(coder, val, true);\n    }\n\n    private static byte[] encode8859_1(byte coder, byte[] val, boolean doReplace) {\n        if (coder \u003d\u003d LATIN1) {\n            return Arrays.copyOf(val, val.length);\n        }\n        int len \u003d val.length \u003e\u003e 1;\n        byte[] dst \u003d new byte[len];\n        int dp \u003d 0;\n        int sp \u003d 0;\n        int sl \u003d len;\n        while (sp \u003c sl) {\n            int ret \u003d StringCoding.implEncodeISOArray(val, sp, dst, dp, len);\n            sp \u003d sp + ret;\n            dp \u003d dp + ret;\n            if (ret !\u003d len) {\n                if (!doReplace) {\n                    throwUnmappable(sp);\n                }\n                char c \u003d StringUTF16.getChar(val, sp++);\n                if (Character.isHighSurrogate(c) \u0026\u0026 sp \u003c sl \u0026\u0026\n                        Character.isLowSurrogate(StringUTF16.getChar(val, sp))) {\n                    sp++;\n                }\n                dst[dp++] \u003d \u0027?\u0027;\n                len \u003d sl - sp;\n            }\n        }\n        if (dp \u003d\u003d dst.length) {\n            return dst;\n        }\n        return Arrays.copyOf(dst, dp);\n    }\n\n    //////////////////////////////// utf8 ////////////////////////////////////\n\n    /**\n     * Decodes ASCII from the source byte array into the destination\n     * char array. Used via JavaLangAccess from UTF_8 and other charset\n     * decoders.\n     *\n     * @return the number of bytes successfully decoded, at most len\n     */\n    /* package-private */\n    static int decodeASCII(byte[] sa, int sp, char[] da, int dp, int len) {\n        int count \u003d StringCoding.countPositives(sa, sp, len);\n        while (count \u003c len) {\n            if (sa[sp + count] \u003c 0) {\n                break;\n            }\n            count++;\n        }\n        StringLatin1.inflate(sa, sp, da, dp, count);\n        return count;\n    }\n\n    private static boolean isNotContinuation(int b) {\n        return (b \u0026 0xc0) !\u003d 0x80;\n    }\n\n    private static boolean isMalformed3(int b1, int b2, int b3) {\n        return (b1 \u003d\u003d (byte)0xe0 \u0026\u0026 (b2 \u0026 0xe0) \u003d\u003d 0x80) ||\n                (b2 \u0026 0xc0) !\u003d 0x80 || (b3 \u0026 0xc0) !\u003d 0x80;\n    }\n\n    private static boolean isMalformed3_2(int b1, int b2) {\n        return (b1 \u003d\u003d (byte)0xe0 \u0026\u0026 (b2 \u0026 0xe0) \u003d\u003d 0x80) ||\n                (b2 \u0026 0xc0) !\u003d 0x80;\n    }\n\n    private static boolean isMalformed4(int b2, int b3, int b4) {\n        return (b2 \u0026 0xc0) !\u003d 0x80 || (b3 \u0026 0xc0) !\u003d 0x80 ||\n                (b4 \u0026 0xc0) !\u003d 0x80;\n    }\n\n    private static boolean isMalformed4_2(int b1, int b2) {\n        return (b1 \u003d\u003d 0xf0 \u0026\u0026 (b2 \u003c 0x90 || b2 \u003e 0xbf)) ||\n                (b1 \u003d\u003d 0xf4 \u0026\u0026 (b2 \u0026 0xf0) !\u003d 0x80) ||\n                (b2 \u0026 0xc0) !\u003d 0x80;\n    }\n\n    private static boolean isMalformed4_3(int b3) {\n        return (b3 \u0026 0xc0) !\u003d 0x80;\n    }\n\n    private static char decode2(int b1, int b2) {\n        return (char)(((b1 \u003c\u003c 6) ^ b2) ^\n                (((byte) 0xC0 \u003c\u003c 6) ^\n                        ((byte) 0x80 \u003c\u003c 0)));\n    }\n\n    private static char decode3(int b1, int b2, int b3) {\n        return (char)((b1 \u003c\u003c 12) ^\n                (b2 \u003c\u003c  6) ^\n                (b3 ^\n                        (((byte) 0xE0 \u003c\u003c 12) ^\n                                ((byte) 0x80 \u003c\u003c  6) ^\n                                ((byte) 0x80 \u003c\u003c  0))));\n    }\n\n    private static int decode4(int b1, int b2, int b3, int b4) {\n        return ((b1 \u003c\u003c 18) ^\n                (b2 \u003c\u003c 12) ^\n                (b3 \u003c\u003c  6) ^\n                (b4 ^\n                        (((byte) 0xF0 \u003c\u003c 18) ^\n                                ((byte) 0x80 \u003c\u003c 12) ^\n                                ((byte) 0x80 \u003c\u003c  6) ^\n                                ((byte) 0x80 \u003c\u003c  0))));\n    }\n\n    private static int decodeUTF8_UTF16(byte[] src, int sp, int sl, byte[] dst, int dp, boolean doReplace) {\n        while (sp \u003c sl) {\n            int b1 \u003d src[sp++];\n            if (b1 \u003e\u003d 0) {\n                StringUTF16.putChar(dst, dp++, (char) b1);\n            } else if ((b1 \u003e\u003e 5) \u003d\u003d -2 \u0026\u0026 (b1 \u0026 0x1e) !\u003d 0) {\n                if (sp \u003c sl) {\n                    int b2 \u003d src[sp++];\n                    if (isNotContinuation(b2)) {\n                        if (!doReplace) {\n                            throwMalformed(sp - 1, 1);\n                        }\n                        StringUTF16.putChar(dst, dp++, REPL);\n                        sp--;\n                    } else {\n                        StringUTF16.putChar(dst, dp++, decode2(b1, b2));\n                    }\n                    continue;\n                }\n                if (!doReplace) {\n                    throwMalformed(sp, 1);  // underflow()\n                }\n                StringUTF16.putChar(dst, dp++, REPL);\n                break;\n            } else if ((b1 \u003e\u003e 4) \u003d\u003d -2) {\n                if (sp + 1 \u003c sl) {\n                    int b2 \u003d src[sp++];\n                    int b3 \u003d src[sp++];\n                    if (isMalformed3(b1, b2, b3)) {\n                        if (!doReplace) {\n                            throwMalformed(sp - 3, 3);\n                        }\n                        StringUTF16.putChar(dst, dp++, REPL);\n                        sp -\u003d 3;\n                        sp +\u003d malformed3(src, sp);\n                    } else {\n                        char c \u003d decode3(b1, b2, b3);\n                        if (Character.isSurrogate(c)) {\n                            if (!doReplace) {\n                                throwMalformed(sp - 3, 3);\n                            }\n                            StringUTF16.putChar(dst, dp++, REPL);\n                        } else {\n                            StringUTF16.putChar(dst, dp++, c);\n                        }\n                    }\n                    continue;\n                }\n                if (sp \u003c sl \u0026\u0026 isMalformed3_2(b1, src[sp])) {\n                    if (!doReplace) {\n                        throwMalformed(sp - 1, 2);\n                    }\n                    StringUTF16.putChar(dst, dp++, REPL);\n                    continue;\n                }\n                if (!doReplace) {\n                    throwMalformed(sp, 1);\n                }\n                StringUTF16.putChar(dst, dp++, REPL);\n                break;\n            } else if ((b1 \u003e\u003e 3) \u003d\u003d -2) {\n                if (sp + 2 \u003c sl) {\n                    int b2 \u003d src[sp++];\n                    int b3 \u003d src[sp++];\n                    int b4 \u003d src[sp++];\n                    int uc \u003d decode4(b1, b2, b3, b4);\n                    if (isMalformed4(b2, b3, b4) ||\n                            !Character.isSupplementaryCodePoint(uc)) { // shortest form check\n                        if (!doReplace) {\n                            throwMalformed(sp - 4, 4);\n                        }\n                        StringUTF16.putChar(dst, dp++, REPL);\n                        sp -\u003d 4;\n                        sp +\u003d malformed4(src, sp);\n                    } else {\n                        StringUTF16.putChar(dst, dp++, Character.highSurrogate(uc));\n                        StringUTF16.putChar(dst, dp++, Character.lowSurrogate(uc));\n                    }\n                    continue;\n                }\n                b1 \u0026\u003d 0xff;\n                if (b1 \u003e 0xf4 || sp \u003c sl \u0026\u0026 isMalformed4_2(b1, src[sp] \u0026 0xff)) {\n                    if (!doReplace) {\n                        throwMalformed(sp - 1, 1);  // or 2\n                    }\n                    StringUTF16.putChar(dst, dp++, REPL);\n                    continue;\n                }\n                if (!doReplace) {\n                    throwMalformed(sp - 1, 1);\n                }\n                sp++;\n                StringUTF16.putChar(dst, dp++, REPL);\n                if (sp \u003c sl \u0026\u0026 isMalformed4_3(src[sp])) {\n                    continue;\n                }\n                break;\n            } else {\n                if (!doReplace) {\n                    throwMalformed(sp - 1, 1);\n                }\n                StringUTF16.putChar(dst, dp++, REPL);\n            }\n        }\n        return dp;\n    }\n\n    private static int decodeWithDecoder(CharsetDecoder cd, char[] dst, byte[] src, int offset, int length)\n                                            throws CharacterCodingException {\n        ByteBuffer bb \u003d ByteBuffer.wrap(src, offset, length);\n        CharBuffer cb \u003d CharBuffer.wrap(dst, 0, dst.length);\n        CoderResult cr \u003d cd.decode(bb, cb, true);\n        if (!cr.isUnderflow())\n            cr.throwException();\n        cr \u003d cd.flush(cb);\n        if (!cr.isUnderflow())\n            cr.throwException();\n        return cb.position();\n    }\n\n    private static int malformed3(byte[] src, int sp) {\n        int b1 \u003d src[sp++];\n        int b2 \u003d src[sp];    // no need to lookup b3\n        return ((b1 \u003d\u003d (byte)0xe0 \u0026\u0026 (b2 \u0026 0xe0) \u003d\u003d 0x80) ||\n                isNotContinuation(b2)) ? 1 : 2;\n    }\n\n    private static int malformed4(byte[] src, int sp) {\n        // we don\u0027t care the speed here\n        int b1 \u003d src[sp++] \u0026 0xff;\n        int b2 \u003d src[sp++] \u0026 0xff;\n        if (b1 \u003e 0xf4 ||\n                (b1 \u003d\u003d 0xf0 \u0026\u0026 (b2 \u003c 0x90 || b2 \u003e 0xbf)) ||\n                (b1 \u003d\u003d 0xf4 \u0026\u0026 (b2 \u0026 0xf0) !\u003d 0x80) ||\n                isNotContinuation(b2))\n            return 1;\n        if (isNotContinuation(src[sp]))\n            return 2;\n        return 3;\n    }\n\n    private static void throwMalformed(int off, int nb) {\n        String msg \u003d \"malformed input off : \" + off + \", length : \" + nb;\n        throw new IllegalArgumentException(msg, new MalformedInputException(nb));\n    }\n\n    private static void throwMalformed(byte[] val) {\n        int dp \u003d 0;\n        while (dp \u003c val.length \u0026\u0026 val[dp] \u003e\u003d0) { dp++; }\n        throwMalformed(dp, 1);\n    }\n\n    private static void throwUnmappable(int off) {\n        String msg \u003d \"malformed input off : \" + off + \", length : 1\";\n        throw new IllegalArgumentException(msg, new UnmappableCharacterException(1));\n    }\n\n    private static void throwUnmappable(byte[] val) {\n        int dp \u003d 0;\n        while (dp \u003c val.length \u0026\u0026 val[dp] \u003e\u003d0) { dp++; }\n        throwUnmappable(dp);\n    }\n\n    private static byte[] encodeUTF8(byte coder, byte[] val, boolean doReplace) {\n        if (coder \u003d\u003d UTF16)\n            return encodeUTF8_UTF16(val, doReplace);\n\n        if (!StringCoding.hasNegatives(val, 0, val.length))\n            return Arrays.copyOf(val, val.length);\n\n        int dp \u003d 0;\n        byte[] dst \u003d new byte[val.length \u003c\u003c 1];\n        for (byte c : val) {\n            if (c \u003c 0) {\n                dst[dp++] \u003d (byte) (0xc0 | ((c \u0026 0xff) \u003e\u003e 6));\n                dst[dp++] \u003d (byte) (0x80 | (c \u0026 0x3f));\n            } else {\n                dst[dp++] \u003d c;\n            }\n        }\n        if (dp \u003d\u003d dst.length)\n            return dst;\n        return Arrays.copyOf(dst, dp);\n    }\n\n    private static byte[] encodeUTF8_UTF16(byte[] val, boolean doReplace) {\n        int dp \u003d 0;\n        int sp \u003d 0;\n        int sl \u003d val.length \u003e\u003e 1;\n        byte[] dst \u003d new byte[sl * 3];\n        while (sp \u003c sl) {\n            // ascii fast loop;\n            char c \u003d StringUTF16.getChar(val, sp);\n            if (c \u003e\u003d \u0027\\u0080\u0027) {\n                break;\n            }\n            dst[dp++] \u003d (byte)c;\n            sp++;\n        }\n        while (sp \u003c sl) {\n            char c \u003d StringUTF16.getChar(val, sp++);\n            if (c \u003c 0x80) {\n                dst[dp++] \u003d (byte)c;\n            } else if (c \u003c 0x800) {\n                dst[dp++] \u003d (byte)(0xc0 | (c \u003e\u003e 6));\n                dst[dp++] \u003d (byte)(0x80 | (c \u0026 0x3f));\n            } else if (Character.isSurrogate(c)) {\n                int uc \u003d -1;\n                char c2;\n                if (Character.isHighSurrogate(c) \u0026\u0026 sp \u003c sl \u0026\u0026\n                        Character.isLowSurrogate(c2 \u003d StringUTF16.getChar(val, sp))) {\n                    uc \u003d Character.toCodePoint(c, c2);\n                }\n                if (uc \u003c 0) {\n                    if (doReplace) {\n                        dst[dp++] \u003d \u0027?\u0027;\n                    } else {\n                        throwUnmappable(sp - 1);\n                    }\n                } else {\n                    dst[dp++] \u003d (byte)(0xf0 | ((uc \u003e\u003e 18)));\n                    dst[dp++] \u003d (byte)(0x80 | ((uc \u003e\u003e 12) \u0026 0x3f));\n                    dst[dp++] \u003d (byte)(0x80 | ((uc \u003e\u003e  6) \u0026 0x3f));\n                    dst[dp++] \u003d (byte)(0x80 | (uc \u0026 0x3f));\n                    sp++;  // 2 chars\n                }\n            } else {\n                // 3 bytes, 16 bits\n                dst[dp++] \u003d (byte)(0xe0 | ((c \u003e\u003e 12)));\n                dst[dp++] \u003d (byte)(0x80 | ((c \u003e\u003e  6) \u0026 0x3f));\n                dst[dp++] \u003d (byte)(0x80 | (c \u0026 0x3f));\n            }\n        }\n        if (dp \u003d\u003d dst.length) {\n            return dst;\n        }\n        return Arrays.copyOf(dst, dp);\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified array of bytes\n     * using the specified {@linkplain java.nio.charset.Charset charset}.  The\n     * length of the new {@code String} is a function of the charset, and hence\n     * may not be equal to the length of the byte array.\n     *\n     * \u003cp\u003e The behavior of this constructor when the given bytes are not valid\n     * in the given charset is unspecified.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  charsetName\n     *         The name of a supported {@linkplain java.nio.charset.Charset\n     *         charset}\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named charset is not supported\n     *\n     * @since  1.1\n     */\n    public String(byte[] bytes, String charsetName)\n            throws UnsupportedEncodingException {\n        this(lookupCharset(charsetName), bytes, 0, bytes.length);\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified array of\n     * bytes using the specified {@linkplain java.nio.charset.Charset charset}.\n     * The length of the new {@code String} is a function of the charset, and\n     * hence may not be equal to the length of the byte array.\n     *\n     * \u003cp\u003e This method always replaces malformed-input and unmappable-character\n     * sequences with this charset\u0027s default replacement string.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  charset\n     *         The {@linkplain java.nio.charset.Charset charset} to be used to\n     *         decode the {@code bytes}\n     *\n     * @since  1.6\n     */\n    public String(byte[] bytes, Charset charset) {\n        this(Objects.requireNonNull(charset), bytes, 0, bytes.length);\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified subarray of\n     * bytes using the {@link Charset#defaultCharset() default charset}.\n     * The length of the new {@code String} is a function of the charset,\n     * and hence may not be equal to the length of the subarray.\n     *\n     * \u003cp\u003e The behavior of this constructor when the given bytes are not valid\n     * in the default charset is unspecified.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  offset\n     *         The index of the first byte to decode\n     *\n     * @param  length\n     *         The number of bytes to decode\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code length} is negative, or\n     *          {@code offset} is greater than {@code bytes.length - length}\n     *\n     * @since  1.1\n     */\n    public String(byte[] bytes, int offset, int length) {\n        this(Charset.defaultCharset(), bytes, checkBoundsOffCount(offset, length, bytes.length), length);\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified array of bytes\n     * using the {@link Charset#defaultCharset() default charset}. The length\n     * of the new {@code String} is a function of the charset, and hence may not\n     * be equal to the length of the byte array.\n     *\n     * \u003cp\u003e The behavior of this constructor when the given bytes are not valid\n     * in the default charset is unspecified.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @since  1.1\n     */\n    public String(byte[] bytes) {\n        this(Charset.defaultCharset(), bytes, 0, bytes.length);\n    }\n\n    /**\n     * Allocates a new string that contains the sequence of characters\n     * currently contained in the string buffer argument. The contents of the\n     * string buffer are copied; subsequent modification of the string buffer\n     * does not affect the newly created string.\n     *\n     * @param  buffer\n     *         A {@code StringBuffer}\n     */\n    public String(StringBuffer buffer) {\n        this(buffer.toString());\n    }\n\n    /**\n     * Allocates a new string that contains the sequence of characters\n     * currently contained in the string builder argument. The contents of the\n     * string builder are copied; subsequent modification of the string builder\n     * does not affect the newly created string.\n     *\n     * \u003cp\u003e This constructor is provided to ease migration to {@code\n     * StringBuilder}. Obtaining a string from a string builder via the {@code\n     * toString} method is likely to run faster and is generally preferred.\n     *\n     * @param   builder\n     *          A {@code StringBuilder}\n     *\n     * @since  1.5\n     */\n    public String(StringBuilder builder) {\n        this(builder, null);\n    }\n\n    /**\n     * Returns the length of this string.\n     * The length is equal to the number of \u003ca href\u003d\"Character.html#unicode\"\u003eUnicode\n     * code units\u003c/a\u003e in the string.\n     *\n     * @return  the length of the sequence of characters represented by this\n     *          object.\n     */\n    public int length() {\n        return value.length \u003e\u003e coder();\n    }\n\n    /**\n     * Returns {@code true} if, and only if, {@link #length()} is {@code 0}.\n     *\n     * @return {@code true} if {@link #length()} is {@code 0}, otherwise\n     * {@code false}\n     *\n     * @since 1.6\n     */\n    @Override\n    public boolean isEmpty() {\n        return value.length \u003d\u003d 0;\n    }\n\n    /**\n     * Returns the {@code char} value at the\n     * specified index. An index ranges from {@code 0} to\n     * {@code length() - 1}. The first {@code char} value of the sequence\n     * is at index {@code 0}, the next at index {@code 1},\n     * and so on, as for array indexing.\n     *\n     * \u003cp\u003eIf the {@code char} value specified by the index is a\n     * \u003ca href\u003d\"Character.html#unicode\"\u003esurrogate\u003c/a\u003e, the surrogate\n     * value is returned.\n     *\n     * @param      index   the index of the {@code char} value.\n     * @return     the {@code char} value at the specified index of this string.\n     *             The first {@code char} value is at index {@code 0}.\n     * @throws     IndexOutOfBoundsException  if the {@code index}\n     *             argument is negative or not less than the length of this\n     *             string.\n     */\n    public char charAt(int index) {\n        if (isLatin1()) {\n            return StringLatin1.charAt(value, index);\n        } else {\n            return StringUTF16.charAt(value, index);\n        }\n    }\n\n    /**\n     * Returns the character (Unicode code point) at the specified\n     * index. The index refers to {@code char} values\n     * (Unicode code units) and ranges from {@code 0} to\n     * {@link #length()}{@code  - 1}.\n     *\n     * \u003cp\u003e If the {@code char} value specified at the given index\n     * is in the high-surrogate range, the following index is less\n     * than the length of this {@code String}, and the\n     * {@code char} value at the following index is in the\n     * low-surrogate range, then the supplementary code point\n     * corresponding to this surrogate pair is returned. Otherwise,\n     * the {@code char} value at the given index is returned.\n     *\n     * @param      index the index to the {@code char} values\n     * @return     the code point value of the character at the\n     *             {@code index}\n     * @throws     IndexOutOfBoundsException  if the {@code index}\n     *             argument is negative or not less than the length of this\n     *             string.\n     * @since      1.5\n     */\n    public int codePointAt(int index) {\n        if (isLatin1()) {\n            checkIndex(index, value.length);\n            return value[index] \u0026 0xff;\n        }\n        int length \u003d value.length \u003e\u003e 1;\n        checkIndex(index, length);\n        return StringUTF16.codePointAt(value, index, length);\n    }\n\n    /**\n     * Returns the character (Unicode code point) before the specified\n     * index. The index refers to {@code char} values\n     * (Unicode code units) and ranges from {@code 1} to {@link\n     * CharSequence#length() length}.\n     *\n     * \u003cp\u003e If the {@code char} value at {@code (index - 1)}\n     * is in the low-surrogate range, {@code (index - 2)} is not\n     * negative, and the {@code char} value at {@code (index -\n     * 2)} is in the high-surrogate range, then the\n     * supplementary code point value of the surrogate pair is\n     * returned. If the {@code char} value at {@code index -\n     * 1} is an unpaired low-surrogate or a high-surrogate, the\n     * surrogate value is returned.\n     *\n     * @param     index the index following the code point that should be returned\n     * @return    the Unicode code point value before the given index.\n     * @throws    IndexOutOfBoundsException if the {@code index}\n     *            argument is less than 1 or greater than the length\n     *            of this string.\n     * @since     1.5\n     */\n    public int codePointBefore(int index) {\n        int i \u003d index - 1;\n        checkIndex(i, length());\n        if (isLatin1()) {\n            return (value[i] \u0026 0xff);\n        }\n        return StringUTF16.codePointBefore(value, index);\n    }\n\n    /**\n     * Returns the number of Unicode code points in the specified text\n     * range of this {@code String}. The text range begins at the\n     * specified {@code beginIndex} and extends to the\n     * {@code char} at index {@code endIndex - 1}. Thus the\n     * length (in {@code char}s) of the text range is\n     * {@code endIndex-beginIndex}. Unpaired surrogates within\n     * the text range count as one code point each.\n     *\n     * @param beginIndex the index to the first {@code char} of\n     * the text range.\n     * @param endIndex the index after the last {@code char} of\n     * the text range.\n     * @return the number of Unicode code points in the specified text\n     * range\n     * @throws    IndexOutOfBoundsException if the\n     * {@code beginIndex} is negative, or {@code endIndex}\n     * is larger than the length of this {@code String}, or\n     * {@code beginIndex} is larger than {@code endIndex}.\n     * @since  1.5\n     */\n    public int codePointCount(int beginIndex, int endIndex) {\n        Objects.checkFromToIndex(beginIndex, endIndex, length());\n        if (isLatin1()) {\n            return endIndex - beginIndex;\n        }\n        return StringUTF16.codePointCount(value, beginIndex, endIndex);\n    }\n\n    /**\n     * Returns the index within this {@code String} that is\n     * offset from the given {@code index} by\n     * {@code codePointOffset} code points. Unpaired surrogates\n     * within the text range given by {@code index} and\n     * {@code codePointOffset} count as one code point each.\n     *\n     * @param index the index to be offset\n     * @param codePointOffset the offset in code points\n     * @return the index within this {@code String}\n     * @throws    IndexOutOfBoundsException if {@code index}\n     *   is negative or larger than the length of this\n     *   {@code String}, or if {@code codePointOffset} is positive\n     *   and the substring starting with {@code index} has fewer\n     *   than {@code codePointOffset} code points,\n     *   or if {@code codePointOffset} is negative and the substring\n     *   before {@code index} has fewer than the absolute value\n     *   of {@code codePointOffset} code points.\n     * @since 1.5\n     */\n    public int offsetByCodePoints(int index, int codePointOffset) {\n        return Character.offsetByCodePoints(this, index, codePointOffset);\n    }\n\n    /**\n     * Copies characters from this string into the destination character\n     * array.\n     * \u003cp\u003e\n     * The first character to be copied is at index {@code srcBegin};\n     * the last character to be copied is at index {@code srcEnd-1}\n     * (thus the total number of characters to be copied is\n     * {@code srcEnd-srcBegin}). The characters are copied into the\n     * subarray of {@code dst} starting at index {@code dstBegin}\n     * and ending at index:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     *     dstBegin + (srcEnd-srcBegin) - 1\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @param      srcBegin   index of the first character in the string\n     *                        to copy.\n     * @param      srcEnd     index after the last character in the string\n     *                        to copy.\n     * @param      dst        the destination array.\n     * @param      dstBegin   the start offset in the destination array.\n     * @throws    IndexOutOfBoundsException If any of the following\n     *            is true:\n     *            \u003cul\u003e\u003cli\u003e{@code srcBegin} is negative.\n     *            \u003cli\u003e{@code srcBegin} is greater than {@code srcEnd}\n     *            \u003cli\u003e{@code srcEnd} is greater than the length of this\n     *                string\n     *            \u003cli\u003e{@code dstBegin} is negative\n     *            \u003cli\u003e{@code dstBegin+(srcEnd-srcBegin)} is larger than\n     *                {@code dst.length}\u003c/ul\u003e\n     */\n    public void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin) {\n        checkBoundsBeginEnd(srcBegin, srcEnd, length());\n        checkBoundsOffCount(dstBegin, srcEnd - srcBegin, dst.length);\n        if (isLatin1()) {\n            StringLatin1.getChars(value, srcBegin, srcEnd, dst, dstBegin);\n        } else {\n            StringUTF16.getChars(value, srcBegin, srcEnd, dst, dstBegin);\n        }\n    }\n\n    /**\n     * Copies characters from this string into the destination byte array. Each\n     * byte receives the 8 low-order bits of the corresponding character. The\n     * eight high-order bits of each character are not copied and do not\n     * participate in the transfer in any way.\n     *\n     * \u003cp\u003e The first character to be copied is at index {@code srcBegin}; the\n     * last character to be copied is at index {@code srcEnd-1}.  The total\n     * number of characters to be copied is {@code srcEnd-srcBegin}. The\n     * characters, converted to bytes, are copied into the subarray of {@code\n     * dst} starting at index {@code dstBegin} and ending at index:\n     *\n     * \u003cblockquote\u003e\u003cpre\u003e\n     *     dstBegin + (srcEnd-srcBegin) - 1\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @deprecated  This method does not properly convert characters into\n     * bytes.  As of JDK\u0026nbsp;1.1, the preferred way to do this is via the\n     * {@link #getBytes()} method, which uses the {@link Charset#defaultCharset()\n     * default charset}.\n     *\n     * @param  srcBegin\n     *         Index of the first character in the string to copy\n     *\n     * @param  srcEnd\n     *         Index after the last character in the string to copy\n     *\n     * @param  dst\n     *         The destination array\n     *\n     * @param  dstBegin\n     *         The start offset in the destination array\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If any of the following is true:\n     *          \u003cul\u003e\n     *            \u003cli\u003e {@code srcBegin} is negative\n     *            \u003cli\u003e {@code srcBegin} is greater than {@code srcEnd}\n     *            \u003cli\u003e {@code srcEnd} is greater than the length of this String\n     *            \u003cli\u003e {@code dstBegin} is negative\n     *            \u003cli\u003e {@code dstBegin+(srcEnd-srcBegin)} is larger than {@code\n     *                 dst.length}\n     *          \u003c/ul\u003e\n     */\n    @Deprecated(since\u003d\"1.1\")\n    public void getBytes(int srcBegin, int srcEnd, byte[] dst, int dstBegin) {\n        checkBoundsBeginEnd(srcBegin, srcEnd, length());\n        Objects.requireNonNull(dst);\n        checkBoundsOffCount(dstBegin, srcEnd - srcBegin, dst.length);\n        if (isLatin1()) {\n            StringLatin1.getBytes(value, srcBegin, srcEnd, dst, dstBegin);\n        } else {\n            StringUTF16.getBytes(value, srcBegin, srcEnd, dst, dstBegin);\n        }\n    }\n\n    /**\n     * Encodes this {@code String} into a sequence of bytes using the named\n     * charset, storing the result into a new byte array.\n     *\n     * \u003cp\u003e The behavior of this method when this string cannot be encoded in\n     * the given charset is unspecified.  The {@link\n     * java.nio.charset.CharsetEncoder} class should be used when more control\n     * over the encoding process is required.\n     *\n     * @param  charsetName\n     *         The name of a supported {@linkplain java.nio.charset.Charset\n     *         charset}\n     *\n     * @return  The resultant byte array\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named charset is not supported\n     *\n     * @since  1.1\n     */\n    public byte[] getBytes(String charsetName)\n            throws UnsupportedEncodingException {\n        return encode(lookupCharset(charsetName), coder(), value);\n    }\n\n    /**\n     * Encodes this {@code String} into a sequence of bytes using the given\n     * {@linkplain java.nio.charset.Charset charset}, storing the result into a\n     * new byte array.\n     *\n     * \u003cp\u003e This method always replaces malformed-input and unmappable-character\n     * sequences with this charset\u0027s default replacement byte array.  The\n     * {@link java.nio.charset.CharsetEncoder} class should be used when more\n     * control over the encoding process is required.\n     *\n     * @param  charset\n     *         The {@linkplain java.nio.charset.Charset} to be used to encode\n     *         the {@code String}\n     *\n     * @return  The resultant byte array\n     *\n     * @since  1.6\n     */\n    public byte[] getBytes(Charset charset) {\n        if (charset \u003d\u003d null) throw new NullPointerException();\n        return encode(charset, coder(), value);\n     }\n\n    /**\n     * Encodes this {@code String} into a sequence of bytes using the\n     * {@link Charset#defaultCharset() default charset}, storing the result\n     * into a new byte array.\n     *\n     * \u003cp\u003e The behavior of this method when this string cannot be encoded in\n     * the default charset is unspecified.  The {@link\n     * java.nio.charset.CharsetEncoder} class should be used when more control\n     * over the encoding process is required.\n     *\n     * @return  The resultant byte array\n     *\n     * @since      1.1\n     */\n    public byte[] getBytes() {\n        return encode(Charset.defaultCharset(), coder(), value);\n    }\n\n    /**\n     * Compares this string to the specified object.  The result is {@code\n     * true} if and only if the argument is not {@code null} and is a {@code\n     * String} object that represents the same sequence of characters as this\n     * object.\n     *\n     * \u003cp\u003eFor finer-grained String comparison, refer to\n     * {@link java.text.Collator}.\n     *\n     * @param  anObject\n     *         The object to compare this {@code String} against\n     *\n     * @return  {@code true} if the given object represents a {@code String}\n     *          equivalent to this string, {@code false} otherwise\n     *\n     * @see  #compareTo(String)\n     * @see  #equalsIgnoreCase(String)\n     */\n    public boolean equals(Object anObject) {\n        if (this \u003d\u003d anObject) {\n            return true;\n        }\n        return (anObject instanceof String aString)\n                \u0026\u0026 (!COMPACT_STRINGS || this.coder \u003d\u003d aString.coder)\n                \u0026\u0026 StringLatin1.equals(value, aString.value);\n    }\n\n    /**\n     * Compares this string to the specified {@code StringBuffer}.  The result\n     * is {@code true} if and only if this {@code String} represents the same\n     * sequence of characters as the specified {@code StringBuffer}. This method\n     * synchronizes on the {@code StringBuffer}.\n     *\n     * \u003cp\u003eFor finer-grained String comparison, refer to\n     * {@link java.text.Collator}.\n     *\n     * @param  sb\n     *         The {@code StringBuffer} to compare this {@code String} against\n     *\n     * @return  {@code true} if this {@code String} represents the same\n     *          sequence of characters as the specified {@code StringBuffer},\n     *          {@code false} otherwise\n     *\n     * @since  1.4\n     */\n    public boolean contentEquals(StringBuffer sb) {\n        return contentEquals((CharSequence)sb);\n    }\n\n    private boolean nonSyncContentEquals(AbstractStringBuilder sb) {\n        int len \u003d length();\n        if (len !\u003d sb.length()) {\n            return false;\n        }\n        byte v1[] \u003d value;\n        byte v2[] \u003d sb.getValue();\n        byte coder \u003d coder();\n        if (coder \u003d\u003d sb.getCoder()) {\n            int n \u003d v1.length;\n            for (int i \u003d 0; i \u003c n; i++) {\n                if (v1[i] !\u003d v2[i]) {\n                    return false;\n                }\n            }\n        } else {\n            if (coder !\u003d LATIN1) {  // utf16 str and latin1 abs can never be \"equal\"\n                return false;\n            }\n            return StringUTF16.contentEquals(v1, v2, len);\n        }\n        return true;\n    }\n\n    /**\n     * Compares this string to the specified {@code CharSequence}.  The\n     * result is {@code true} if and only if this {@code String} represents the\n     * same sequence of char values as the specified sequence. Note that if the\n     * {@code CharSequence} is a {@code StringBuffer} then the method\n     * synchronizes on it.\n     *\n     * \u003cp\u003eFor finer-grained String comparison, refer to\n     * {@link java.text.Collator}.\n     *\n     * @param  cs\n     *         The sequence to compare this {@code String} against\n     *\n     * @return  {@code true} if this {@code String} represents the same\n     *          sequence of char values as the specified sequence, {@code\n     *          false} otherwise\n     *\n     * @since  1.5\n     */\n    public boolean contentEquals(CharSequence cs) {\n        // Argument is a StringBuffer, StringBuilder\n        if (cs instanceof AbstractStringBuilder) {\n            if (cs instanceof StringBuffer) {\n                synchronized(cs) {\n                   return nonSyncContentEquals((AbstractStringBuilder)cs);\n                }\n            } else {\n                return nonSyncContentEquals((AbstractStringBuilder)cs);\n            }\n        }\n        // Argument is a String\n        if (cs instanceof String) {\n            return equals(cs);\n        }\n        // Argument is a generic CharSequence\n        int n \u003d cs.length();\n        if (n !\u003d length()) {\n            return false;\n        }\n        byte[] val \u003d this.value;\n        if (isLatin1()) {\n            for (int i \u003d 0; i \u003c n; i++) {\n                if ((val[i] \u0026 0xff) !\u003d cs.charAt(i)) {\n                    return false;\n                }\n            }\n        } else {\n            if (!StringUTF16.contentEquals(val, cs, n)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Compares this {@code String} to another {@code String}, ignoring case\n     * considerations.  Two strings are considered equal ignoring case if they\n     * are of the same length and corresponding Unicode code points in the two\n     * strings are equal ignoring case.\n     *\n     * \u003cp\u003e Two Unicode code points are considered the same\n     * ignoring case if at least one of the following is true:\n     * \u003cul\u003e\n     *   \u003cli\u003e The two Unicode code points are the same (as compared by the\n     *        {@code \u003d\u003d} operator)\n     *   \u003cli\u003e Calling {@code Character.toLowerCase(Character.toUpperCase(int))}\n     *        on each Unicode code point produces the same result\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eNote that this method does \u003cem\u003enot\u003c/em\u003e take locale into account, and\n     * will result in unsatisfactory results for certain locales.  The\n     * {@link java.text.Collator} class provides locale-sensitive comparison.\n     *\n     * @param  anotherString\n     *         The {@code String} to compare this {@code String} against\n     *\n     * @return  {@code true} if the argument is not {@code null} and it\n     *          represents an equivalent {@code String} ignoring case; {@code\n     *          false} otherwise\n     *\n     * @see  #equals(Object)\n     * @see  #codePoints()\n     */\n    public boolean equalsIgnoreCase(String anotherString) {\n        return (this \u003d\u003d anotherString) ? true\n                : (anotherString !\u003d null)\n                \u0026\u0026 (anotherString.length() \u003d\u003d length())\n                \u0026\u0026 regionMatches(true, 0, anotherString, 0, length());\n    }\n\n    /**\n     * Compares two strings lexicographically.\n     * The comparison is based on the Unicode value of each character in\n     * the strings. The character sequence represented by this\n     * {@code String} object is compared lexicographically to the\n     * character sequence represented by the argument string. The result is\n     * a negative integer if this {@code String} object\n     * lexicographically precedes the argument string. The result is a\n     * positive integer if this {@code String} object lexicographically\n     * follows the argument string. The result is zero if the strings\n     * are equal; {@code compareTo} returns {@code 0} exactly when\n     * the {@link #equals(Object)} method would return {@code true}.\n     * \u003cp\u003e\n     * This is the definition of lexicographic ordering. If two strings are\n     * different, then either they have different characters at some index\n     * that is a valid index for both strings, or their lengths are different,\n     * or both. If they have different characters at one or more index\n     * positions, let \u003ci\u003ek\u003c/i\u003e be the smallest such index; then the string\n     * whose character at position \u003ci\u003ek\u003c/i\u003e has the smaller value, as\n     * determined by using the {@code \u003c} operator, lexicographically precedes the\n     * other string. In this case, {@code compareTo} returns the\n     * difference of the two character values at position {@code k} in\n     * the two string -- that is, the value:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.charAt(k)-anotherString.charAt(k)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * If there is no index position at which they differ, then the shorter\n     * string lexicographically precedes the longer string. In this case,\n     * {@code compareTo} returns the difference of the lengths of the\n     * strings -- that is, the value:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.length()-anotherString.length()\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * \u003cp\u003eFor finer-grained String comparison, refer to\n     * {@link java.text.Collator}.\n     *\n     * @param   anotherString   the {@code String} to be compared.\n     * @return  the value {@code 0} if the argument string is equal to\n     *          this string; a value less than {@code 0} if this string\n     *          is lexicographically less than the string argument; and a\n     *          value greater than {@code 0} if this string is\n     *          lexicographically greater than the string argument.\n     */\n    public int compareTo(String anotherString) {\n        byte v1[] \u003d value;\n        byte v2[] \u003d anotherString.value;\n        byte coder \u003d coder();\n        if (coder \u003d\u003d anotherString.coder()) {\n            return coder \u003d\u003d LATIN1 ? StringLatin1.compareTo(v1, v2)\n                                   : StringUTF16.compareTo(v1, v2);\n        }\n        return coder \u003d\u003d LATIN1 ? StringLatin1.compareToUTF16(v1, v2)\n                               : StringUTF16.compareToLatin1(v1, v2);\n     }\n\n    /**\n     * A Comparator that orders {@code String} objects as by\n     * {@link #compareToIgnoreCase(String) compareToIgnoreCase}.\n     * This comparator is serializable.\n     * \u003cp\u003e\n     * Note that this Comparator does \u003cem\u003enot\u003c/em\u003e take locale into account,\n     * and will result in an unsatisfactory ordering for certain locales.\n     * The {@link java.text.Collator} class provides locale-sensitive comparison.\n     *\n     * @see     java.text.Collator\n     * @since   1.2\n     */\n    public static final Comparator\u003cString\u003e CASE_INSENSITIVE_ORDER\n                                         \u003d new CaseInsensitiveComparator();\n\n    /**\n     * CaseInsensitiveComparator for Strings.\n     */\n    private static class CaseInsensitiveComparator\n            implements Comparator\u003cString\u003e, java.io.Serializable {\n        // use serialVersionUID from JDK 1.2.2 for interoperability\n        @java.io.Serial\n        private static final long serialVersionUID \u003d 8575799808933029326L;\n\n        public int compare(String s1, String s2) {\n            byte v1[] \u003d s1.value;\n            byte v2[] \u003d s2.value;\n            byte coder \u003d s1.coder();\n            if (coder \u003d\u003d s2.coder()) {\n                return coder \u003d\u003d LATIN1 ? StringLatin1.compareToCI(v1, v2)\n                                       : StringUTF16.compareToCI(v1, v2);\n            }\n            return coder \u003d\u003d LATIN1 ? StringLatin1.compareToCI_UTF16(v1, v2)\n                                   : StringUTF16.compareToCI_Latin1(v1, v2);\n        }\n\n        /** Replaces the de-serialized object. */\n        @java.io.Serial\n        private Object readResolve() { return CASE_INSENSITIVE_ORDER; }\n    }\n\n    /**\n     * Compares two strings lexicographically, ignoring case\n     * differences. This method returns an integer whose sign is that of\n     * calling {@code compareTo} with case folded versions of the strings\n     * where case differences have been eliminated by calling\n     * {@code Character.toLowerCase(Character.toUpperCase(int))} on\n     * each Unicode code point.\n     * \u003cp\u003e\n     * Note that this method does \u003cem\u003enot\u003c/em\u003e take locale into account,\n     * and will result in an unsatisfactory ordering for certain locales.\n     * The {@link java.text.Collator} class provides locale-sensitive comparison.\n     *\n     * @param   str   the {@code String} to be compared.\n     * @return  a negative integer, zero, or a positive integer as the\n     *          specified String is greater than, equal to, or less\n     *          than this String, ignoring case considerations.\n     * @see     java.text.Collator\n     * @see     #codePoints()\n     * @since   1.2\n     */\n    public int compareToIgnoreCase(String str) {\n        return CASE_INSENSITIVE_ORDER.compare(this, str);\n    }\n\n    /**\n     * Tests if two string regions are equal.\n     * \u003cp\u003e\n     * A substring of this {@code String} object is compared to a substring\n     * of the argument other. The result is true if these substrings\n     * represent identical character sequences. The substring of this\n     * {@code String} object to be compared begins at index {@code toffset}\n     * and has length {@code len}. The substring of other to be compared\n     * begins at index {@code ooffset} and has length {@code len}. The\n     * result is {@code false} if and only if at least one of the following\n     * is true:\n     * \u003cul\u003e\u003cli\u003e{@code toffset} is negative.\n     * \u003cli\u003e{@code ooffset} is negative.\n     * \u003cli\u003e{@code toffset+len} is greater than the length of this\n     * {@code String} object.\n     * \u003cli\u003e{@code ooffset+len} is greater than the length of the other\n     * argument.\n     * \u003cli\u003eThere is some nonnegative integer \u003ci\u003ek\u003c/i\u003e less than {@code len}\n     * such that:\n     * {@code this.charAt(toffset + }\u003ci\u003ek\u003c/i\u003e{@code ) !\u003d other.charAt(ooffset + }\n     * \u003ci\u003ek\u003c/i\u003e{@code )}\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eNote that this method does \u003cem\u003enot\u003c/em\u003e take locale into account.  The\n     * {@link java.text.Collator} class provides locale-sensitive comparison.\n     *\n     * @param   toffset   the starting offset of the subregion in this string.\n     * @param   other     the string argument.\n     * @param   ooffset   the starting offset of the subregion in the string\n     *                    argument.\n     * @param   len       the number of characters to compare.\n     * @return  {@code true} if the specified subregion of this string\n     *          exactly matches the specified subregion of the string argument;\n     *          {@code false} otherwise.\n     */\n    public boolean regionMatches(int toffset, String other, int ooffset, int len) {\n        byte tv[] \u003d value;\n        byte ov[] \u003d other.value;\n        // Note: toffset, ooffset, or len might be near -1\u003e\u003e\u003e1.\n        if ((ooffset \u003c 0) || (toffset \u003c 0) ||\n             (toffset \u003e (long)length() - len) ||\n             (ooffset \u003e (long)other.length() - len)) {\n            return false;\n        }\n        byte coder \u003d coder();\n        if (coder \u003d\u003d other.coder()) {\n            if (!isLatin1() \u0026\u0026 (len \u003e 0)) {\n                toffset \u003d toffset \u003c\u003c 1;\n                ooffset \u003d ooffset \u003c\u003c 1;\n                len \u003d len \u003c\u003c 1;\n            }\n            while (len-- \u003e 0) {\n                if (tv[toffset++] !\u003d ov[ooffset++]) {\n                    return false;\n                }\n            }\n        } else {\n            if (coder \u003d\u003d LATIN1) {\n                while (len-- \u003e 0) {\n                    if (StringLatin1.getChar(tv, toffset++) !\u003d\n                        StringUTF16.getChar(ov, ooffset++)) {\n                        return false;\n                    }\n                }\n            } else {\n                while (len-- \u003e 0) {\n                    if (StringUTF16.getChar(tv, toffset++) !\u003d\n                        StringLatin1.getChar(ov, ooffset++)) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Tests if two string regions are equal.\n     * \u003cp\u003e\n     * A substring of this {@code String} object is compared to a substring\n     * of the argument {@code other}. The result is {@code true} if these\n     * substrings represent Unicode code point sequences that are the same,\n     * ignoring case if and only if {@code ignoreCase} is true.\n     * The sequences {@code tsequence} and {@code osequence} are compared,\n     * where {@code tsequence} is the sequence produced as if by calling\n     * {@code this.substring(toffset, toffset + len).codePoints()} and\n     * {@code osequence} is the sequence produced as if by calling\n     * {@code other.substring(ooffset, ooffset + len).codePoints()}.\n     * The result is {@code true} if and only if all of the following\n     * are true:\n     * \u003cul\u003e\u003cli\u003e{@code toffset} is non-negative.\n     * \u003cli\u003e{@code ooffset} is non-negative.\n     * \u003cli\u003e{@code toffset+len} is less than or equal to the length of this\n     * {@code String} object.\n     * \u003cli\u003e{@code ooffset+len} is less than or equal to the length of the other\n     * argument.\n     * \u003cli\u003eif {@code ignoreCase} is {@code false}, all pairs of corresponding Unicode\n     * code points are equal integer values; or if {@code ignoreCase} is {@code true},\n     * {@link Character#toLowerCase(int) Character.toLowerCase(}\n     * {@link Character#toUpperCase(int)}{@code )} on all pairs of Unicode code points\n     * results in equal integer values.\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eNote that this method does \u003cem\u003enot\u003c/em\u003e take locale into account,\n     * and will result in unsatisfactory results for certain locales when\n     * {@code ignoreCase} is {@code true}.  The {@link java.text.Collator} class\n     * provides locale-sensitive comparison.\n     *\n     * @param   ignoreCase   if {@code true}, ignore case when comparing\n     *                       characters.\n     * @param   toffset      the starting offset of the subregion in this\n     *                       string.\n     * @param   other        the string argument.\n     * @param   ooffset      the starting offset of the subregion in the string\n     *                       argument.\n     * @param   len          the number of characters (Unicode code units -\n     *                       16bit {@code char} value) to compare.\n     * @return  {@code true} if the specified subregion of this string\n     *          matches the specified subregion of the string argument;\n     *          {@code false} otherwise. Whether the matching is exact\n     *          or case insensitive depends on the {@code ignoreCase}\n     *          argument.\n     * @see     #codePoints()\n     */\n    public boolean regionMatches(boolean ignoreCase, int toffset,\n            String other, int ooffset, int len) {\n        if (!ignoreCase) {\n            return regionMatches(toffset, other, ooffset, len);\n        }\n        // Note: toffset, ooffset, or len might be near -1\u003e\u003e\u003e1.\n        if ((ooffset \u003c 0) || (toffset \u003c 0)\n                || (toffset \u003e (long)length() - len)\n                || (ooffset \u003e (long)other.length() - len)) {\n            return false;\n        }\n        byte tv[] \u003d value;\n        byte ov[] \u003d other.value;\n        byte coder \u003d coder();\n        if (coder \u003d\u003d other.coder()) {\n            return coder \u003d\u003d LATIN1\n              ? StringLatin1.regionMatchesCI(tv, toffset, ov, ooffset, len)\n              : StringUTF16.regionMatchesCI(tv, toffset, ov, ooffset, len);\n        }\n        return coder \u003d\u003d LATIN1\n              ? StringLatin1.regionMatchesCI_UTF16(tv, toffset, ov, ooffset, len)\n              : StringUTF16.regionMatchesCI_Latin1(tv, toffset, ov, ooffset, len);\n    }\n\n    /**\n     * Tests if the substring of this string beginning at the\n     * specified index starts with the specified prefix.\n     *\n     * @param   prefix    the prefix.\n     * @param   toffset   where to begin looking in this string.\n     * @return  {@code true} if the character sequence represented by the\n     *          argument is a prefix of the substring of this object starting\n     *          at index {@code toffset}; {@code false} otherwise.\n     *          The result is {@code false} if {@code toffset} is\n     *          negative or greater than the length of this\n     *          {@code String} object; otherwise the result is the same\n     *          as the result of the expression\n     *          \u003cpre\u003e\n     *          this.substring(toffset).startsWith(prefix)\n     *          \u003c/pre\u003e\n     */\n    public boolean startsWith(String prefix, int toffset) {\n        // Note: toffset might be near -1\u003e\u003e\u003e1.\n        if (toffset \u003c 0 || toffset \u003e length() - prefix.length()) {\n            return false;\n        }\n        byte ta[] \u003d value;\n        byte pa[] \u003d prefix.value;\n        int po \u003d 0;\n        int pc \u003d pa.length;\n        byte coder \u003d coder();\n        if (coder \u003d\u003d prefix.coder()) {\n            int to \u003d (coder \u003d\u003d LATIN1) ? toffset : toffset \u003c\u003c 1;\n            while (po \u003c pc) {\n                if (ta[to++] !\u003d pa[po++]) {\n                    return false;\n                }\n            }\n        } else {\n            if (coder \u003d\u003d LATIN1) {  // \u0026\u0026 pcoder \u003d\u003d UTF16\n                return false;\n            }\n            // coder \u003d\u003d UTF16 \u0026\u0026 pcoder \u003d\u003d LATIN1)\n            while (po \u003c pc) {\n                if (StringUTF16.getChar(ta, toffset++) !\u003d (pa[po++] \u0026 0xff)) {\n                    return false;\n               }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Tests if this string starts with the specified prefix.\n     *\n     * @param   prefix   the prefix.\n     * @return  {@code true} if the character sequence represented by the\n     *          argument is a prefix of the character sequence represented by\n     *          this string; {@code false} otherwise.\n     *          Note also that {@code true} will be returned if the\n     *          argument is an empty string or is equal to this\n     *          {@code String} object as determined by the\n     *          {@link #equals(Object)} method.\n     * @since   1.0\n     */\n    public boolean startsWith(String prefix) {\n        return startsWith(prefix, 0);\n    }\n\n    /**\n     * Tests if this string ends with the specified suffix.\n     *\n     * @param   suffix   the suffix.\n     * @return  {@code true} if the character sequence represented by the\n     *          argument is a suffix of the character sequence represented by\n     *          this object; {@code false} otherwise. Note that the\n     *          result will be {@code true} if the argument is the\n     *          empty string or is equal to this {@code String} object\n     *          as determined by the {@link #equals(Object)} method.\n     */\n    public boolean endsWith(String suffix) {\n        return startsWith(suffix, length() - suffix.length());\n    }\n\n    /**\n     * Returns a hash code for this string. The hash code for a\n     * {@code String} object is computed as\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * using {@code int} arithmetic, where {@code s[i]} is the\n     * \u003ci\u003ei\u003c/i\u003eth character of the string, {@code n} is the length of\n     * the string, and {@code ^} indicates exponentiation.\n     * (The hash value of the empty string is zero.)\n     *\n     * @return  a hash code value for this object.\n     */\n    public int hashCode() {\n        // The hash or hashIsZero fields are subject to a benign data race,\n        // making it crucial to ensure that any observable result of the\n        // calculation in this method stays correct under any possible read of\n        // these fields. Necessary restrictions to allow this to be correct\n        // without explicit memory fences or similar concurrency primitives is\n        // that we can ever only write to one of these two fields for a given\n        // String instance, and that the computation is idempotent and derived\n        // from immutable state\n        int h \u003d hash;\n        if (h \u003d\u003d 0 \u0026\u0026 !hashIsZero) {\n            h \u003d isLatin1() ? StringLatin1.hashCode(value)\n                           : StringUTF16.hashCode(value);\n            if (h \u003d\u003d 0) {\n                hashIsZero \u003d true;\n            } else {\n                hash \u003d h;\n            }\n        }\n        return h;\n    }\n\n    /**\n     * Returns the index within this string of the first occurrence of\n     * the specified character. If a character with value\n     * {@code ch} occurs in the character sequence represented by\n     * this {@code String} object, then the index (in Unicode\n     * code units) of the first such occurrence is returned. For\n     * values of {@code ch} in the range from 0 to 0xFFFF\n     * (inclusive), this is the smallest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.charAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. For other values of {@code ch}, it is the\n     * smallest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.codePointAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. In either case, if no such character occurs in this\n     * string, then {@code -1} is returned.\n     *\n     * @param   ch   a character (Unicode code point).\n     * @return  the index of the first occurrence of the character in the\n     *          character sequence represented by this object, or\n     *          {@code -1} if the character does not occur.\n     */\n    public int indexOf(int ch) {\n        return indexOf(ch, 0);\n    }\n\n    /**\n     * Returns the index within this string of the first occurrence of the\n     * specified character, starting the search at the specified index.\n     * \u003cp\u003e\n     * If a character with value {@code ch} occurs in the\n     * character sequence represented by this {@code String}\n     * object at an index no smaller than {@code fromIndex}, then\n     * the index of the first such occurrence is returned. For values\n     * of {@code ch} in the range from 0 to 0xFFFF (inclusive),\n     * this is the smallest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * (this.charAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch) {@code \u0026\u0026} (\u003ci\u003ek\u003c/i\u003e \u0026gt;\u003d fromIndex)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. For other values of {@code ch}, it is the\n     * smallest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * (this.codePointAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch) {@code \u0026\u0026} (\u003ci\u003ek\u003c/i\u003e \u0026gt;\u003d fromIndex)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. In either case, if no such character occurs in this\n     * string at or after position {@code fromIndex}, then\n     * {@code -1} is returned.\n     *\n     * \u003cp\u003e\n     * There is no restriction on the value of {@code fromIndex}. If it\n     * is negative, it has the same effect as if it were zero: this entire\n     * string may be searched. If it is greater than the length of this\n     * string, it has the same effect as if it were equal to the length of\n     * this string: {@code -1} is returned.\n     *\n     * \u003cp\u003eAll indices are specified in {@code char} values\n     * (Unicode code units).\n     *\n     * @param   ch          a character (Unicode code point).\n     * @param   fromIndex   the index to start the search from.\n     * @return  the index of the first occurrence of the character in the\n     *          character sequence represented by this object that is greater\n     *          than or equal to {@code fromIndex}, or {@code -1}\n     *          if the character does not occur.\n     */\n    public int indexOf(int ch, int fromIndex) {\n        return isLatin1() ? StringLatin1.indexOf(value, ch, fromIndex)\n                          : StringUTF16.indexOf(value, ch, fromIndex);\n    }\n\n    /**\n     * Returns the index within this string of the last occurrence of\n     * the specified character. For values of {@code ch} in the\n     * range from 0 to 0xFFFF (inclusive), the index (in Unicode code\n     * units) returned is the largest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.charAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. For other values of {@code ch}, it is the\n     * largest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.codePointAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true.  In either case, if no such character occurs in this\n     * string, then {@code -1} is returned.  The\n     * {@code String} is searched backwards starting at the last\n     * character.\n     *\n     * @param   ch   a character (Unicode code point).\n     * @return  the index of the last occurrence of the character in the\n     *          character sequence represented by this object, or\n     *          {@code -1} if the character does not occur.\n     */\n    public int lastIndexOf(int ch) {\n        return lastIndexOf(ch, length() - 1);\n    }\n\n    /**\n     * Returns the index within this string of the last occurrence of\n     * the specified character, searching backward starting at the\n     * specified index. For values of {@code ch} in the range\n     * from 0 to 0xFFFF (inclusive), the index returned is the largest\n     * value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * (this.charAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch) {@code \u0026\u0026} (\u003ci\u003ek\u003c/i\u003e \u0026lt;\u003d fromIndex)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. For other values of {@code ch}, it is the\n     * largest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * (this.codePointAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch) {@code \u0026\u0026} (\u003ci\u003ek\u003c/i\u003e \u0026lt;\u003d fromIndex)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. In either case, if no such character occurs in this\n     * string at or before position {@code fromIndex}, then\n     * {@code -1} is returned.\n     *\n     * \u003cp\u003eAll indices are specified in {@code char} values\n     * (Unicode code units).\n     *\n     * @param   ch          a character (Unicode code point).\n     * @param   fromIndex   the index to start the search from. There is no\n     *          restriction on the value of {@code fromIndex}. If it is\n     *          greater than or equal to the length of this string, it has\n     *          the same effect as if it were equal to one less than the\n     *          length of this string: this entire string may be searched.\n     *          If it is negative, it has the same effect as if it were -1:\n     *          -1 is returned.\n     * @return  the index of the last occurrence of the character in the\n     *          character sequence represented by this object that is less\n     *          than or equal to {@code fromIndex}, or {@code -1}\n     *          if the character does not occur before that point.\n     */\n    public int lastIndexOf(int ch, int fromIndex) {\n        return isLatin1() ? StringLatin1.lastIndexOf(value, ch, fromIndex)\n                          : StringUTF16.lastIndexOf(value, ch, fromIndex);\n    }\n\n    /**\n     * Returns the index within this string of the first occurrence of the\n     * specified substring.\n     *\n     * \u003cp\u003eThe returned index is the smallest value {@code k} for which:\n     * \u003cpre\u003e{@code\n     * this.startsWith(str, k)\n     * }\u003c/pre\u003e\n     * If no such value of {@code k} exists, then {@code -1} is returned.\n     *\n     * @param   str   the substring to search for.\n     * @return  the index of the first occurrence of the specified substring,\n     *          or {@code -1} if there is no such occurrence.\n     */\n    public int indexOf(String str) {\n        byte coder \u003d coder();\n        if (coder \u003d\u003d str.coder()) {\n            return isLatin1() ? StringLatin1.indexOf(value, str.value)\n                              : StringUTF16.indexOf(value, str.value);\n        }\n        if (coder \u003d\u003d LATIN1) {  // str.coder \u003d\u003d UTF16\n            return -1;\n        }\n        return StringUTF16.indexOfLatin1(value, str.value);\n    }\n\n    /**\n     * Returns the index within this string of the first occurrence of the\n     * specified substring, starting at the specified index.\n     *\n     * \u003cp\u003eThe returned index is the smallest value {@code k} for which:\n     * \u003cpre\u003e{@code\n     *     k \u003e\u003d Math.min(fromIndex, this.length()) \u0026\u0026\n     *                   this.startsWith(str, k)\n     * }\u003c/pre\u003e\n     * If no such value of {@code k} exists, then {@code -1} is returned.\n     *\n     * @param   str         the substring to search for.\n     * @param   fromIndex   the index from which to start the search.\n     * @return  the index of the first occurrence of the specified substring,\n     *          starting at the specified index,\n     *          or {@code -1} if there is no such occurrence.\n     */\n    public int indexOf(String str, int fromIndex) {\n        return indexOf(value, coder(), length(), str, fromIndex);\n    }\n\n    /**\n     * Code shared by String and AbstractStringBuilder to do searches. The\n     * source is the character array being searched, and the target\n     * is the string being searched for.\n     *\n     * @param   src       the characters being searched.\n     * @param   srcCoder  the coder of the source string.\n     * @param   srcCount  length of the source string.\n     * @param   tgtStr    the characters being searched for.\n     * @param   fromIndex the index to begin searching from.\n     */\n    static int indexOf(byte[] src, byte srcCoder, int srcCount,\n                       String tgtStr, int fromIndex) {\n        byte[] tgt    \u003d tgtStr.value;\n        byte tgtCoder \u003d tgtStr.coder();\n        int tgtCount  \u003d tgtStr.length();\n\n        if (fromIndex \u003e\u003d srcCount) {\n            return (tgtCount \u003d\u003d 0 ? srcCount : -1);\n        }\n        if (fromIndex \u003c 0) {\n            fromIndex \u003d 0;\n        }\n        if (tgtCount \u003d\u003d 0) {\n            return fromIndex;\n        }\n        if (tgtCount \u003e srcCount) {\n            return -1;\n        }\n        if (srcCoder \u003d\u003d tgtCoder) {\n            return srcCoder \u003d\u003d LATIN1\n                ? StringLatin1.indexOf(src, srcCount, tgt, tgtCount, fromIndex)\n                : StringUTF16.indexOf(src, srcCount, tgt, tgtCount, fromIndex);\n        }\n        if (srcCoder \u003d\u003d LATIN1) {    //  \u0026\u0026 tgtCoder \u003d\u003d UTF16\n            return -1;\n        }\n        // srcCoder \u003d\u003d UTF16 \u0026\u0026 tgtCoder \u003d\u003d LATIN1) {\n        return StringUTF16.indexOfLatin1(src, srcCount, tgt, tgtCount, fromIndex);\n    }\n\n    /**\n     * Returns the index within this string of the last occurrence of the\n     * specified substring.  The last occurrence of the empty string \"\"\n     * is considered to occur at the index value {@code this.length()}.\n     *\n     * \u003cp\u003eThe returned index is the largest value {@code k} for which:\n     * \u003cpre\u003e{@code\n     * this.startsWith(str, k)\n     * }\u003c/pre\u003e\n     * If no such value of {@code k} exists, then {@code -1} is returned.\n     *\n     * @param   str   the substring to search for.\n     * @return  the index of the last occurrence of the specified substring,\n     *          or {@code -1} if there is no such occurrence.\n     */\n    public int lastIndexOf(String str) {\n        return lastIndexOf(str, length());\n    }\n\n    /**\n     * Returns the index within this string of the last occurrence of the\n     * specified substring, searching backward starting at the specified index.\n     *\n     * \u003cp\u003eThe returned index is the largest value {@code k} for which:\n     * \u003cpre\u003e{@code\n     *     k \u003c\u003d Math.min(fromIndex, this.length()) \u0026\u0026\n     *                   this.startsWith(str, k)\n     * }\u003c/pre\u003e\n     * If no such value of {@code k} exists, then {@code -1} is returned.\n     *\n     * @param   str         the substring to search for.\n     * @param   fromIndex   the index to start the search from.\n     * @return  the index of the last occurrence of the specified substring,\n     *          searching backward from the specified index,\n     *          or {@code -1} if there is no such occurrence.\n     */\n    public int lastIndexOf(String str, int fromIndex) {\n        return lastIndexOf(value, coder(), length(), str, fromIndex);\n    }\n\n    /**\n     * Code shared by String and AbstractStringBuilder to do searches. The\n     * source is the character array being searched, and the target\n     * is the string being searched for.\n     *\n     * @param   src         the characters being searched.\n     * @param   srcCoder    coder handles the mapping between bytes/chars\n     * @param   srcCount    count of the source string.\n     * @param   tgtStr      the characters being searched for.\n     * @param   fromIndex   the index to begin searching from.\n     */\n    static int lastIndexOf(byte[] src, byte srcCoder, int srcCount,\n                           String tgtStr, int fromIndex) {\n        byte[] tgt \u003d tgtStr.value;\n        byte tgtCoder \u003d tgtStr.coder();\n        int tgtCount \u003d tgtStr.length();\n        /*\n         * Check arguments; return immediately where possible. For\n         * consistency, don\u0027t check for null str.\n         */\n        int rightIndex \u003d srcCount - tgtCount;\n        if (fromIndex \u003e rightIndex) {\n            fromIndex \u003d rightIndex;\n        }\n        if (fromIndex \u003c 0) {\n            return -1;\n        }\n        /* Empty string always matches. */\n        if (tgtCount \u003d\u003d 0) {\n            return fromIndex;\n        }\n        if (srcCoder \u003d\u003d tgtCoder) {\n            return srcCoder \u003d\u003d LATIN1\n                ? StringLatin1.lastIndexOf(src, srcCount, tgt, tgtCount, fromIndex)\n                : StringUTF16.lastIndexOf(src, srcCount, tgt, tgtCount, fromIndex);\n        }\n        if (srcCoder \u003d\u003d LATIN1) {    // \u0026\u0026 tgtCoder \u003d\u003d UTF16\n            return -1;\n        }\n        // srcCoder \u003d\u003d UTF16 \u0026\u0026 tgtCoder \u003d\u003d LATIN1\n        return StringUTF16.lastIndexOfLatin1(src, srcCount, tgt, tgtCount, fromIndex);\n    }\n\n    /**\n     * Returns a string that is a substring of this string. The\n     * substring begins with the character at the specified index and\n     * extends to the end of this string. \u003cp\u003e\n     * Examples:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * \"unhappy\".substring(2) returns \"happy\"\n     * \"Harbison\".substring(3) returns \"bison\"\n     * \"emptiness\".substring(9) returns \"\" (an empty string)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @param      beginIndex   the beginning index, inclusive.\n     * @return     the specified substring.\n     * @throws     IndexOutOfBoundsException  if\n     *             {@code beginIndex} is negative or larger than the\n     *             length of this {@code String} object.\n     */\n    public String substring(int beginIndex) {\n        return substring(beginIndex, length());\n    }\n\n    /**\n     * Returns a string that is a substring of this string. The\n     * substring begins at the specified {@code beginIndex} and\n     * extends to the character at index {@code endIndex - 1}.\n     * Thus the length of the substring is {@code endIndex-beginIndex}.\n     * \u003cp\u003e\n     * Examples:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * \"hamburger\".substring(4, 8) returns \"urge\"\n     * \"smiles\".substring(1, 5) returns \"mile\"\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @param      beginIndex   the beginning index, inclusive.\n     * @param      endIndex     the ending index, exclusive.\n     * @return     the specified substring.\n     * @throws     IndexOutOfBoundsException  if the\n     *             {@code beginIndex} is negative, or\n     *             {@code endIndex} is larger than the length of\n     *             this {@code String} object, or\n     *             {@code beginIndex} is larger than\n     *             {@code endIndex}.\n     */\n    public String substring(int beginIndex, int endIndex) {\n        int length \u003d length();\n        checkBoundsBeginEnd(beginIndex, endIndex, length);\n        if (beginIndex \u003d\u003d 0 \u0026\u0026 endIndex \u003d\u003d length) {\n            return this;\n        }\n        int subLen \u003d endIndex - beginIndex;\n        return isLatin1() ? StringLatin1.newString(value, beginIndex, subLen)\n                          : StringUTF16.newString(value, beginIndex, subLen);\n    }\n\n    /**\n     * Returns a character sequence that is a subsequence of this sequence.\n     *\n     * \u003cp\u003e An invocation of this method of the form\n     *\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * str.subSequence(begin,\u0026nbsp;end)\u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * behaves in exactly the same way as the invocation\n     *\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * str.substring(begin,\u0026nbsp;end)\u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @apiNote\n     * This method is defined so that the {@code String} class can implement\n     * the {@link CharSequence} interface.\n     *\n     * @param   beginIndex   the begin index, inclusive.\n     * @param   endIndex     the end index, exclusive.\n     * @return  the specified subsequence.\n     *\n     * @throws  IndexOutOfBoundsException\n     *          if {@code beginIndex} or {@code endIndex} is negative,\n     *          if {@code endIndex} is greater than {@code length()},\n     *          or if {@code beginIndex} is greater than {@code endIndex}\n     *\n     * @since 1.4\n     */\n    public CharSequence subSequence(int beginIndex, int endIndex) {\n        return this.substring(beginIndex, endIndex);\n    }\n\n    /**\n     * Concatenates the specified string to the end of this string.\n     * \u003cp\u003e\n     * If the length of the argument string is {@code 0}, then this\n     * {@code String} object is returned. Otherwise, a\n     * {@code String} object is returned that represents a character\n     * sequence that is the concatenation of the character sequence\n     * represented by this {@code String} object and the character\n     * sequence represented by the argument string.\u003cp\u003e\n     * Examples:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * \"cares\".concat(\"s\") returns \"caress\"\n     * \"to\".concat(\"get\").concat(\"her\") returns \"together\"\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @param   str   the {@code String} that is concatenated to the end\n     *                of this {@code String}.\n     * @return  a string that represents the concatenation of this object\u0027s\n     *          characters followed by the string argument\u0027s characters.\n     */\n    public String concat(String str) {\n        if (str.isEmpty()) {\n            return this;\n        }\n        return StringConcatHelper.simpleConcat(this, str);\n    }\n\n    /**\n     * Returns a string resulting from replacing all occurrences of\n     * {@code oldChar} in this string with {@code newChar}.\n     * \u003cp\u003e\n     * If the character {@code oldChar} does not occur in the\n     * character sequence represented by this {@code String} object,\n     * then a reference to this {@code String} object is returned.\n     * Otherwise, a {@code String} object is returned that\n     * represents a character sequence identical to the character sequence\n     * represented by this {@code String} object, except that every\n     * occurrence of {@code oldChar} is replaced by an occurrence\n     * of {@code newChar}.\n     * \u003cp\u003e\n     * Examples:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * \"mesquite in your cellar\".replace(\u0027e\u0027, \u0027o\u0027)\n     *         returns \"mosquito in your collar\"\n     * \"the war of baronets\".replace(\u0027r\u0027, \u0027y\u0027)\n     *         returns \"the way of bayonets\"\n     * \"sparring with a purple porpoise\".replace(\u0027p\u0027, \u0027t\u0027)\n     *         returns \"starring with a turtle tortoise\"\n     * \"JonL\".replace(\u0027q\u0027, \u0027x\u0027) returns \"JonL\" (no change)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @param   oldChar   the old character.\n     * @param   newChar   the new character.\n     * @return  a string derived from this string by replacing every\n     *          occurrence of {@code oldChar} with {@code newChar}.\n     */\n    public String replace(char oldChar, char newChar) {\n        if (oldChar !\u003d newChar) {\n            String ret \u003d isLatin1() ? StringLatin1.replace(value, oldChar, newChar)\n                                    : StringUTF16.replace(value, oldChar, newChar);\n            if (ret !\u003d null) {\n                return ret;\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Tells whether or not this string matches the given \u003ca\n     * href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e.\n     *\n     * \u003cp\u003e An invocation of this method of the form\n     * \u003ci\u003estr\u003c/i\u003e{@code .matches(}\u003ci\u003eregex\u003c/i\u003e{@code )} yields exactly the\n     * same result as the expression\n     *\n     * \u003cblockquote\u003e\n     * {@link java.util.regex.Pattern}.{@link java.util.regex.Pattern#matches(String,CharSequence)\n     * matches(\u003ci\u003eregex\u003c/i\u003e, \u003ci\u003estr\u003c/i\u003e)}\n     * \u003c/blockquote\u003e\n     *\n     * @param   regex\n     *          the regular expression to which this string is to be matched\n     *\n     * @return  {@code true} if, and only if, this string matches the\n     *          given regular expression\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\u0027s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     */\n    public boolean matches(String regex) {\n        return Pattern.matches(regex, this);\n    }\n\n    /**\n     * Returns true if and only if this string contains the specified\n     * sequence of char values.\n     *\n     * @param s the sequence to search for\n     * @return true if this string contains {@code s}, false otherwise\n     * @since 1.5\n     */\n    public boolean contains(CharSequence s) {\n        return indexOf(s.toString()) \u003e\u003d 0;\n    }\n\n    /**\n     * Replaces the first substring of this string that matches the given \u003ca\n     * href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e with the\n     * given replacement.\n     *\n     * \u003cp\u003e An invocation of this method of the form\n     * \u003ci\u003estr\u003c/i\u003e{@code .replaceFirst(}\u003ci\u003eregex\u003c/i\u003e{@code ,} \u003ci\u003erepl\u003c/i\u003e{@code )}\n     * yields exactly the same result as the expression\n     *\n     * \u003cblockquote\u003e\n     * \u003ccode\u003e\n     * {@link java.util.regex.Pattern}.{@link\n     * java.util.regex.Pattern#compile(String) compile}(\u003ci\u003eregex\u003c/i\u003e).{@link\n     * java.util.regex.Pattern#matcher(java.lang.CharSequence) matcher}(\u003ci\u003estr\u003c/i\u003e).{@link\n     * java.util.regex.Matcher#replaceFirst(String) replaceFirst}(\u003ci\u003erepl\u003c/i\u003e)\n     * \u003c/code\u003e\n     * \u003c/blockquote\u003e\n     *\n     *\u003cp\u003e\n     * Note that backslashes ({@code \\}) and dollar signs ({@code $}) in the\n     * replacement string may cause the results to be different than if it were\n     * being treated as a literal replacement string; see\n     * {@link java.util.regex.Matcher#replaceFirst}.\n     * Use {@link java.util.regex.Matcher#quoteReplacement} to suppress the special\n     * meaning of these characters, if desired.\n     *\n     * @param   regex\n     *          the regular expression to which this string is to be matched\n     * @param   replacement\n     *          the string to be substituted for the first match\n     *\n     * @return  The resulting {@code String}\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\u0027s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     */\n    public String replaceFirst(String regex, String replacement) {\n        return Pattern.compile(regex).matcher(this).replaceFirst(replacement);\n    }\n\n    /**\n     * Replaces each substring of this string that matches the given \u003ca\n     * href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e with the\n     * given replacement.\n     *\n     * \u003cp\u003e An invocation of this method of the form\n     * \u003ci\u003estr\u003c/i\u003e{@code .replaceAll(}\u003ci\u003eregex\u003c/i\u003e{@code ,} \u003ci\u003erepl\u003c/i\u003e{@code )}\n     * yields exactly the same result as the expression\n     *\n     * \u003cblockquote\u003e\n     * \u003ccode\u003e\n     * {@link java.util.regex.Pattern}.{@link\n     * java.util.regex.Pattern#compile(String) compile}(\u003ci\u003eregex\u003c/i\u003e).{@link\n     * java.util.regex.Pattern#matcher(java.lang.CharSequence) matcher}(\u003ci\u003estr\u003c/i\u003e).{@link\n     * java.util.regex.Matcher#replaceAll(String) replaceAll}(\u003ci\u003erepl\u003c/i\u003e)\n     * \u003c/code\u003e\n     * \u003c/blockquote\u003e\n     *\n     *\u003cp\u003e\n     * Note that backslashes ({@code \\}) and dollar signs ({@code $}) in the\n     * replacement string may cause the results to be different than if it were\n     * being treated as a literal replacement string; see\n     * {@link java.util.regex.Matcher#replaceAll Matcher.replaceAll}.\n     * Use {@link java.util.regex.Matcher#quoteReplacement} to suppress the special\n     * meaning of these characters, if desired.\n     *\n     * @param   regex\n     *          the regular expression to which this string is to be matched\n     * @param   replacement\n     *          the string to be substituted for each match\n     *\n     * @return  The resulting {@code String}\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\u0027s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     */\n    public String replaceAll(String regex, String replacement) {\n        return Pattern.compile(regex).matcher(this).replaceAll(replacement);\n    }\n\n    /**\n     * Replaces each substring of this string that matches the literal target\n     * sequence with the specified literal replacement sequence. The\n     * replacement proceeds from the beginning of the string to the end, for\n     * example, replacing \"aa\" with \"b\" in the string \"aaa\" will result in\n     * \"ba\" rather than \"ab\".\n     *\n     * @param  target The sequence of char values to be replaced\n     * @param  replacement The replacement sequence of char values\n     * @return  The resulting string\n     * @since 1.5\n     */\n    public String replace(CharSequence target, CharSequence replacement) {\n        String trgtStr \u003d target.toString();\n        String replStr \u003d replacement.toString();\n        int thisLen \u003d length();\n        int trgtLen \u003d trgtStr.length();\n        int replLen \u003d replStr.length();\n\n        if (trgtLen \u003e 0) {\n            if (trgtLen \u003d\u003d 1 \u0026\u0026 replLen \u003d\u003d 1) {\n                return replace(trgtStr.charAt(0), replStr.charAt(0));\n            }\n\n            boolean thisIsLatin1 \u003d this.isLatin1();\n            boolean trgtIsLatin1 \u003d trgtStr.isLatin1();\n            boolean replIsLatin1 \u003d replStr.isLatin1();\n            String ret \u003d (thisIsLatin1 \u0026\u0026 trgtIsLatin1 \u0026\u0026 replIsLatin1)\n                    ? StringLatin1.replace(value, thisLen,\n                                           trgtStr.value, trgtLen,\n                                           replStr.value, replLen)\n                    : StringUTF16.replace(value, thisLen, thisIsLatin1,\n                                          trgtStr.value, trgtLen, trgtIsLatin1,\n                                          replStr.value, replLen, replIsLatin1);\n            if (ret !\u003d null) {\n                return ret;\n            }\n            return this;\n\n        } else { // trgtLen \u003d\u003d 0\n            int resultLen;\n            try {\n                resultLen \u003d Math.addExact(thisLen, Math.multiplyExact(\n                        Math.addExact(thisLen, 1), replLen));\n            } catch (ArithmeticException ignored) {\n                throw new OutOfMemoryError(\"Required length exceeds implementation limit\");\n            }\n\n            StringBuilder sb \u003d new StringBuilder(resultLen);\n            sb.append(replStr);\n            for (int i \u003d 0; i \u003c thisLen; ++i) {\n                sb.append(charAt(i)).append(replStr);\n            }\n            return sb.toString();\n        }\n    }\n\n    /**\n     * Splits this string around matches of the given\n     * \u003ca href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e.\n     *\n     * \u003cp\u003e The array returned by this method contains each substring of this\n     * string that is terminated by another substring that matches the given\n     * expression or is terminated by the end of the string.  The substrings in\n     * the array are in the order in which they occur in this string.  If the\n     * expression does not match any part of the input then the resulting array\n     * has just one element, namely this string.\n     *\n     * \u003cp\u003e When there is a positive-width match at the beginning of this\n     * string then an empty leading substring is included at the beginning\n     * of the resulting array. A zero-width match at the beginning however\n     * never produces such empty leading substring.\n     *\n     * \u003cp\u003e The {@code limit} parameter controls the number of times the\n     * pattern is applied and therefore affects the length of the resulting\n     * array.\n     * \u003cul\u003e\n     *    \u003cli\u003e\u003cp\u003e\n     *    If the \u003ci\u003elimit\u003c/i\u003e is positive then the pattern will be applied\n     *    at most \u003ci\u003elimit\u003c/i\u003e\u0026nbsp;-\u0026nbsp;1 times, the array\u0027s length will be\n     *    no greater than \u003ci\u003elimit\u003c/i\u003e, and the array\u0027s last entry will contain\n     *    all input beyond the last matched delimiter.\u003c/p\u003e\u003c/li\u003e\n     *\n     *    \u003cli\u003e\u003cp\u003e\n     *    If the \u003ci\u003elimit\u003c/i\u003e is zero then the pattern will be applied as\n     *    many times as possible, the array can have any length, and trailing\n     *    empty strings will be discarded.\u003c/p\u003e\u003c/li\u003e\n     *\n     *    \u003cli\u003e\u003cp\u003e\n     *    If the \u003ci\u003elimit\u003c/i\u003e is negative then the pattern will be applied\n     *    as many times as possible and the array can have any length.\u003c/p\u003e\u003c/li\u003e\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003e The string {@code \"boo:and:foo\"}, for example, yields the\n     * following results with these parameters:\n     *\n     * \u003cblockquote\u003e\u003ctable class\u003d\"plain\"\u003e\n     * \u003ccaption style\u003d\"display:none\"\u003eSplit example showing regex, limit, and result\u003c/caption\u003e\n     * \u003cthead\u003e\n     * \u003ctr\u003e\n     *     \u003cth scope\u003d\"col\"\u003eRegex\u003c/th\u003e\n     *     \u003cth scope\u003d\"col\"\u003eLimit\u003c/th\u003e\n     *     \u003cth scope\u003d\"col\"\u003eResult\u003c/th\u003e\n     * \u003c/tr\u003e\n     * \u003c/thead\u003e\n     * \u003ctbody\u003e\n     * \u003ctr\u003e\u003cth scope\u003d\"row\" rowspan\u003d\"3\" style\u003d\"font-weight:normal\"\u003e:\u003c/th\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e2\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"boo\", \"and:foo\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003c!-- : --\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e5\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"boo\", \"and\", \"foo\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003c!-- : --\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e-2\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"boo\", \"and\", \"foo\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003cth scope\u003d\"row\" rowspan\u003d\"3\" style\u003d\"font-weight:normal\"\u003eo\u003c/th\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e5\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"b\", \"\", \":and:f\", \"\", \"\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003c!-- o --\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e-2\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"b\", \"\", \":and:f\", \"\", \"\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003c!-- o --\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e0\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"b\", \"\", \":and:f\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003c/tbody\u003e\n     * \u003c/table\u003e\u003c/blockquote\u003e\n     *\n     * \u003cp\u003e An invocation of this method of the form\n     * \u003ci\u003estr.\u003c/i\u003e{@code split(}\u003ci\u003eregex\u003c/i\u003e{@code ,}\u0026nbsp;\u003ci\u003en\u003c/i\u003e{@code )}\n     * yields the same result as the expression\n     *\n     * \u003cblockquote\u003e\n     * \u003ccode\u003e\n     * {@link java.util.regex.Pattern}.{@link\n     * java.util.regex.Pattern#compile(String) compile}(\u003ci\u003eregex\u003c/i\u003e).{@link\n     * java.util.regex.Pattern#split(java.lang.CharSequence,int) split}(\u003ci\u003estr\u003c/i\u003e,\u0026nbsp;\u003ci\u003en\u003c/i\u003e)\n     * \u003c/code\u003e\n     * \u003c/blockquote\u003e\n     *\n     *\n     * @param  regex\n     *         the delimiting regular expression\n     *\n     * @param  limit\n     *         the result threshold, as described above\n     *\n     * @return  the array of strings computed by splitting this string\n     *          around matches of the given regular expression\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\u0027s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     */\n    public String[] split(String regex, int limit) {\n        /* fastpath if the regex is a\n         * (1) one-char String and this character is not one of the\n         *     RegEx\u0027s meta characters \".$|()[{^?*+\\\\\", or\n         * (2) two-char String and the first char is the backslash and\n         *     the second is not the ascii digit or ascii letter.\n         */\n        char ch \u003d 0;\n        if (((regex.length() \u003d\u003d 1 \u0026\u0026\n             \".$|()[{^?*+\\\\\".indexOf(ch \u003d regex.charAt(0)) \u003d\u003d -1) ||\n             (regex.length() \u003d\u003d 2 \u0026\u0026\n              regex.charAt(0) \u003d\u003d \u0027\\\\\u0027 \u0026\u0026\n              (((ch \u003d regex.charAt(1))-\u00270\u0027)|(\u00279\u0027-ch)) \u003c 0 \u0026\u0026\n              ((ch-\u0027a\u0027)|(\u0027z\u0027-ch)) \u003c 0 \u0026\u0026\n              ((ch-\u0027A\u0027)|(\u0027Z\u0027-ch)) \u003c 0)) \u0026\u0026\n            (ch \u003c Character.MIN_HIGH_SURROGATE ||\n             ch \u003e Character.MAX_LOW_SURROGATE))\n        {\n            int off \u003d 0;\n            int next \u003d 0;\n            boolean limited \u003d limit \u003e 0;\n            ArrayList\u003cString\u003e list \u003d new ArrayList\u003c\u003e();\n            while ((next \u003d indexOf(ch, off)) !\u003d -1) {\n                if (!limited || list.size() \u003c limit - 1) {\n                    list.add(substring(off, next));\n                    off \u003d next + 1;\n                } else {    // last one\n                    //assert (list.size() \u003d\u003d limit - 1);\n                    int last \u003d length();\n                    list.add(substring(off, last));\n                    off \u003d last;\n                    break;\n                }\n            }\n            // If no match was found, return this\n            if (off \u003d\u003d 0)\n                return new String[]{this};\n\n            // Add remaining segment\n            if (!limited || list.size() \u003c limit)\n                list.add(substring(off, length()));\n\n            // Construct result\n            int resultSize \u003d list.size();\n            if (limit \u003d\u003d 0) {\n                while (resultSize \u003e 0 \u0026\u0026 list.get(resultSize - 1).isEmpty()) {\n                    resultSize--;\n                }\n            }\n            String[] result \u003d new String[resultSize];\n            return list.subList(0, resultSize).toArray(result);\n        }\n        return Pattern.compile(regex).split(this, limit);\n    }\n\n    /**\n     * Splits this string around matches of the given \u003ca\n     * href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e.\n     *\n     * \u003cp\u003e This method works as if by invoking the two-argument {@link\n     * #split(String, int) split} method with the given expression and a limit\n     * argument of zero.  Trailing empty strings are therefore not included in\n     * the resulting array.\n     *\n     * \u003cp\u003e The string {@code \"boo:and:foo\"}, for example, yields the following\n     * results with these expressions:\n     *\n     * \u003cblockquote\u003e\u003ctable class\u003d\"plain\"\u003e\n     * \u003ccaption style\u003d\"display:none\"\u003eSplit examples showing regex and result\u003c/caption\u003e\n     * \u003cthead\u003e\n     * \u003ctr\u003e\n     *  \u003cth scope\u003d\"col\"\u003eRegex\u003c/th\u003e\n     *  \u003cth scope\u003d\"col\"\u003eResult\u003c/th\u003e\n     * \u003c/tr\u003e\n     * \u003c/thead\u003e\n     * \u003ctbody\u003e\n     * \u003ctr\u003e\u003cth scope\u003d\"row\" style\u003d\"text-weight:normal\"\u003e:\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"boo\", \"and\", \"foo\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003cth scope\u003d\"row\" style\u003d\"text-weight:normal\"\u003eo\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"b\", \"\", \":and:f\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003c/tbody\u003e\n     * \u003c/table\u003e\u003c/blockquote\u003e\n     *\n     *\n     * @param  regex\n     *         the delimiting regular expression\n     *\n     * @return  the array of strings computed by splitting this string\n     *          around matches of the given regular expression\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\u0027s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     */\n    public String[] split(String regex) {\n        return split(regex, 0);\n    }\n\n    /**\n     * Returns a new String composed of copies of the\n     * {@code CharSequence elements} joined together with a copy of\n     * the specified {@code delimiter}.\n     *\n     * \u003cblockquote\u003eFor example,\n     * \u003cpre\u003e{@code\n     *     String message \u003d String.join(\"-\", \"Java\", \"is\", \"cool\");\n     *     // message returned is: \"Java-is-cool\"\n     * }\u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * Note that if an element is null, then {@code \"null\"} is added.\n     *\n     * @param  delimiter the delimiter that separates each element\n     * @param  elements the elements to join together.\n     *\n     * @return a new {@code String} that is composed of the {@code elements}\n     *         separated by the {@code delimiter}\n     *\n     * @throws NullPointerException If {@code delimiter} or {@code elements}\n     *         is {@code null}\n     *\n     * @see java.util.StringJoiner\n     * @since 1.8\n     */\n    public static String join(CharSequence delimiter, CharSequence... elements) {\n        var delim \u003d delimiter.toString();\n        var elems \u003d new String[elements.length];\n        for (int i \u003d 0; i \u003c elements.length; i++) {\n            elems[i] \u003d String.valueOf(elements[i]);\n        }\n        return join(\"\", \"\", delim, elems, elems.length);\n    }\n\n    /**\n     * Designated join routine.\n     *\n     * @param prefix the non-null prefix\n     * @param suffix the non-null suffix\n     * @param delimiter the non-null delimiter\n     * @param elements the non-null array of non-null elements\n     * @param size the number of elements in the array (\u003c\u003d elements.length)\n     * @return the joined string\n     */\n    @ForceInline\n    static String join(String prefix, String suffix, String delimiter, String[] elements, int size) {\n        int icoder \u003d prefix.coder() | suffix.coder();\n        long len \u003d (long) prefix.length() + suffix.length();\n        if (size \u003e 1) { // when there are more than one element, size - 1 delimiters will be emitted\n            len +\u003d (long) (size - 1) * delimiter.length();\n            icoder |\u003d delimiter.coder();\n        }\n        // assert len \u003e 0L; // max: (long) Integer.MAX_VALUE \u003c\u003c 32\n        // following loop will add max: (long) Integer.MAX_VALUE * Integer.MAX_VALUE to len\n        // so len can overflow at most once\n        for (int i \u003d 0; i \u003c size; i++) {\n            var el \u003d elements[i];\n            len +\u003d el.length();\n            icoder |\u003d el.coder();\n        }\n        byte coder \u003d (byte) icoder;\n        // long len overflow check, char -\u003e byte length, int len overflow check\n        if (len \u003c 0L || (len \u003c\u003c\u003d coder) !\u003d (int) len) {\n            throw new OutOfMemoryError(\"Requested string length exceeds VM limit\");\n        }\n        byte[] value \u003d StringConcatHelper.newArray(len);\n\n        int off \u003d 0;\n        prefix.getBytes(value, off, coder); off +\u003d prefix.length();\n        if (size \u003e 0) {\n            var el \u003d elements[0];\n            el.getBytes(value, off, coder); off +\u003d el.length();\n            for (int i \u003d 1; i \u003c size; i++) {\n                delimiter.getBytes(value, off, coder); off +\u003d delimiter.length();\n                el \u003d elements[i];\n                el.getBytes(value, off, coder); off +\u003d el.length();\n            }\n        }\n        suffix.getBytes(value, off, coder);\n        // assert off + suffix.length() \u003d\u003d value.length \u003e\u003e coder;\n\n        return new String(value, coder);\n    }\n\n    /**\n     * Returns a new {@code String} composed of copies of the\n     * {@code CharSequence elements} joined together with a copy of the\n     * specified {@code delimiter}.\n     *\n     * \u003cblockquote\u003eFor example,\n     * \u003cpre\u003e{@code\n     *     List\u003cString\u003e strings \u003d List.of(\"Java\", \"is\", \"cool\");\n     *     String message \u003d String.join(\" \", strings);\n     *     // message returned is: \"Java is cool\"\n     *\n     *     Set\u003cString\u003e strings \u003d\n     *         new LinkedHashSet\u003c\u003e(List.of(\"Java\", \"is\", \"very\", \"cool\"));\n     *     String message \u003d String.join(\"-\", strings);\n     *     // message returned is: \"Java-is-very-cool\"\n     * }\u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * Note that if an individual element is {@code null}, then {@code \"null\"} is added.\n     *\n     * @param  delimiter a sequence of characters that is used to separate each\n     *         of the {@code elements} in the resulting {@code String}\n     * @param  elements an {@code Iterable} that will have its {@code elements}\n     *         joined together.\n     *\n     * @return a new {@code String} that is composed from the {@code elements}\n     *         argument\n     *\n     * @throws NullPointerException If {@code delimiter} or {@code elements}\n     *         is {@code null}\n     *\n     * @see    #join(CharSequence,CharSequence...)\n     * @see    java.util.StringJoiner\n     * @since 1.8\n     */\n    public static String join(CharSequence delimiter,\n            Iterable\u003c? extends CharSequence\u003e elements) {\n        Objects.requireNonNull(delimiter);\n        Objects.requireNonNull(elements);\n        var delim \u003d delimiter.toString();\n        var elems \u003d new String[8];\n        int size \u003d 0;\n        for (CharSequence cs: elements) {\n            if (size \u003e\u003d elems.length) {\n                elems \u003d Arrays.copyOf(elems, elems.length \u003c\u003c 1);\n            }\n            elems[size++] \u003d String.valueOf(cs);\n        }\n        return join(\"\", \"\", delim, elems, size);\n    }\n\n    /**\n     * Converts all of the characters in this {@code String} to lower\n     * case using the rules of the given {@code Locale}.  Case mapping is based\n     * on the Unicode Standard version specified by the {@link java.lang.Character Character}\n     * class. Since case mappings are not always 1:1 char mappings, the resulting {@code String}\n     * and this {@code String} may differ in length.\n     * \u003cp\u003e\n     * Examples of lowercase mappings are in the following table:\n     * \u003ctable class\u003d\"plain\"\u003e\n     * \u003ccaption style\u003d\"display:none\"\u003eLowercase mapping examples showing language code of locale, upper case, lower case, and description\u003c/caption\u003e\n     * \u003cthead\u003e\n     * \u003ctr\u003e\n     *   \u003cth scope\u003d\"col\"\u003eLanguage Code of Locale\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eUpper Case\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eLower Case\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eDescription\u003c/th\u003e\n     * \u003c/tr\u003e\n     * \u003c/thead\u003e\n     * \u003ctbody\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003etr (Turkish)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u0026#92;u0130\u003c/th\u003e\n     *   \u003ctd\u003e\u0026#92;u0069\u003c/td\u003e\n     *   \u003ctd\u003ecapital letter I with dot above -\u0026gt; small letter i\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003etr (Turkish)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u0026#92;u0049\u003c/th\u003e\n     *   \u003ctd\u003e\u0026#92;u0131\u003c/td\u003e\n     *   \u003ctd\u003ecapital letter I -\u0026gt; small letter dotless i \u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003e(all)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003eFrench Fries\u003c/th\u003e\n     *   \u003ctd\u003efrench fries\u003c/td\u003e\n     *   \u003ctd\u003elowercased all chars in String\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003e(all)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\n     *       \u0026Iota;\u0026Chi;\u0026Theta;\u0026Upsilon;\u0026Sigma;\u003c/th\u003e\n     *   \u003ctd\u003e\u0026iota;\u0026chi;\u0026theta;\u0026upsilon;\u0026sigma;\u003c/td\u003e\n     *   \u003ctd\u003elowercased all chars in String\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003c/tbody\u003e\n     * \u003c/table\u003e\n     *\n     * @param locale use the case transformation rules for this locale\n     * @return the {@code String}, converted to lowercase.\n     * @see     java.lang.String#toLowerCase()\n     * @see     java.lang.String#toUpperCase()\n     * @see     java.lang.String#toUpperCase(Locale)\n     * @since   1.1\n     */\n    public String toLowerCase(Locale locale) {\n        return isLatin1() ? StringLatin1.toLowerCase(this, value, locale)\n                          : StringUTF16.toLowerCase(this, value, locale);\n    }\n\n    /**\n     * Converts all of the characters in this {@code String} to lower\n     * case using the rules of the default locale. This method is equivalent to\n     * {@code toLowerCase(Locale.getDefault())}.\n     * \u003cp\u003e\n     * \u003cb\u003eNote:\u003c/b\u003e This method is locale sensitive, and may produce unexpected\n     * results if used for strings that are intended to be interpreted locale\n     * independently.\n     * Examples are programming language identifiers, protocol keys, and HTML\n     * tags.\n     * For instance, {@code \"TITLE\".toLowerCase()} in a Turkish locale\n     * returns {@code \"t\\u005Cu0131tle\"}, where \u0027\\u005Cu0131\u0027 is the\n     * LATIN SMALL LETTER DOTLESS I character.\n     * To obtain correct results for locale insensitive strings, use\n     * {@code toLowerCase(Locale.ROOT)}.\n     *\n     * @return  the {@code String}, converted to lowercase.\n     * @see     java.lang.String#toLowerCase(Locale)\n     */\n    public String toLowerCase() {\n        return toLowerCase(Locale.getDefault());\n    }\n\n    /**\n     * Converts all of the characters in this {@code String} to upper\n     * case using the rules of the given {@code Locale}. Case mapping is based\n     * on the Unicode Standard version specified by the {@link java.lang.Character Character}\n     * class. Since case mappings are not always 1:1 char mappings, the resulting {@code String}\n     * and this {@code String} may differ in length.\n     * \u003cp\u003e\n     * Examples of locale-sensitive and 1:M case mappings are in the following table:\n     * \u003ctable class\u003d\"plain\"\u003e\n     * \u003ccaption style\u003d\"display:none\"\u003eExamples of locale-sensitive and 1:M case mappings. Shows Language code of locale, lower case, upper case, and description.\u003c/caption\u003e\n     * \u003cthead\u003e\n     * \u003ctr\u003e\n     *   \u003cth scope\u003d\"col\"\u003eLanguage Code of Locale\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eLower Case\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eUpper Case\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eDescription\u003c/th\u003e\n     * \u003c/tr\u003e\n     * \u003c/thead\u003e\n     * \u003ctbody\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003etr (Turkish)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u0026#92;u0069\u003c/th\u003e\n     *   \u003ctd\u003e\u0026#92;u0130\u003c/td\u003e\n     *   \u003ctd\u003esmall letter i -\u0026gt; capital letter I with dot above\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003etr (Turkish)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u0026#92;u0131\u003c/th\u003e\n     *   \u003ctd\u003e\u0026#92;u0049\u003c/td\u003e\n     *   \u003ctd\u003esmall letter dotless i -\u0026gt; capital letter I\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003e(all)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u0026#92;u00df\u003c/th\u003e\n     *   \u003ctd\u003e\u0026#92;u0053 \u0026#92;u0053\u003c/td\u003e\n     *   \u003ctd\u003esmall letter sharp s -\u0026gt; two letters: SS\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003e(all)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003eFahrvergn\u0026uuml;gen\u003c/th\u003e\n     *   \u003ctd\u003eFAHRVERGN\u0026Uuml;GEN\u003c/td\u003e\n     *   \u003ctd\u003e\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003c/tbody\u003e\n     * \u003c/table\u003e\n     * @param locale use the case transformation rules for this locale\n     * @return the {@code String}, converted to uppercase.\n     * @see     java.lang.String#toUpperCase()\n     * @see     java.lang.String#toLowerCase()\n     * @see     java.lang.String#toLowerCase(Locale)\n     * @since   1.1\n     */\n    public String toUpperCase(Locale locale) {\n        return isLatin1() ? StringLatin1.toUpperCase(this, value, locale)\n                          : StringUTF16.toUpperCase(this, value, locale);\n    }\n\n    /**\n     * Converts all of the characters in this {@code String} to upper\n     * case using the rules of the default locale. This method is equivalent to\n     * {@code toUpperCase(Locale.getDefault())}.\n     * \u003cp\u003e\n     * \u003cb\u003eNote:\u003c/b\u003e This method is locale sensitive, and may produce unexpected\n     * results if used for strings that are intended to be interpreted locale\n     * independently.\n     * Examples are programming language identifiers, protocol keys, and HTML\n     * tags.\n     * For instance, {@code \"title\".toUpperCase()} in a Turkish locale\n     * returns {@code \"T\\u005Cu0130TLE\"}, where \u0027\\u005Cu0130\u0027 is the\n     * LATIN CAPITAL LETTER I WITH DOT ABOVE character.\n     * To obtain correct results for locale insensitive strings, use\n     * {@code toUpperCase(Locale.ROOT)}.\n     *\n     * @return  the {@code String}, converted to uppercase.\n     * @see     java.lang.String#toUpperCase(Locale)\n     */\n    public String toUpperCase() {\n        return toUpperCase(Locale.getDefault());\n    }\n\n    /**\n     * Returns a string whose value is this string, with all leading\n     * and trailing space removed, where space is defined\n     * as any character whose codepoint is less than or equal to\n     * {@code \u0027U+0020\u0027} (the space character).\n     * \u003cp\u003e\n     * If this {@code String} object represents an empty character\n     * sequence, or the first and last characters of character sequence\n     * represented by this {@code String} object both have codes\n     * that are not space (as defined above), then a\n     * reference to this {@code String} object is returned.\n     * \u003cp\u003e\n     * Otherwise, if all characters in this string are space (as\n     * defined above), then a  {@code String} object representing an\n     * empty string is returned.\n     * \u003cp\u003e\n     * Otherwise, let \u003ci\u003ek\u003c/i\u003e be the index of the first character in the\n     * string whose code is not a space (as defined above) and let\n     * \u003ci\u003em\u003c/i\u003e be the index of the last character in the string whose code\n     * is not a space (as defined above). A {@code String}\n     * object is returned, representing the substring of this string that\n     * begins with the character at index \u003ci\u003ek\u003c/i\u003e and ends with the\n     * character at index \u003ci\u003em\u003c/i\u003e-that is, the result of\n     * {@code this.substring(k, m + 1)}.\n     * \u003cp\u003e\n     * This method may be used to trim space (as defined above) from\n     * the beginning and end of a string.\n     *\n     * @return  a string whose value is this string, with all leading\n     *          and trailing space removed, or this string if it\n     *          has no leading or trailing space.\n     */\n    public String trim() {\n        String ret \u003d isLatin1() ? StringLatin1.trim(value)\n                                : StringUTF16.trim(value);\n        return ret \u003d\u003d null ? this : ret;\n    }\n\n    /**\n     * Returns a string whose value is this string, with all leading\n     * and trailing {@linkplain Character#isWhitespace(int) white space}\n     * removed.\n     * \u003cp\u003e\n     * If this {@code String} object represents an empty string,\n     * or if all code points in this string are\n     * {@linkplain Character#isWhitespace(int) white space}, then an empty string\n     * is returned.\n     * \u003cp\u003e\n     * Otherwise, returns a substring of this string beginning with the first\n     * code point that is not a {@linkplain Character#isWhitespace(int) white space}\n     * up to and including the last code point that is not a\n     * {@linkplain Character#isWhitespace(int) white space}.\n     * \u003cp\u003e\n     * This method may be used to strip\n     * {@linkplain Character#isWhitespace(int) white space} from\n     * the beginning and end of a string.\n     *\n     * @return  a string whose value is this string, with all leading\n     *          and trailing white space removed\n     *\n     * @see Character#isWhitespace(int)\n     *\n     * @since 11\n     */\n    public String strip() {\n        String ret \u003d isLatin1() ? StringLatin1.strip(value)\n                                : StringUTF16.strip(value);\n        return ret \u003d\u003d null ? this : ret;\n    }\n\n    /**\n     * Returns a string whose value is this string, with all leading\n     * {@linkplain Character#isWhitespace(int) white space} removed.\n     * \u003cp\u003e\n     * If this {@code String} object represents an empty string,\n     * or if all code points in this string are\n     * {@linkplain Character#isWhitespace(int) white space}, then an empty string\n     * is returned.\n     * \u003cp\u003e\n     * Otherwise, returns a substring of this string beginning with the first\n     * code point that is not a {@linkplain Character#isWhitespace(int) white space}\n     * up to and including the last code point of this string.\n     * \u003cp\u003e\n     * This method may be used to trim\n     * {@linkplain Character#isWhitespace(int) white space} from\n     * the beginning of a string.\n     *\n     * @return  a string whose value is this string, with all leading white\n     *          space removed\n     *\n     * @see Character#isWhitespace(int)\n     *\n     * @since 11\n     */\n    public String stripLeading() {\n        String ret \u003d isLatin1() ? StringLatin1.stripLeading(value)\n                                : StringUTF16.stripLeading(value);\n        return ret \u003d\u003d null ? this : ret;\n    }\n\n    /**\n     * Returns a string whose value is this string, with all trailing\n     * {@linkplain Character#isWhitespace(int) white space} removed.\n     * \u003cp\u003e\n     * If this {@code String} object represents an empty string,\n     * or if all characters in this string are\n     * {@linkplain Character#isWhitespace(int) white space}, then an empty string\n     * is returned.\n     * \u003cp\u003e\n     * Otherwise, returns a substring of this string beginning with the first\n     * code point of this string up to and including the last code point\n     * that is not a {@linkplain Character#isWhitespace(int) white space}.\n     * \u003cp\u003e\n     * This method may be used to trim\n     * {@linkplain Character#isWhitespace(int) white space} from\n     * the end of a string.\n     *\n     * @return  a string whose value is this string, with all trailing white\n     *          space removed\n     *\n     * @see Character#isWhitespace(int)\n     *\n     * @since 11\n     */\n    public String stripTrailing() {\n        String ret \u003d isLatin1() ? StringLatin1.stripTrailing(value)\n                                : StringUTF16.stripTrailing(value);\n        return ret \u003d\u003d null ? this : ret;\n    }\n\n    /**\n     * Returns {@code true} if the string is empty or contains only\n     * {@linkplain Character#isWhitespace(int) white space} codepoints,\n     * otherwise {@code false}.\n     *\n     * @return {@code true} if the string is empty or contains only\n     *         {@linkplain Character#isWhitespace(int) white space} codepoints,\n     *         otherwise {@code false}\n     *\n     * @see Character#isWhitespace(int)\n     *\n     * @since 11\n     */\n    public boolean isBlank() {\n        return indexOfNonWhitespace() \u003d\u003d length();\n    }\n\n    /**\n     * Returns a stream of lines extracted from this string,\n     * separated by line terminators.\n     * \u003cp\u003e\n     * A \u003ci\u003eline terminator\u003c/i\u003e is one of the following:\n     * a line feed character {@code \"\\n\"} (U+000A),\n     * a carriage return character {@code \"\\r\"} (U+000D),\n     * or a carriage return followed immediately by a line feed\n     * {@code \"\\r\\n\"} (U+000D U+000A).\n     * \u003cp\u003e\n     * A \u003ci\u003eline\u003c/i\u003e is either a sequence of zero or more characters\n     * followed by a line terminator, or it is a sequence of one or\n     * more characters followed by the end of the string. A\n     * line does not include the line terminator.\n     * \u003cp\u003e\n     * The stream returned by this method contains the lines from\n     * this string in the order in which they occur.\n     *\n     * @apiNote This definition of \u003ci\u003eline\u003c/i\u003e implies that an empty\n     *          string has zero lines and that there is no empty line\n     *          following a line terminator at the end of a string.\n     *\n     * @implNote This method provides better performance than\n     *           split(\"\\R\") by supplying elements lazily and\n     *           by faster search of new line terminators.\n     *\n     * @return  the stream of lines extracted from this string\n     *\n     * @since 11\n     */\n    public Stream\u003cString\u003e lines() {\n        return isLatin1() ? StringLatin1.lines(value) : StringUTF16.lines(value);\n    }\n\n    /**\n     * Adjusts the indentation of each line of this string based on the value of\n     * {@code n}, and normalizes line termination characters.\n     * \u003cp\u003e\n     * This string is conceptually separated into lines using\n     * {@link String#lines()}. Each line is then adjusted as described below\n     * and then suffixed with a line feed {@code \"\\n\"} (U+000A). The resulting\n     * lines are then concatenated and returned.\n     * \u003cp\u003e\n     * If {@code n \u003e 0} then {@code n} spaces (U+0020) are inserted at the\n     * beginning of each line.\n     * \u003cp\u003e\n     * If {@code n \u003c 0} then up to {@code n}\n     * {@linkplain Character#isWhitespace(int) white space characters} are removed\n     * from the beginning of each line. If a given line does not contain\n     * sufficient white space then all leading\n     * {@linkplain Character#isWhitespace(int) white space characters} are removed.\n     * Each white space character is treated as a single character. In\n     * particular, the tab character {@code \"\\t\"} (U+0009) is considered a\n     * single character; it is not expanded.\n     * \u003cp\u003e\n     * If {@code n \u003d\u003d 0} then the line remains unchanged. However, line\n     * terminators are still normalized.\n     *\n     * @param n  number of leading\n     *           {@linkplain Character#isWhitespace(int) white space characters}\n     *           to add or remove\n     *\n     * @return string with indentation adjusted and line endings normalized\n     *\n     * @see String#lines()\n     * @see String#isBlank()\n     * @see Character#isWhitespace(int)\n     *\n     * @since 12\n     */\n    public String indent(int n) {\n        if (isEmpty()) {\n            return \"\";\n        }\n        Stream\u003cString\u003e stream \u003d lines();\n        if (n \u003e 0) {\n            final String spaces \u003d \" \".repeat(n);\n            stream \u003d stream.map(s -\u003e spaces + s);\n        } else if (n \u003d\u003d Integer.MIN_VALUE) {\n            stream \u003d stream.map(s -\u003e s.stripLeading());\n        } else if (n \u003c 0) {\n            stream \u003d stream.map(s -\u003e s.substring(Math.min(-n, s.indexOfNonWhitespace())));\n        }\n        return stream.collect(Collectors.joining(\"\\n\", \"\", \"\\n\"));\n    }\n\n    private int indexOfNonWhitespace() {\n        return isLatin1() ? StringLatin1.indexOfNonWhitespace(value)\n                          : StringUTF16.indexOfNonWhitespace(value);\n    }\n\n    private int lastIndexOfNonWhitespace() {\n        return isLatin1() ? StringLatin1.lastIndexOfNonWhitespace(value)\n                          : StringUTF16.lastIndexOfNonWhitespace(value);\n    }\n\n    /**\n     * Returns a string whose value is this string, with incidental\n     * {@linkplain Character#isWhitespace(int) white space} removed from\n     * the beginning and end of every line.\n     * \u003cp\u003e\n     * Incidental {@linkplain Character#isWhitespace(int) white space}\n     * is often present in a text block to align the content with the opening\n     * delimiter. For example, in the following code, dots represent incidental\n     * {@linkplain Character#isWhitespace(int) white space}:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * String html \u003d \"\"\"\n     * ..............\u0026lt;html\u0026gt;\n     * ..............    \u0026lt;body\u0026gt;\n     * ..............        \u0026lt;p\u0026gt;Hello, world\u0026lt;/p\u0026gt;\n     * ..............    \u0026lt;/body\u0026gt;\n     * ..............\u0026lt;/html\u0026gt;\n     * ..............\"\"\";\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * This method treats the incidental\n     * {@linkplain Character#isWhitespace(int) white space} as indentation to be\n     * stripped, producing a string that preserves the relative indentation of\n     * the content. Using | to visualize the start of each line of the string:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * |\u0026lt;html\u0026gt;\n     * |    \u0026lt;body\u0026gt;\n     * |        \u0026lt;p\u0026gt;Hello, world\u0026lt;/p\u0026gt;\n     * |    \u0026lt;/body\u0026gt;\n     * |\u0026lt;/html\u0026gt;\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * First, the individual lines of this string are extracted. A \u003ci\u003eline\u003c/i\u003e\n     * is a sequence of zero or more characters followed by either a line\n     * terminator or the end of the string.\n     * If the string has at least one line terminator, the last line consists\n     * of the characters between the last terminator and the end of the string.\n     * Otherwise, if the string has no terminators, the last line is the start\n     * of the string to the end of the string, in other words, the entire\n     * string.\n     * A line does not include the line terminator.\n     * \u003cp\u003e\n     * Then, the \u003ci\u003eminimum indentation\u003c/i\u003e (min) is determined as follows:\n     * \u003cul\u003e\n     *   \u003cli\u003e\u003cp\u003eFor each non-blank line (as defined by {@link String#isBlank()}),\n     *   the leading {@linkplain Character#isWhitespace(int) white space}\n     *   characters are counted.\u003c/p\u003e\n     *   \u003c/li\u003e\n     *   \u003cli\u003e\u003cp\u003eThe leading {@linkplain Character#isWhitespace(int) white space}\n     *   characters on the last line are also counted even if\n     *   {@linkplain String#isBlank() blank}.\u003c/p\u003e\n     *   \u003c/li\u003e\n     * \u003c/ul\u003e\n     * \u003cp\u003eThe \u003ci\u003emin\u003c/i\u003e value is the smallest of these counts.\n     * \u003cp\u003e\n     * For each {@linkplain String#isBlank() non-blank} line, \u003ci\u003emin\u003c/i\u003e leading\n     * {@linkplain Character#isWhitespace(int) white space} characters are\n     * removed, and any trailing {@linkplain Character#isWhitespace(int) white\n     * space} characters are removed. {@linkplain String#isBlank() Blank} lines\n     * are replaced with the empty string.\n     *\n     * \u003cp\u003e\n     * Finally, the lines are joined into a new string, using the LF character\n     * {@code \"\\n\"} (U+000A) to separate lines.\n     *\n     * @apiNote\n     * This method\u0027s primary purpose is to shift a block of lines as far as\n     * possible to the left, while preserving relative indentation. Lines\n     * that were indented the least will thus have no leading\n     * {@linkplain Character#isWhitespace(int) white space}.\n     * The result will have the same number of line terminators as this string.\n     * If this string ends with a line terminator then the result will end\n     * with a line terminator.\n     *\n     * @implSpec\n     * This method treats all {@linkplain Character#isWhitespace(int) white space}\n     * characters as having equal width. As long as the indentation on every\n     * line is consistently composed of the same character sequences, then the\n     * result will be as described above.\n     *\n     * @return string with incidental indentation removed and line\n     *         terminators normalized\n     *\n     * @see String#lines()\n     * @see String#isBlank()\n     * @see String#indent(int)\n     * @see Character#isWhitespace(int)\n     *\n     * @since 15\n     *\n     */\n    public String stripIndent() {\n        int length \u003d length();\n        if (length \u003d\u003d 0) {\n            return \"\";\n        }\n        char lastChar \u003d charAt(length - 1);\n        boolean optOut \u003d lastChar \u003d\u003d \u0027\\n\u0027 || lastChar \u003d\u003d \u0027\\r\u0027;\n        List\u003cString\u003e lines \u003d lines().toList();\n        final int outdent \u003d optOut ? 0 : outdent(lines);\n        return lines.stream()\n            .map(line -\u003e {\n                int firstNonWhitespace \u003d line.indexOfNonWhitespace();\n                int lastNonWhitespace \u003d line.lastIndexOfNonWhitespace();\n                int incidentalWhitespace \u003d Math.min(outdent, firstNonWhitespace);\n                return firstNonWhitespace \u003e lastNonWhitespace\n                    ? \"\" : line.substring(incidentalWhitespace, lastNonWhitespace);\n            })\n            .collect(Collectors.joining(\"\\n\", \"\", optOut ? \"\\n\" : \"\"));\n    }\n\n    private static int outdent(List\u003cString\u003e lines) {\n        // Note: outdent is guaranteed to be zero or positive number.\n        // If there isn\u0027t a non-blank line then the last must be blank\n        int outdent \u003d Integer.MAX_VALUE;\n        for (String line : lines) {\n            int leadingWhitespace \u003d line.indexOfNonWhitespace();\n            if (leadingWhitespace !\u003d line.length()) {\n                outdent \u003d Integer.min(outdent, leadingWhitespace);\n            }\n        }\n        String lastLine \u003d lines.get(lines.size() - 1);\n        if (lastLine.isBlank()) {\n            outdent \u003d Integer.min(outdent, lastLine.length());\n        }\n        return outdent;\n    }\n\n    /**\n     * Returns a string whose value is this string, with escape sequences\n     * translated as if in a string literal.\n     * \u003cp\u003e\n     * Escape sequences are translated as follows;\n     * \u003ctable class\u003d\"striped\"\u003e\n     *   \u003ccaption style\u003d\"display:none\"\u003eTranslation\u003c/caption\u003e\n     *   \u003cthead\u003e\n     *   \u003ctr\u003e\n     *     \u003cth scope\u003d\"col\"\u003eEscape\u003c/th\u003e\n     *     \u003cth scope\u003d\"col\"\u003eName\u003c/th\u003e\n     *     \u003cth scope\u003d\"col\"\u003eTranslation\u003c/th\u003e\n     *   \u003c/tr\u003e\n     *   \u003c/thead\u003e\n     *   \u003ctbody\u003e\n     *   \u003ctr\u003e\n     *     \u003cth scope\u003d\"row\"\u003e{@code \\u005Cb}\u003c/th\u003e\n     *     \u003ctd\u003ebackspace\u003c/td\u003e\n     *     \u003ctd\u003e{@code U+0008}\u003c/td\u003e\n     *   \u003c/tr\u003e\n     *   \u003ctr\u003e\n     *     \u003cth scope\u003d\"row\"\u003e{@code \\u005Ct}\u003c/th\u003e\n     *     \u003ctd\u003ehorizontal tab\u003c/td\u003e\n     *     \u003ctd\u003e{@code U+0009}\u003c/td\u003e\n     *   \u003c/tr\u003e\n     *   \u003ctr\u003e\n     *     \u003cth scope\u003d\"row\"\u003e{@code \\u005Cn}\u003c/th\u003e\n     *     \u003ctd\u003eline feed\u003c/td\u003e\n     *     \u003ctd\u003e{@code U+000A}\u003c/td\u003e\n     *   \u003c/tr\u003e\n     *   \u003ctr\u003e\n     *     \u003cth scope\u003d\"row\"\u003e{@code \\u005Cf}\u003c/th\u003e\n     *     \u003ctd\u003eform feed\u003c/td\u003e\n     *     \u003ctd\u003e{@code U+000C}\u003c/td\u003e\n     *   \u003c/tr\u003e\n     *   \u003ctr\u003e\n     *     \u003cth scope\u003d\"row\"\u003e{@code \\u005Cr}\u003c/th\u003e\n     *     \u003ctd\u003ecarriage return\u003c/td\u003e\n     *     \u003ctd\u003e{@code U+000D}\u003c/td\u003e\n     *   \u003c/tr\u003e\n     *   \u003ctr\u003e\n     *     \u003cth scope\u003d\"row\"\u003e{@code \\u005Cs}\u003c/th\u003e\n     *     \u003ctd\u003espace\u003c/td\u003e\n     *     \u003ctd\u003e{@code U+0020}\u003c/td\u003e\n     *   \u003c/tr\u003e\n     *   \u003ctr\u003e\n     *     \u003cth scope\u003d\"row\"\u003e{@code \\u005C\"}\u003c/th\u003e\n     *     \u003ctd\u003edouble quote\u003c/td\u003e\n     *     \u003ctd\u003e{@code U+0022}\u003c/td\u003e\n     *   \u003c/tr\u003e\n     *   \u003ctr\u003e\n     *     \u003cth scope\u003d\"row\"\u003e{@code \\u005C\u0027}\u003c/th\u003e\n     *     \u003ctd\u003esingle quote\u003c/td\u003e\n     *     \u003ctd\u003e{@code U+0027}\u003c/td\u003e\n     *   \u003c/tr\u003e\n     *   \u003ctr\u003e\n     *     \u003cth scope\u003d\"row\"\u003e{@code \\u005C\\u005C}\u003c/th\u003e\n     *     \u003ctd\u003ebackslash\u003c/td\u003e\n     *     \u003ctd\u003e{@code U+005C}\u003c/td\u003e\n     *   \u003c/tr\u003e\n     *   \u003ctr\u003e\n     *     \u003cth scope\u003d\"row\"\u003e{@code \\u005C0 - \\u005C377}\u003c/th\u003e\n     *     \u003ctd\u003eoctal escape\u003c/td\u003e\n     *     \u003ctd\u003ecode point equivalents\u003c/td\u003e\n     *   \u003c/tr\u003e\n     *   \u003ctr\u003e\n     *     \u003cth scope\u003d\"row\"\u003e{@code \\u005C\u003cline-terminator\u003e}\u003c/th\u003e\n     *     \u003ctd\u003econtinuation\u003c/td\u003e\n     *     \u003ctd\u003ediscard\u003c/td\u003e\n     *   \u003c/tr\u003e\n     *   \u003c/tbody\u003e\n     * \u003c/table\u003e\n     *\n     * @implNote\n     * This method does \u003cem\u003enot\u003c/em\u003e translate Unicode escapes such as \"{@code \\u005cu2022}\".\n     * Unicode escapes are translated by the Java compiler when reading input characters and\n     * are not part of the string literal specification.\n     *\n     * @throws IllegalArgumentException when an escape sequence is malformed.\n     *\n     * @return String with escape sequences translated.\n     *\n     * @jls 3.10.7 Escape Sequences\n     *\n     * @since 15\n     */\n    public String translateEscapes() {\n        if (isEmpty()) {\n            return \"\";\n        }\n        char[] chars \u003d toCharArray();\n        int length \u003d chars.length;\n        int from \u003d 0;\n        int to \u003d 0;\n        while (from \u003c length) {\n            char ch \u003d chars[from++];\n            if (ch \u003d\u003d \u0027\\\\\u0027) {\n                ch \u003d from \u003c length ? chars[from++] : \u0027\\0\u0027;\n                switch (ch) {\n                case \u0027b\u0027:\n                    ch \u003d \u0027\\b\u0027;\n                    break;\n                case \u0027f\u0027:\n                    ch \u003d \u0027\\f\u0027;\n                    break;\n                case \u0027n\u0027:\n                    ch \u003d \u0027\\n\u0027;\n                    break;\n                case \u0027r\u0027:\n                    ch \u003d \u0027\\r\u0027;\n                    break;\n                case \u0027s\u0027:\n                    ch \u003d \u0027 \u0027;\n                    break;\n                case \u0027t\u0027:\n                    ch \u003d \u0027\\t\u0027;\n                    break;\n                case \u0027\\\u0027\u0027:\n                case \u0027\\\"\u0027:\n                case \u0027\\\\\u0027:\n                    // as is\n                    break;\n                case \u00270\u0027: case \u00271\u0027: case \u00272\u0027: case \u00273\u0027:\n                case \u00274\u0027: case \u00275\u0027: case \u00276\u0027: case \u00277\u0027:\n                    int limit \u003d Integer.min(from + (ch \u003c\u003d \u00273\u0027 ? 2 : 1), length);\n                    int code \u003d ch - \u00270\u0027;\n                    while (from \u003c limit) {\n                        ch \u003d chars[from];\n                        if (ch \u003c \u00270\u0027 || \u00277\u0027 \u003c ch) {\n                            break;\n                        }\n                        from++;\n                        code \u003d (code \u003c\u003c 3) | (ch - \u00270\u0027);\n                    }\n                    ch \u003d (char)code;\n                    break;\n                case \u0027\\n\u0027:\n                    continue;\n                case \u0027\\r\u0027:\n                    if (from \u003c length \u0026\u0026 chars[from] \u003d\u003d \u0027\\n\u0027) {\n                        from++;\n                    }\n                    continue;\n                default: {\n                    String msg \u003d String.format(\n                        \"Invalid escape sequence: \\\\%c \\\\\\\\u%04X\",\n                        ch, (int)ch);\n                    throw new IllegalArgumentException(msg);\n                }\n                }\n            }\n\n            chars[to++] \u003d ch;\n        }\n\n        return new String(chars, 0, to);\n    }\n\n    /**\n     * This method allows the application of a function to {@code this}\n     * string. The function should expect a single String argument\n     * and produce an {@code R} result.\n     * \u003cp\u003e\n     * Any exception thrown by {@code f.apply()} will be propagated to the\n     * caller.\n     *\n     * @param f    a function to apply\n     *\n     * @param \u003cR\u003e  the type of the result\n     *\n     * @return     the result of applying the function to this string\n     *\n     * @see java.util.function.Function\n     *\n     * @since 12\n     */\n    public \u003cR\u003e R transform(Function\u003c? super String, ? extends R\u003e f) {\n        return f.apply(this);\n    }\n\n    /**\n     * This object (which is already a string!) is itself returned.\n     *\n     * @return  the string itself.\n     */\n    public String toString() {\n        return this;\n    }\n\n    /**\n     * Returns a stream of {@code int} zero-extending the {@code char} values\n     * from this sequence.  Any char which maps to a \u003ca\n     * href\u003d\"{@docRoot}/java.base/java/lang/Character.html#unicode\"\u003esurrogate code\n     * point\u003c/a\u003e is passed through uninterpreted.\n     *\n     * @return an IntStream of char values from this sequence\n     * @since 9\n     */\n    @Override\n    public IntStream chars() {\n        return StreamSupport.intStream(\n            isLatin1() ? new StringLatin1.CharsSpliterator(value, Spliterator.IMMUTABLE)\n                       : new StringUTF16.CharsSpliterator(value, Spliterator.IMMUTABLE),\n            false);\n    }\n\n\n    /**\n     * Returns a stream of code point values from this sequence.  Any surrogate\n     * pairs encountered in the sequence are combined as if by {@linkplain\n     * Character#toCodePoint Character.toCodePoint} and the result is passed\n     * to the stream. Any other code units, including ordinary BMP characters,\n     * unpaired surrogates, and undefined code units, are zero-extended to\n     * {@code int} values which are then passed to the stream.\n     *\n     * @return an IntStream of Unicode code points from this sequence\n     * @since 9\n     */\n    @Override\n    public IntStream codePoints() {\n        return StreamSupport.intStream(\n            isLatin1() ? new StringLatin1.CharsSpliterator(value, Spliterator.IMMUTABLE)\n                       : new StringUTF16.CodePointsSpliterator(value, Spliterator.IMMUTABLE),\n            false);\n    }\n\n    /**\n     * Converts this string to a new character array.\n     *\n     * @return  a newly allocated character array whose length is the length\n     *          of this string and whose contents are initialized to contain\n     *          the character sequence represented by this string.\n     */\n    public char[] toCharArray() {\n        return isLatin1() ? StringLatin1.toChars(value)\n                          : StringUTF16.toChars(value);\n    }\n\n    /**\n     * Returns a formatted string using the specified format string and\n     * arguments.\n     *\n     * \u003cp\u003e The locale always used is the one returned by {@link\n     * java.util.Locale#getDefault(java.util.Locale.Category)\n     * Locale.getDefault(Locale.Category)} with\n     * {@link java.util.Locale.Category#FORMAT FORMAT} category specified.\n     *\n     * @param  format\n     *         A \u003ca href\u003d\"../util/Formatter.html#syntax\"\u003eformat string\u003c/a\u003e\n     *\n     * @param  args\n     *         Arguments referenced by the format specifiers in the format\n     *         string.  If there are more arguments than format specifiers, the\n     *         extra arguments are ignored.  The number of arguments is\n     *         variable and may be zero.  The maximum number of arguments is\n     *         limited by the maximum dimension of a Java array as defined by\n     *         \u003ccite\u003eThe Java Virtual Machine Specification\u003c/cite\u003e.\n     *         The behaviour on a\n     *         {@code null} argument depends on the \u003ca\n     *         href\u003d\"../util/Formatter.html#syntax\"\u003econversion\u003c/a\u003e.\n     *\n     * @throws  java.util.IllegalFormatException\n     *          If a format string contains an illegal syntax, a format\n     *          specifier that is incompatible with the given arguments,\n     *          insufficient arguments given the format string, or other\n     *          illegal conditions.  For specification of all possible\n     *          formatting errors, see the \u003ca\n     *          href\u003d\"../util/Formatter.html#detail\"\u003eDetails\u003c/a\u003e section of the\n     *          formatter class specification.\n     *\n     * @return  A formatted string\n     *\n     * @see  java.util.Formatter\n     * @since  1.5\n     */\n    public static String format(String format, Object... args) {\n        return new Formatter().format(format, args).toString();\n    }\n\n    /**\n     * Returns a formatted string using the specified locale, format string,\n     * and arguments.\n     *\n     * @param  l\n     *         The {@linkplain java.util.Locale locale} to apply during\n     *         formatting.  If {@code l} is {@code null} then no localization\n     *         is applied.\n     *\n     * @param  format\n     *         A \u003ca href\u003d\"../util/Formatter.html#syntax\"\u003eformat string\u003c/a\u003e\n     *\n     * @param  args\n     *         Arguments referenced by the format specifiers in the format\n     *         string.  If there are more arguments than format specifiers, the\n     *         extra arguments are ignored.  The number of arguments is\n     *         variable and may be zero.  The maximum number of arguments is\n     *         limited by the maximum dimension of a Java array as defined by\n     *         \u003ccite\u003eThe Java Virtual Machine Specification\u003c/cite\u003e.\n     *         The behaviour on a\n     *         {@code null} argument depends on the\n     *         \u003ca href\u003d\"../util/Formatter.html#syntax\"\u003econversion\u003c/a\u003e.\n     *\n     * @throws  java.util.IllegalFormatException\n     *          If a format string contains an illegal syntax, a format\n     *          specifier that is incompatible with the given arguments,\n     *          insufficient arguments given the format string, or other\n     *          illegal conditions.  For specification of all possible\n     *          formatting errors, see the \u003ca\n     *          href\u003d\"../util/Formatter.html#detail\"\u003eDetails\u003c/a\u003e section of the\n     *          formatter class specification\n     *\n     * @return  A formatted string\n     *\n     * @see  java.util.Formatter\n     * @since  1.5\n     */\n    public static String format(Locale l, String format, Object... args) {\n        return new Formatter(l).format(format, args).toString();\n    }\n\n    /**\n     * Formats using this string as the format string, and the supplied\n     * arguments.\n     *\n     * @implSpec This method is equivalent to {@code String.format(this, args)}.\n     *\n     * @param  args\n     *         Arguments referenced by the format specifiers in this string.\n     *\n     * @return  A formatted string\n     *\n     * @see  java.lang.String#format(String,Object...)\n     * @see  java.util.Formatter\n     *\n     * @since 15\n     *\n     */\n    public String formatted(Object... args) {\n        return new Formatter().format(this, args).toString();\n    }\n\n    /**\n     * Returns the string representation of the {@code Object} argument.\n     *\n     * @param   obj   an {@code Object}.\n     * @return  if the argument is {@code null}, then a string equal to\n     *          {@code \"null\"}; otherwise, the value of\n     *          {@code obj.toString()} is returned.\n     * @see     java.lang.Object#toString()\n     */\n    public static String valueOf(Object obj) {\n        return (obj \u003d\u003d null) ? \"null\" : obj.toString();\n    }\n\n    /**\n     * Returns the string representation of the {@code char} array\n     * argument. The contents of the character array are copied; subsequent\n     * modification of the character array does not affect the returned\n     * string.\n     *\n     * @param   data     the character array.\n     * @return  a {@code String} that contains the characters of the\n     *          character array.\n     */\n    public static String valueOf(char[] data) {\n        return new String(data);\n    }\n\n    /**\n     * Returns the string representation of a specific subarray of the\n     * {@code char} array argument.\n     * \u003cp\u003e\n     * The {@code offset} argument is the index of the first\n     * character of the subarray. The {@code count} argument\n     * specifies the length of the subarray. The contents of the subarray\n     * are copied; subsequent modification of the character array does not\n     * affect the returned string.\n     *\n     * @param   data     the character array.\n     * @param   offset   initial offset of the subarray.\n     * @param   count    length of the subarray.\n     * @return  a {@code String} that contains the characters of the\n     *          specified subarray of the character array.\n     * @throws    IndexOutOfBoundsException if {@code offset} is\n     *          negative, or {@code count} is negative, or\n     *          {@code offset+count} is larger than\n     *          {@code data.length}.\n     */\n    public static String valueOf(char[] data, int offset, int count) {\n        return new String(data, offset, count);\n    }\n\n    /**\n     * Equivalent to {@link #valueOf(char[], int, int)}.\n     *\n     * @param   data     the character array.\n     * @param   offset   initial offset of the subarray.\n     * @param   count    length of the subarray.\n     * @return  a {@code String} that contains the characters of the\n     *          specified subarray of the character array.\n     * @throws    IndexOutOfBoundsException if {@code offset} is\n     *          negative, or {@code count} is negative, or\n     *          {@code offset+count} is larger than\n     *          {@code data.length}.\n     */\n    public static String copyValueOf(char[] data, int offset, int count) {\n        return new String(data, offset, count);\n    }\n\n    /**\n     * Equivalent to {@link #valueOf(char[])}.\n     *\n     * @param   data   the character array.\n     * @return  a {@code String} that contains the characters of the\n     *          character array.\n     */\n    public static String copyValueOf(char[] data) {\n        return new String(data);\n    }\n\n    /**\n     * Returns the string representation of the {@code boolean} argument.\n     *\n     * @param   b   a {@code boolean}.\n     * @return  if the argument is {@code true}, a string equal to\n     *          {@code \"true\"} is returned; otherwise, a string equal to\n     *          {@code \"false\"} is returned.\n     */\n    public static String valueOf(boolean b) {\n        return b ? \"true\" : \"false\";\n    }\n\n    /**\n     * Returns the string representation of the {@code char}\n     * argument.\n     *\n     * @param   c   a {@code char}.\n     * @return  a string of length {@code 1} containing\n     *          as its single character the argument {@code c}.\n     */\n    public static String valueOf(char c) {\n        if (COMPACT_STRINGS \u0026\u0026 StringLatin1.canEncode(c)) {\n            return new String(StringLatin1.toBytes(c), LATIN1);\n        }\n        return new String(StringUTF16.toBytes(c), UTF16);\n    }\n\n    /**\n     * Returns the string representation of the {@code int} argument.\n     * \u003cp\u003e\n     * The representation is exactly the one returned by the\n     * {@code Integer.toString} method of one argument.\n     *\n     * @param   i   an {@code int}.\n     * @return  a string representation of the {@code int} argument.\n     * @see     java.lang.Integer#toString(int, int)\n     */\n    public static String valueOf(int i) {\n        return Integer.toString(i);\n    }\n\n    /**\n     * Returns the string representation of the {@code long} argument.\n     * \u003cp\u003e\n     * The representation is exactly the one returned by the\n     * {@code Long.toString} method of one argument.\n     *\n     * @param   l   a {@code long}.\n     * @return  a string representation of the {@code long} argument.\n     * @see     java.lang.Long#toString(long)\n     */\n    public static String valueOf(long l) {\n        return Long.toString(l);\n    }\n\n    /**\n     * Returns the string representation of the {@code float} argument.\n     * \u003cp\u003e\n     * The representation is exactly the one returned by the\n     * {@code Float.toString} method of one argument.\n     *\n     * @param   f   a {@code float}.\n     * @return  a string representation of the {@code float} argument.\n     * @see     java.lang.Float#toString(float)\n     */\n    public static String valueOf(float f) {\n        return Float.toString(f);\n    }\n\n    /**\n     * Returns the string representation of the {@code double} argument.\n     * \u003cp\u003e\n     * The representation is exactly the one returned by the\n     * {@code Double.toString} method of one argument.\n     *\n     * @param   d   a {@code double}.\n     * @return  a  string representation of the {@code double} argument.\n     * @see     java.lang.Double#toString(double)\n     */\n    public static String valueOf(double d) {\n        return Double.toString(d);\n    }\n\n    /**\n     * Returns a canonical representation for the string object.\n     * \u003cp\u003e\n     * A pool of strings, initially empty, is maintained privately by the\n     * class {@code String}.\n     * \u003cp\u003e\n     * When the intern method is invoked, if the pool already contains a\n     * string equal to this {@code String} object as determined by\n     * the {@link #equals(Object)} method, then the string from the pool is\n     * returned. Otherwise, this {@code String} object is added to the\n     * pool and a reference to this {@code String} object is returned.\n     * \u003cp\u003e\n     * It follows that for any two strings {@code s} and {@code t},\n     * {@code s.intern() \u003d\u003d t.intern()} is {@code true}\n     * if and only if {@code s.equals(t)} is {@code true}.\n     * \u003cp\u003e\n     * All literal strings and string-valued constant expressions are\n     * interned. String literals are defined in section {@jls 3.10.5} of the\n     * \u003ccite\u003eThe Java Language Specification\u003c/cite\u003e.\n     *\n     * @return  a string that has the same contents as this string, but is\n     *          guaranteed to be from a pool of unique strings.\n     */\n    public native String intern();\n\n    /**\n     * Returns a string whose value is the concatenation of this\n     * string repeated {@code count} times.\n     * \u003cp\u003e\n     * If this string is empty or count is zero then the empty\n     * string is returned.\n     *\n     * @param   count number of times to repeat\n     *\n     * @return  A string composed of this string repeated\n     *          {@code count} times or the empty string if this\n     *          string is empty or count is zero\n     *\n     * @throws  IllegalArgumentException if the {@code count} is\n     *          negative.\n     *\n     * @since 11\n     */\n    public String repeat(int count) {\n        if (count \u003c 0) {\n            throw new IllegalArgumentException(\"count is negative: \" + count);\n        }\n        if (count \u003d\u003d 1) {\n            return this;\n        }\n        final int len \u003d value.length;\n        if (len \u003d\u003d 0 || count \u003d\u003d 0) {\n            return \"\";\n        }\n        if (Integer.MAX_VALUE / count \u003c len) {\n            throw new OutOfMemoryError(\"Required length exceeds implementation limit\");\n        }\n        if (len \u003d\u003d 1) {\n            final byte[] single \u003d new byte[count];\n            Arrays.fill(single, value[0]);\n            return new String(single, coder);\n        }\n        final int limit \u003d len * count;\n        final byte[] multiple \u003d new byte[limit];\n        System.arraycopy(value, 0, multiple, 0, len);\n        int copied \u003d len;\n        for (; copied \u003c limit - copied; copied \u003c\u003c\u003d 1) {\n            System.arraycopy(multiple, 0, multiple, copied, copied);\n        }\n        System.arraycopy(multiple, 0, multiple, copied, limit - copied);\n        return new String(multiple, coder);\n    }\n\n    ////////////////////////////////////////////////////////////////\n\n    /**\n     * Copy character bytes from this string into dst starting at dstBegin.\n     * This method doesn\u0027t perform any range checking.\n     *\n     * Invoker guarantees: dst is in UTF16 (inflate itself for asb), if two\n     * coders are different, and dst is big enough (range check)\n     *\n     * @param dstBegin  the char index, not offset of byte[]\n     * @param coder     the coder of dst[]\n     */\n    void getBytes(byte[] dst, int dstBegin, byte coder) {\n        if (coder() \u003d\u003d coder) {\n            System.arraycopy(value, 0, dst, dstBegin \u003c\u003c coder, value.length);\n        } else {    // this.coder \u003d\u003d LATIN \u0026\u0026 coder \u003d\u003d UTF16\n            StringLatin1.inflate(value, 0, dst, dstBegin, value.length);\n        }\n    }\n\n    /**\n     * Copy character bytes from this string into dst starting at dstBegin.\n     * This method doesn\u0027t perform any range checking.\n     *\n     * Invoker guarantees: dst is in UTF16 (inflate itself for asb), if two\n     * coders are different, and dst is big enough (range check)\n     *\n     * @param srcPos    the char index, not offset of byte[]\n     * @param dstBegin  the char index to start from\n     * @param coder     the coder of dst[]\n     * @param length    the amount of copied chars\n     */\n    void getBytes(byte[] dst, int srcPos, int dstBegin, byte coder, int length) {\n        if (coder() \u003d\u003d coder) {\n            System.arraycopy(value, srcPos \u003c\u003c coder, dst, dstBegin \u003c\u003c coder, length \u003c\u003c coder);\n        } else {    // this.coder \u003d\u003d LATIN \u0026\u0026 coder \u003d\u003d UTF16\n            StringLatin1.inflate(value, srcPos, dst, dstBegin, length);\n        }\n    }\n\n    /*\n     * Package private constructor. Trailing Void argument is there for\n     * disambiguating it against other (public) constructors.\n     *\n     * Stores the char[] value into a byte[] that each byte represents\n     * the8 low-order bits of the corresponding character, if the char[]\n     * contains only latin1 character. Or a byte[] that stores all\n     * characters in their byte sequences defined by the {@code StringUTF16}.\n     */\n    String(char[] value, int off, int len, Void sig) {\n        if (len \u003d\u003d 0) {\n            this.value \u003d \"\".value;\n            this.coder \u003d \"\".coder;\n            return;\n        }\n        if (COMPACT_STRINGS) {\n            byte[] val \u003d StringUTF16.compress(value, off, len);\n            if (val !\u003d null) {\n                this.value \u003d val;\n                this.coder \u003d LATIN1;\n                return;\n            }\n        }\n        this.coder \u003d UTF16;\n        this.value \u003d StringUTF16.toBytes(value, off, len);\n    }\n\n    /*\n     * Package private constructor. Trailing Void argument is there for\n     * disambiguating it against other (public) constructors.\n     */\n    String(AbstractStringBuilder asb, Void sig) {\n        byte[] val \u003d asb.getValue();\n        int length \u003d asb.length();\n        if (asb.isLatin1()) {\n            this.coder \u003d LATIN1;\n            this.value \u003d Arrays.copyOfRange(val, 0, length);\n        } else {\n            // only try to compress val if some characters were deleted.\n            if (COMPACT_STRINGS \u0026\u0026 asb.maybeLatin1) {\n                byte[] buf \u003d StringUTF16.compress(val, 0, length);\n                if (buf !\u003d null) {\n                    this.coder \u003d LATIN1;\n                    this.value \u003d buf;\n                    return;\n                }\n            }\n            this.coder \u003d UTF16;\n            this.value \u003d Arrays.copyOfRange(val, 0, length \u003c\u003c 1);\n        }\n    }\n\n   /*\n    * Package private constructor which shares value array for speed.\n    */\n    String(byte[] value, byte coder) {\n        this.value \u003d value;\n        this.coder \u003d coder;\n    }\n\n    byte coder() {\n        return COMPACT_STRINGS ? coder : UTF16;\n    }\n\n    byte[] value() {\n        return value;\n    }\n\n    boolean isLatin1() {\n        return COMPACT_STRINGS \u0026\u0026 coder \u003d\u003d LATIN1;\n    }\n\n    @Native static final byte LATIN1 \u003d 0;\n    @Native static final byte UTF16  \u003d 1;\n\n    /*\n     * StringIndexOutOfBoundsException  if {@code index} is\n     * negative or greater than or equal to {@code length}.\n     */\n    static void checkIndex(int index, int length) {\n        Preconditions.checkIndex(index, length, Preconditions.SIOOBE_FORMATTER);\n    }\n\n    /*\n     * StringIndexOutOfBoundsException  if {@code offset}\n     * is negative or greater than {@code length}.\n     */\n    static void checkOffset(int offset, int length) {\n        Preconditions.checkFromToIndex(offset, length, length, Preconditions.SIOOBE_FORMATTER);\n    }\n\n    /*\n     * Check {@code offset}, {@code count} against {@code 0} and {@code length}\n     * bounds.\n     *\n     * @return  {@code offset} if the sub-range within bounds of the range\n     * @throws  StringIndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code count} is negative,\n     *          or {@code offset} is greater than {@code length - count}\n     */\n    static int checkBoundsOffCount(int offset, int count, int length) {\n        return Preconditions.checkFromIndexSize(offset, count, length, Preconditions.SIOOBE_FORMATTER);\n    }\n\n    /*\n     * Check {@code begin}, {@code end} against {@code 0} and {@code length}\n     * bounds.\n     *\n     * @throws  StringIndexOutOfBoundsException\n     *          If {@code begin} is negative, {@code begin} is greater than\n     *          {@code end}, or {@code end} is greater than {@code length}.\n     */\n    static void checkBoundsBeginEnd(int begin, int end, int length) {\n        Preconditions.checkFromToIndex(begin, end, length, Preconditions.SIOOBE_FORMATTER);\n    }\n\n    /**\n     * Returns the string representation of the {@code codePoint}\n     * argument.\n     *\n     * @param   codePoint a {@code codePoint}.\n     * @return  a string of length {@code 1} or {@code 2} containing\n     *          as its single character the argument {@code codePoint}.\n     * @throws IllegalArgumentException if the specified\n     *          {@code codePoint} is not a {@linkplain Character#isValidCodePoint\n     *          valid Unicode code point}.\n     */\n    static String valueOfCodePoint(int codePoint) {\n        if (COMPACT_STRINGS \u0026\u0026 StringLatin1.canEncode(codePoint)) {\n            return new String(StringLatin1.toBytes((char)codePoint), LATIN1);\n        } else if (Character.isBmpCodePoint(codePoint)) {\n            return new String(StringUTF16.toBytes((char)codePoint), UTF16);\n        } else if (Character.isSupplementaryCodePoint(codePoint)) {\n            return new String(StringUTF16.toBytesSupplementary(codePoint), UTF16);\n        }\n\n        throw new IllegalArgumentException(\n            format(\"Not a valid Unicode code point: 0x%X\", codePoint));\n    }\n\n    /**\n     * Returns an {@link Optional} containing the nominal descriptor for this\n     * instance, which is the instance itself.\n     *\n     * @return an {@link Optional} describing the {@linkplain String} instance\n     * @since 12\n     */\n    @Override\n    public Optional\u003cString\u003e describeConstable() {\n        return Optional.of(this);\n    }\n\n    /**\n     * Resolves this instance as a {@link ConstantDesc}, the result of which is\n     * the instance itself.\n     *\n     * @param lookup ignored\n     * @return the {@linkplain String} instance\n     * @since 12\n     */\n    @Override\n    public String resolveConstantDesc(MethodHandles.Lookup lookup) {\n        return this;\n    }\n\n}\n"
    }
  }
}
java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-20/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI.create(URI.java:911)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:756)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:753)
	at scala.meta.internal.metals.WorkspaceLspService.didOpen(WorkspaceLspService.scala:388)
	at scala.meta.metals.lsp.DelegatingScalaService.didOpen(DelegatingScalaService.scala:39)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$recursiveFindRpcMethods$0(GenericEndpoint.java:65)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:160)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:231)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:198)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:185)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:97)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:114)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:577)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1623)
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-20/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI$Parser.fail(URI.java:2963)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3134)
	at java.base/java.net.URI$Parser.parse(URI.java:3170)
	at java.base/java.net.URI.<init>(URI.java:628)
	at java.base/java.net.URI.create(URI.java:909)
	... 22 more

Jul 01, 2024 2:31:40 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didClose",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-20/lib/src.zip%21/java.base/java/lang/String.java"
    }
  }
}
java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-20/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI.create(URI.java:911)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:756)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:753)
	at scala.meta.internal.metals.WorkspaceLspService.didClose(WorkspaceLspService.scala:407)
	at scala.meta.metals.lsp.DelegatingScalaService.didClose(DelegatingScalaService.scala:53)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$recursiveFindRpcMethods$0(GenericEndpoint.java:65)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:160)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:231)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:198)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:185)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:97)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:114)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:577)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1623)
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-20/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI$Parser.fail(URI.java:2963)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3134)
	at java.base/java.net.URI$Parser.parse(URI.java:3170)
	at java.base/java.net.URI.<init>(URI.java:628)
	at java.base/java.net.URI.create(URI.java:909)
	... 22 more

2024.07.01 14:34:45 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (11 scala sources)
2024.07.01 14:34:45 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.23s
2024.07.01 14:35:08 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (11 scala sources)
2024.07.01 14:35:08 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.19s
2024.07.01 14:36:23 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (11 scala sources)
2024.07.01 14:36:23 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.42s
2024.07.01 14:38:02 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (11 scala sources)
2024.07.01 14:38:02 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.19s
2024.07.01 14:38:11 INFO  no build target found for D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 03\3.scala. Using presentation compiler with project's scala-library version: 3.3.3
2024.07.01 14:38:12 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (12 scala sources)
2024.07.01 14:38:12 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.3s
2024.07.01 14:38:12 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (12 scala sources)
2024.07.01 14:38:12 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.3s
2024.07.01 14:38:14 INFO  time: indexed workspace in 2.39s
2024.07.01 14:39:03 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (12 scala sources)
2024.07.01 14:39:05 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 1.99s
Jul 01, 2024 2:39:07 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4842
2024.07.01 14:39:12 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (12 scala sources)
2024.07.01 14:39:12 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.15s
2024.07.01 14:39:50 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (12 scala sources)
2024.07.01 14:39:50 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.39s
Jul 01, 2024 2:39:54 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 5016
2024.07.01 14:40:32 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (12 scala sources)
2024.07.01 14:40:32 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.87s
2024.07.01 14:42:04 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (12 scala sources)
2024.07.01 14:42:05 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 1.02s
2024.07.01 14:43:51 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (12 scala sources)
2024.07.01 14:43:51 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.5s
2024.07.01 14:44:09 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (12 scala sources)
2024.07.01 14:44:09 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.16s
2024.07.01 14:44:26 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (12 scala sources)
2024.07.01 14:44:26 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.85s
2024.07.01 14:44:58 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (12 scala sources)
2024.07.01 14:44:58 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.33s
2024.07.01 14:45:47 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (12 scala sources)
2024.07.01 14:45:47 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.5s
Jul 01, 2024 2:46:30 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 5524
2024.07.01 14:46:37 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (12 scala sources)
2024.07.01 14:46:37 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.19s
2024.07.01 14:47:38 INFO  no build target found for D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 03\4.scala. Using presentation compiler with project's scala-library version: 3.3.3
2024.07.01 14:47:39 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (13 scala sources)
2024.07.01 14:47:39 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (13 scala sources)
2024.07.01 14:47:39 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.2s
2024.07.01 14:47:40 INFO  time: indexed workspace in 2.03s
2024.07.01 14:47:41 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (13 scala sources)
2024.07.01 14:47:41 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.19s
2024.07.01 14:47:49 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (13 scala sources)
2024.07.01 14:47:49 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.16s
2024.07.01 14:48:16 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (13 scala sources)
2024.07.01 14:48:16 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.32s
2024.07.01 14:49:33 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (13 scala sources)
2024.07.01 14:49:33 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.8s
2024.07.01 14:50:15 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (13 scala sources)
2024.07.01 14:50:15 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.23s
2024.07.01 14:52:01 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (13 scala sources)
2024.07.01 14:52:01 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.29s
Jul 01, 2024 2:53:27 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 6718
2024.07.01 14:53:53 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (13 scala sources)
2024.07.01 14:53:53 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.65s
2024.07.01 14:54:32 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (13 scala sources)
2024.07.01 14:54:32 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.49s
2024.07.01 14:55:10 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (13 scala sources)
2024.07.01 14:55:10 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.28s
Jul 01, 2024 2:55:58 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 6860
Jul 01, 2024 2:57:21 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 6885
Jul 01, 2024 2:57:57 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 6903
2024.07.01 14:58:55 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (13 scala sources)
2024.07.01 14:58:55 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.4s
2024.07.01 14:58:59 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (13 scala sources)
2024.07.01 14:58:59 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.32s
2024.07.01 15:01:40 INFO  Shutting down server
2024.07.01 15:01:40 INFO  shutting down Metals
2024.07.01 15:01:40 INFO  Shut down connection with build server.
2024.07.01 15:01:40 INFO  Exiting server
2024.07.01 20:08:48 INFO  Started: Metals version 1.3.2 in folders 'D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals' for client Visual Studio Code 1.90.2.
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@45b23c55]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@6ea53c6c]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@45b23c55]
2024.07.01 20:08:50 WARN  Flyway upgrade recommended: H2 2.2.224 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.
2024.07.01 20:08:51 INFO  Attempting to connect to the build server...
2024.07.01 20:08:51 INFO  Running BSP server List(C:\Users\USER\AppData\Local\Coursier\data\bin\.scala-cli.aux.exe, bsp, --json-options, D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\.scala-build\ide-options-v2.json, --json-launcher-options, D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\.scala-build\ide-launcher-options.json, --envs-file, D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\.scala-build\ide-envs.json, D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals)
2024.07.01 20:08:51 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\.metals\bsp.trace.json or C:\Users\USER\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.07.01 20:08:54 INFO  time: Connected to build server in 3.3s
2024.07.01 20:08:54 INFO  Connected to Build server: scala-cli v1.3.2
2024.07.01 20:08:54 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (13 scala sources)
2024.07.01 20:08:54 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.5s
2024.07.01 20:08:54 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (13 scala sources)
2024.07.01 20:08:54 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.31s
2024.07.01 20:08:58 INFO  time: indexed workspace in 3.65s
2024.07.01 20:08:58 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (13 scala sources)
2024.07.01 20:08:58 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.31s
2024.07.01 20:08:58 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (13 scala sources)
2024.07.01 20:08:59 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.43s
2024.07.01 20:08:59 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (13 scala sources)
2024.07.01 20:08:59 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.41s
2024.07.01 20:09:15 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (13 scala sources)
2024.07.01 20:09:15 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.16s
2024.07.01 20:10:48 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (13 scala sources)
2024.07.01 20:10:48 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.17s
2024.07.01 20:10:54 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (13 scala sources)
2024.07.01 20:10:54 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.27s
2024.07.01 20:11:26 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (13 scala sources)
2024.07.01 20:11:26 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.25s
2024.07.01 20:11:44 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (13 scala sources)
2024.07.01 20:11:44 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.26s
2024.07.01 20:12:30 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (13 scala sources)
2024.07.01 20:12:30 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.18s
2024.07.01 20:13:01 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (13 scala sources)
2024.07.01 20:13:01 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.11s
Jul 01, 2024 8:13:18 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 207
2024.07.02 05:02:37 INFO  Started: Metals version 1.3.2 in folders 'D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals' for client Visual Studio Code 1.90.2.
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@12415a8e]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@68de7497]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@12415a8e]
2024.07.02 05:02:41 WARN  Flyway upgrade recommended: H2 2.2.224 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.
2024.07.02 05:02:41 INFO  no build target found for D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 03\1.scala. Using presentation compiler with project's scala-library version: 3.3.3
2024.07.02 05:02:42 INFO  Attempting to connect to the build server...
2024.07.02 05:02:42 INFO  Running BSP server List(C:\Users\USER\AppData\Local\Coursier\data\bin\.scala-cli.aux.exe, bsp, --json-options, D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\.scala-build\ide-options-v2.json, --json-launcher-options, D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\.scala-build\ide-launcher-options.json, --envs-file, D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\.scala-build\ide-envs.json, D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals)
2024.07.02 05:02:43 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\.metals\bsp.trace.json or C:\Users\USER\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.07.02 05:02:55 INFO  no build target found for D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 03\1.scala. Using presentation compiler with project's scala-library version: 3.3.3
2024.07.02 05:02:58 INFO  BSP server: Starting compilation server
2024.07.02 05:03:06 INFO  time: Connected to build server in 23s
2024.07.02 05:03:06 INFO  Connected to Build server: scala-cli v1.3.2
2024.07.02 05:03:06 INFO  time: Imported build in 0.16s
2024.07.02 05:03:08 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (13 scala sources)
2024.07.02 05:03:12 INFO  time: indexed workspace in 5.72s
2024.07.02 05:03:16 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 8.18s
2024.07.02 05:03:16 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (13 scala sources)
2024.07.02 05:03:20 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 3.53s
2024.07.02 05:03:34 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (13 scala sources)
2024.07.02 05:03:36 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 1.21s
2024.07.02 05:03:38 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (13 scala sources)
2024.07.02 05:03:40 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 2.67s
Jul 02, 2024 5:04:39 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 42
2024.07.02 05:05:08 INFO  Shutting down server
2024.07.02 05:05:08 INFO  shutting down Metals
2024.07.02 05:05:08 INFO  Shut down connection with build server.
2024.07.02 05:05:08 INFO  Exiting server
2024.07.02 08:02:07 INFO  Started: Metals version 1.3.2 in folders 'D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals' for client Visual Studio Code 1.90.2.
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@56ab79a4]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@3e0594f5]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@56ab79a4]
2024.07.02 08:02:08 WARN  Flyway upgrade recommended: H2 2.2.224 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.
2024.07.02 08:02:09 INFO  Attempting to connect to the build server...
2024.07.02 08:02:09 INFO  Running BSP server List(C:\Users\USER\AppData\Local\Coursier\data\bin\.scala-cli.aux.exe, bsp, --json-options, D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\.scala-build\ide-options-v2.json, --json-launcher-options, D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\.scala-build\ide-launcher-options.json, --envs-file, D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\.scala-build\ide-envs.json, D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals)
2024.07.02 08:02:10 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\.metals\bsp.trace.json or C:\Users\USER\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.07.02 08:02:12 INFO  BSP server: Starting compilation server
2024.07.02 08:02:16 INFO  time: Connected to build server in 6.79s
2024.07.02 08:02:16 INFO  Connected to Build server: scala-cli v1.3.2
2024.07.02 08:02:16 INFO  time: Imported build in 0.12s
2024.07.02 08:02:17 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (13 scala sources)
2024.07.02 08:02:20 INFO  time: indexed workspace in 3.75s
2024.07.02 08:02:22 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 4.19s
2024.07.02 08:02:22 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (13 scala sources)
2024.07.02 08:02:23 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 1.13s
2024.07.02 08:02:23 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (13 scala sources)
2024.07.02 08:02:24 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 1.08s
2024.07.02 08:02:24 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (13 scala sources)
2024.07.02 08:02:26 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.94s
2024.07.02 08:02:26 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (13 scala sources)
2024.07.02 08:02:26 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.38s
Jul 02, 2024 8:17:28 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 74
Jul 02, 2024 8:20:20 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 87
2024.07.02 08:26:14 INFO  Shutting down server
2024.07.02 08:26:14 INFO  shutting down Metals
2024.07.02 08:26:14 INFO  Shut down connection with build server.
2024.07.02 08:26:14 INFO  Exiting server
2024.07.08 06:05:21 INFO  Started: Metals version 1.3.2 in folders 'D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals' for client Visual Studio Code 1.91.0.
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@45b23c55]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@6ea53c6c]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@45b23c55]
2024.07.08 06:05:23 WARN  Flyway upgrade recommended: H2 2.2.224 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.
2024.07.08 06:05:25 INFO  Attempting to connect to the build server...
2024.07.08 06:05:25 INFO  Running BSP server List(C:\Users\USER\AppData\Local\Coursier\data\bin\.scala-cli.aux.exe, bsp, --json-options, D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\.scala-build\ide-options-v2.json, --json-launcher-options, D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\.scala-build\ide-launcher-options.json, --envs-file, D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\.scala-build\ide-envs.json, D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals)
2024.07.08 06:05:26 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\.metals\bsp.trace.json or C:\Users\USER\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.07.08 06:05:35 INFO  time: Connected to build server in 10s
2024.07.08 06:05:35 INFO  Connected to Build server: scala-cli v1.3.2
2024.07.08 06:05:36 INFO  time: Imported build in 0.15s
2024.07.08 06:05:36 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (13 scala sources)
2024.07.08 06:05:58 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 21s
2024.07.08 06:05:58 INFO  time: Imported build in 4.16s
2024.07.08 06:05:59 INFO  Deduplicating compilation of FunctionalProgramming_Practicals_53cb6fdf00 from bsp client 'scala-cli 1.3.2' (since 24.474s)
2024.07.08 06:05:59 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 06:05:59 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 06:05:59 INFO  time: indexed workspace in 23s
2024.07.08 06:06:06 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 6.77s
2024.07.08 06:06:07 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 06:06:09 INFO  Deduplicating compilation of FunctionalProgramming_Practicals_53cb6fdf00 from bsp client 'scala-cli 1.3.2' (since 34.772s)
2024.07.08 06:06:09 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 06:06:12 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 2.73s
2024.07.08 06:06:14 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 06:06:19 INFO  time: indexed workspace in 20s
2024.07.08 06:06:19 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 5.03s
2024.07.08 06:06:24 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 06:06:27 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 3.86s
Jul 08, 2024 6:06:41 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 64
2024.07.08 06:08:13 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 06:08:13 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.48s
2024.07.08 06:16:33 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 06:16:33 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.26s
2024.07.08 06:17:18 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 06:17:18 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.52s
Jul 08, 2024 6:17:44 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 302
2024.07.08 06:17:51 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 06:17:51 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.28s
Jul 08, 2024 6:17:56 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 355
2024.07.08 06:18:05 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 06:18:05 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.26s
2024.07.08 06:18:20 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 06:18:20 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.29s
2024.07.08 06:18:40 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 06:18:40 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.28s
2024.07.08 06:20:34 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 06:20:34 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.54s
Jul 08, 2024 6:21:16 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 837
2024.07.08 06:22:04 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 06:22:04 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.44s
2024.07.08 06:22:19 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 06:22:19 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.23s
2024.07.08 06:22:47 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 06:22:47 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.22s
2024.07.08 06:23:47 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 06:23:47 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.24s
2024.07.08 06:25:20 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 06:25:21 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 1.54s
2024.07.08 06:25:48 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 06:25:48 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.16s
2024.07.08 06:26:09 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 06:26:09 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.33s
2024.07.08 06:26:36 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 06:26:36 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.32s
2024.07.08 06:26:47 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 06:26:47 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.42s
2024.07.08 06:27:11 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 06:27:11 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.34s
2024.07.08 06:27:23 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 06:27:23 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.17s
2024.07.08 06:27:29 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 06:27:29 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.26s
2024.07.08 06:27:34 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 06:27:34 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.21s
2024.07.08 06:27:47 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 06:27:47 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.23s
Jul 08, 2024 6:27:51 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1809
2024.07.08 06:28:05 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 06:28:05 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.3s
2024.07.08 06:28:26 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 06:28:26 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.23s
2024.07.08 06:29:04 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 06:29:04 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.17s
2024.07.08 06:29:21 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 06:29:21 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.14s
2024.07.08 06:29:47 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 06:29:47 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.31s
2024.07.08 06:30:26 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 06:30:26 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.17s
Jul 08, 2024 6:33:08 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2521
Jul 08, 2024 6:33:19 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2544
2024.07.08 06:33:59 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 06:33:59 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.3s
2024.07.08 06:34:12 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 06:34:12 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.13s
2024.07.08 06:35:25 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 06:35:25 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.15s
2024.07.08 06:36:36 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 06:36:36 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.29s
2024.07.08 06:43:07 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 06:43:07 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.29s
Jul 08, 2024 6:43:20 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3517
2024.07.08 06:44:22 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 06:44:22 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.14s
2024.07.08 06:45:36 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 06:45:36 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.16s
2024.07.08 06:45:47 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 06:45:47 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.16s
2024.07.08 06:46:28 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 06:46:28 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.14s
2024.07.08 06:47:33 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 06:47:33 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.35s
2024.07.08 06:48:54 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 06:48:54 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.16s
Jul 08, 2024 6:49:35 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4219
2024.07.08 06:49:45 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 06:49:45 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.17s
2024.07.08 06:50:42 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 06:50:42 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.14s
Jul 08, 2024 6:53:16 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4387
2024.07.08 06:54:57 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 06:54:57 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.15s
2024.07.08 06:56:05 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 06:56:05 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.14s
2024.07.08 06:57:22 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 06:57:22 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.15s
2024.07.08 06:58:17 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 06:58:17 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.13s
2024.07.08 06:59:13 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 06:59:13 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.19s
2024.07.08 07:02:52 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 07:02:52 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.16s
2024.07.08 07:03:15 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 07:03:15 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.15s
2024.07.08 07:04:17 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 07:04:17 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.14s
2024.07.08 07:05:05 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 07:05:05 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.15s
2024.07.08 07:05:29 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 07:05:29 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.13s
2024.07.08 07:05:51 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 07:05:51 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.12s
2024.07.08 07:06:13 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 07:06:13 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.11s
2024.07.08 07:06:33 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 07:06:33 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.12s
Jul 08, 2024 7:06:44 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 5844
2024.07.08 07:06:45 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (14 scala sources)
2024.07.08 07:06:45 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.11s
2024.07.08 07:11:19 INFO  no build target found for D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 04\2.scala. Using presentation compiler with project's scala-library version: 3.3.3
2024.07.08 07:11:20 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (15 scala sources)
2024.07.08 07:11:20 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.38s
2024.07.08 07:11:20 INFO  no build target found for D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 04\2.scala. Using presentation compiler with project's scala-library version: 3.3.3
2024.07.08 07:11:20 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (15 scala sources)
2024.07.08 07:11:20 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.29s
2024.07.08 07:11:21 INFO  time: code lens generation in 1.88s
2024.07.08 07:11:22 INFO  time: indexed workspace in 1.48s
2024.07.08 07:11:22 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (15 scala sources)
2024.07.08 07:11:22 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.19s
2024.07.08 07:48:24 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (15 scala sources)
2024.07.08 07:48:24 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.8s
2024.07.08 08:41:35 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (15 scala sources)
2024.07.08 08:41:35 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.43s
Jul 08, 2024 8:41:46 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 5981
Jul 08, 2024 8:43:10 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 6207
Jul 08, 2024 8:43:10 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 6209
2024.07.08 08:43:16 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (15 scala sources)
2024.07.08 08:43:16 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.34s
2024.07.08 08:43:45 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (15 scala sources)
2024.07.08 08:43:45 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.46s
2024.07.08 08:43:52 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (15 scala sources)
2024.07.08 08:43:52 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.28s
2024.07.08 08:43:52 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (15 scala sources)
2024.07.08 08:43:52 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.18s
2024.07.08 08:44:12 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (15 scala sources)
2024.07.08 08:44:12 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.26s
2024.07.08 08:44:22 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (15 scala sources)
2024.07.08 08:44:22 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.23s
2024.07.08 08:44:32 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (15 scala sources)
2024.07.08 08:44:32 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.31s
2024.07.08 08:44:35 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (15 scala sources)
2024.07.08 08:44:35 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.14s
2024.07.08 09:11:07 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (15 scala sources)
2024.07.08 09:11:07 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.44s
Jul 08, 2024 9:11:15 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 6585
2024.07.08 09:11:29 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (15 scala sources)
2024.07.08 09:11:29 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.6s
2024.07.08 09:12:14 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (15 scala sources)
2024.07.08 09:12:14 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.42s
2024.07.08 09:12:59 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (15 scala sources)
2024.07.08 09:12:59 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.25s
Jul 08, 2024 9:13:04 AM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\.metals\.reports\metals-full\2024-07-08\r_compiler-error_(FunctionalProgramming_Practicals_53cb6fdf00)_09-13-04-473.md
2024.07.08 09:13:06 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (15 scala sources)
2024.07.08 09:13:06 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.43s
2024.07.08 09:13:23 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (15 scala sources)
2024.07.08 09:13:23 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.37s
2024.07.08 09:22:09 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (15 scala sources)
2024.07.08 09:22:09 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.48s
2024.07.08 09:23:17 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (15 scala sources)
2024.07.08 09:23:19 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 1.6s
2024.07.08 09:23:31 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (15 scala sources)
2024.07.08 09:23:31 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.55s
2024.07.08 09:23:48 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (15 scala sources)
2024.07.08 09:23:48 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.26s
2024.07.08 09:25:31 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (15 scala sources)
2024.07.08 09:25:31 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.51s
2024.07.08 09:26:15 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (15 scala sources)
2024.07.08 09:26:15 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.63s
2024.07.08 09:26:17 INFO  file:///D:/University/Sem%203/Functional%20Programming/practical/FunctionalProgramming_Practicals/Practical%2004/2.scala:8:21: stale bloop error: Not found: num
    matchThePattern(num);
                    ^^^
2024.07.08 09:26:46 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (15 scala sources)
2024.07.08 09:26:48 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 2.74s
2024.07.08 09:28:13 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (15 scala sources)
2024.07.08 09:28:15 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 1.77s
2024.07.08 09:29:12 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (15 scala sources)
2024.07.08 09:29:12 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.4s
2024.07.08 09:30:20 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (15 scala sources)
2024.07.08 09:30:20 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.2s
2024.07.08 09:30:47 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (15 scala sources)
2024.07.08 09:30:47 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.29s
2024.07.08 09:31:32 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (15 scala sources)
2024.07.08 09:31:32 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.38s
2024.07.08 09:31:47 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (15 scala sources)
2024.07.08 09:31:47 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.17s
2024.07.08 09:32:01 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (15 scala sources)
2024.07.08 09:32:01 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.43s
2024.07.08 09:32:03 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (15 scala sources)
2024.07.08 09:32:03 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.26s
2024.07.08 09:32:08 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (15 scala sources)
2024.07.08 09:32:08 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.24s
2024.07.08 09:32:28 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (15 scala sources)
2024.07.08 09:32:28 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.24s
2024.07.08 11:02:03 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (15 scala sources)
2024.07.08 11:02:03 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.71s
2024.07.08 21:34:35 INFO  Started: Metals version 1.3.2 in folders 'D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals' for client Visual Studio Code 1.91.0.
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@48b36351]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@5cc366ab]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@48b36351]
2024.07.08 21:34:41 WARN  Flyway upgrade recommended: H2 2.2.224 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.
2024.07.08 21:34:42 INFO  Attempting to connect to the build server...
2024.07.08 21:34:42 INFO  Running BSP server List(C:\Users\USER\AppData\Local\Coursier\data\bin\.scala-cli.aux.exe, bsp, --json-options, D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\.scala-build\ide-options-v2.json, --json-launcher-options, D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\.scala-build\ide-launcher-options.json, --envs-file, D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\.scala-build\ide-envs.json, D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals)
2024.07.08 21:34:42 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\.metals\bsp.trace.json or C:\Users\USER\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.07.08 21:34:50 INFO  no build target found for D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 04\3.scala. Using presentation compiler with project's scala-library version: 3.3.3
2024.07.08 21:34:55 INFO  no build target found for D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 04\3.scala. Using presentation compiler with project's scala-library version: 3.3.3
2024.07.08 21:34:55 INFO  no build target found for D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 04\3.scala. Using presentation compiler with project's scala-library version: 3.3.3
Jul 08, 2024 9:34:56 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 10
Jul 08, 2024 9:34:56 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 12
Jul 08, 2024 9:34:56 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 11
2024.07.08 21:34:55 INFO  no build target found for D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 04\3.scala. Using presentation compiler with project's scala-library version: 3.3.3
2024.07.08 21:34:55 INFO  no build target found for D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 04\3.scala. Using presentation compiler with project's scala-library version: 3.3.3
2024.07.08 21:34:55 INFO  no build target found for D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 04\3.scala. Using presentation compiler with project's scala-library version: 3.3.3
2024.07.08 21:34:55 INFO  no build target found for D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 04\3.scala. Using presentation compiler with project's scala-library version: 3.3.3
2024.07.08 21:34:55 INFO  no build target found for D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 04\3.scala. Using presentation compiler with project's scala-library version: 3.3.3
2024.07.08 21:34:57 INFO  BSP server: Starting compilation server
2024.07.08 21:34:59 INFO  no build target found for D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 04\3.scala. Using presentation compiler with project's scala-library version: 3.3.3
2024.07.08 21:34:59 INFO  no build target found for D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 04\3.scala. Using presentation compiler with project's scala-library version: 3.3.3
2024.07.08 21:34:59 INFO  no build target found for D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 04\3.scala. Using presentation compiler with project's scala-library version: 3.3.3
2024.07.08 21:35:03 INFO  no build target found for D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 04\3.scala. Using presentation compiler with project's scala-library version: 3.3.3
2024.07.08 21:35:09 INFO  time: Connected to build server in 27s
2024.07.08 21:35:09 INFO  Connected to Build server: scala-cli v1.3.2
2024.07.08 21:35:10 INFO  time: Imported build in 0.18s
2024.07.08 21:35:11 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (16 scala sources)
2024.07.08 21:35:17 INFO  time: indexed workspace in 6.92s
2024.07.08 21:35:21 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 10s
2024.07.08 21:35:21 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (16 scala sources)
2024.07.08 21:35:26 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 3.93s
2024.07.08 21:35:28 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (16 scala sources)
2024.07.08 21:35:28 INFO  Deduplicating compilation of FunctionalProgramming_Practicals_53cb6fdf00 from bsp client 'scala-cli 1.3.2' (since 20.359s)
2024.07.08 21:35:28 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (16 scala sources)
2024.07.08 21:35:30 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 1.83s
2024.07.08 21:35:32 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (16 scala sources)
2024.07.08 21:35:34 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 1.88s
2024.07.08 21:35:34 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (16 scala sources)
2024.07.08 21:35:36 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 1.38s
2024.07.08 21:42:16 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (16 scala sources)
2024.07.08 21:42:16 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.93s
2024.07.08 21:47:00 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (16 scala sources)
2024.07.08 21:47:03 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 3.51s
2024.07.08 21:47:27 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (16 scala sources)
2024.07.08 21:47:27 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.39s
2024.07.09 07:53:10 INFO  Started: Metals version 1.3.2 in folders 'D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals' for client Visual Studio Code 1.91.0.
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@48b36351]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@5cc366ab]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@48b36351]
2024.07.09 07:53:15 WARN  Flyway upgrade recommended: H2 2.2.224 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.
2024.07.09 07:53:16 INFO  Attempting to connect to the build server...
2024.07.09 07:53:16 INFO  Running BSP server List(C:\Users\USER\AppData\Local\Coursier\data\bin\.scala-cli.aux.exe, bsp, --json-options, D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\.scala-build\ide-options-v2.json, --json-launcher-options, D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\.scala-build\ide-launcher-options.json, --envs-file, D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\.scala-build\ide-envs.json, D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals)
2024.07.09 07:53:16 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\.metals\bsp.trace.json or C:\Users\USER\AppData\Local\scalameta\metals\cache\bsp.trace.json
Jul 09, 2024 7:53:16 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3
2024.07.09 07:53:18 INFO  BSP server: Starting compilation server
2024.07.09 07:53:22 INFO  time: Connected to build server in 6.33s
2024.07.09 07:53:22 INFO  Connected to Build server: scala-cli v1.3.2
2024.07.09 07:53:22 INFO  time: Imported build in 0.14s
2024.07.09 07:53:23 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (16 scala sources)
2024.07.09 07:53:27 INFO  time: indexed workspace in 4.78s
2024.07.09 07:53:29 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 6.23s
2024.07.09 07:53:29 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (16 scala sources)
2024.07.09 07:53:31 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 1.82s
2024.07.09 07:53:31 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (16 scala sources)
2024.07.09 07:53:31 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.55s
2024.07.09 07:53:32 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (16 scala sources)
2024.07.09 07:53:32 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.6s
2024.07.09 07:53:32 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (16 scala sources)
2024.07.09 07:53:34 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.64s
Jul 09, 2024 7:58:23 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 184
Jul 09, 2024 8:34:44 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 302
2024.07.09 09:01:42 INFO  no build target found for D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 04\4.scala. Using presentation compiler with project's scala-library version: 3.3.3
Jul 09, 2024 9:01:44 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 324
Jul 09, 2024 9:01:44 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 326
Jul 09, 2024 9:01:44 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 327
2024.07.09 09:01:44 INFO  no build target found for D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 04\4.scala. Using presentation compiler with project's scala-library version: 3.3.3
2024.07.09 09:01:59 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (17 scala sources)
2024.07.09 09:02:13 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 13s
2024.07.09 09:02:13 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (17 scala sources)
2024.07.09 09:02:13 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 62ms
2024.07.09 09:02:13 INFO  time: Imported build in 28s
Jul 09, 2024 9:02:13 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 325
2024.07.09 09:02:13 WARN  no build target for: D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 04\4.scala
Jul 09, 2024 9:02:15 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 329
Jul 09, 2024 9:02:15 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 332
Jul 09, 2024 9:02:15 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 330
Jul 09, 2024 9:02:15 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 335
Jul 09, 2024 9:02:16 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 333
Jul 09, 2024 9:02:17 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 342
Jul 09, 2024 9:02:17 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 345
Jul 09, 2024 9:02:17 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 343
Jul 09, 2024 9:02:17 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 341
Jul 09, 2024 9:02:17 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 346
Jul 09, 2024 9:02:17 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 356
Jul 09, 2024 9:02:18 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 357
Jul 09, 2024 9:02:18 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 344
2024.07.09 09:02:20 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (17 scala sources)
2024.07.09 09:02:20 INFO  Deduplicating compilation of FunctionalProgramming_Practicals_53cb6fdf00 from bsp client 'scala-cli 1.3.2' (since 1h 8m 58.762s)
2024.07.09 09:02:20 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (17 scala sources)
2024.07.09 09:02:23 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 2.71s
2024.07.09 09:02:30 INFO  no build target found for D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 04\4.scala. Using presentation compiler with project's scala-library version: 3.3.3
2024.07.09 09:02:33 INFO  time: code lens generation in 48s
2024.07.09 09:02:33 INFO  time: code lens generation in 19s
2024.07.09 09:02:35 INFO  time: indexed workspace in 21s
2024.07.09 09:02:36 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (17 scala sources)
2024.07.09 09:02:36 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.52s
2024.07.09 09:02:54 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (17 scala sources)
2024.07.09 09:02:54 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.49s
2024.07.09 09:03:07 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (17 scala sources)
2024.07.09 09:03:07 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.35s
2024.07.09 09:03:29 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (17 scala sources)
2024.07.09 09:03:29 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.36s
2024.07.09 09:04:23 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (17 scala sources)
2024.07.09 09:04:23 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.78s
Jul 09, 2024 9:12:51 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 486
2024.07.09 09:16:39 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (17 scala sources)
2024.07.09 09:16:40 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 1.84s
2024.07.09 09:17:22 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (17 scala sources)
2024.07.09 09:17:22 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.35s
Jul 09, 2024 9:29:52 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 868
Jul 09, 2024 9:30:29 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 887
Jul 09, 2024 9:33:50 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 949
Jul 09, 2024 9:34:32 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 967
2024.07.09 09:36:39 INFO  Shutting down server
2024.07.09 09:36:39 INFO  shutting down Metals
2024.07.09 09:36:40 INFO  Shut down connection with build server.
2024.07.15 20:24:35 INFO  Started: Metals version 1.3.3 in folders 'D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals' for client Visual Studio Code 1.91.1.
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@18ff5954]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@36de9141]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@18ff5954]
2024.07.15 20:24:36 WARN  Flyway upgrade recommended: H2 2.2.224 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.
2024.07.15 20:24:37 INFO  Attempting to connect to the build server...
2024.07.15 20:24:37 INFO  Running BSP server List(C:\Users\USER\AppData\Local\Coursier\data\bin\.scala-cli.aux.exe, bsp, --json-options, D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\.scala-build\ide-options-v2.json, --json-launcher-options, D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\.scala-build\ide-launcher-options.json, --envs-file, D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\.scala-build\ide-envs.json, D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals)
2024.07.15 20:24:37 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\.metals\bsp.trace.json or C:\Users\USER\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.07.15 20:24:42 INFO  BSP server: Starting compilation server
2024.07.15 20:24:47 INFO  time: Connected to build server in 9.35s
2024.07.15 20:24:47 INFO  Connected to Build server: scala-cli v1.3.2
2024.07.15 20:24:47 INFO  time: Imported build in 0.13s
2024.07.15 20:24:47 INFO  running doctor check
2024.07.15 20:24:47 INFO  java targets: FunctionalProgramming_Practicals_53cb6fdf00-test, FunctionalProgramming_Practicals_53cb6fdf00
2024.07.15 20:24:48 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (17 scala sources)
2024.07.15 20:24:53 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 5.01s
2024.07.15 20:24:53 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (17 scala sources)
2024.07.15 20:24:55 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 1.91s
2024.07.15 20:24:55 WARN  Flyway upgrade recommended: H2 2.2.224 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.
2024.07.15 20:24:57 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (17 scala sources)
2024.07.15 20:24:59 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 1.52s
Jul 15, 2024 8:25:08 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 20
2024.07.15 20:25:08 INFO  time: indexed workspace in 21s
2024.07.15 20:25:09 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (17 scala sources)
2024.07.15 20:25:10 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 1.04s
2024.07.15 20:25:10 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (17 scala sources)
2024.07.15 20:25:11 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.67s
2024.07.15 20:25:22 INFO  no build target found for D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 05\1.scala. Using presentation compiler with project's scala-library version: 3.3.3
2024.07.15 20:25:23 INFO  time: Imported build in 0.1s
2024.07.15 20:25:23 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (18 scala sources)
2024.07.15 20:25:29 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 5.86s
2024.07.15 20:25:29 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (18 scala sources)
2024.07.15 20:25:29 INFO  no build target found for D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 05\1.scala. Using presentation compiler with project's scala-library version: 3.3.3
2024.07.15 20:25:29 INFO  running doctor check
2024.07.15 20:25:29 INFO  java targets: FunctionalProgramming_Practicals_53cb6fdf00-test, FunctionalProgramming_Practicals_53cb6fdf00
2024.07.15 20:25:30 INFO  time: code lens generation in 6.48s
2024.07.15 20:25:31 INFO  time: indexed workspace in 2.05s
2024.07.15 20:25:55 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (18 scala sources)
2024.07.15 20:25:55 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.51s
2024.07.15 21:02:25 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (18 scala sources)
2024.07.15 21:02:25 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.85s
2024.07.15 21:04:45 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (18 scala sources)
2024.07.15 21:04:45 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.67s
Jul 15, 2024 9:08:06 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 276
2024.07.15 21:08:10 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (18 scala sources)
2024.07.15 21:08:10 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.41s
2024.07.15 21:10:53 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (18 scala sources)
2024.07.15 21:10:53 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.53s
Jul 15, 2024 9:29:20 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 414
2024.07.15 21:32:22 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (18 scala sources)
2024.07.15 21:32:23 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 1.22s
2024.07.15 21:35:01 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (18 scala sources)
2024.07.15 21:35:02 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 1s
2024.07.15 21:35:44 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (18 scala sources)
2024.07.15 21:35:44 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.67s
2024.07.15 21:36:11 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (18 scala sources)
2024.07.15 21:36:11 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.41s
Jul 15, 2024 9:38:44 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 872
2024.07.15 21:39:19 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (18 scala sources)
2024.07.15 21:39:19 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.42s
2024.07.15 21:46:56 INFO  no build target found for D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 05\2.scala. Using presentation compiler with project's scala-library version: 3.3.3
2024.07.15 21:46:58 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (19 scala sources)
2024.07.15 21:46:58 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.53s
2024.07.15 21:46:58 INFO  time: Imported build in 2.02s
2024.07.15 21:46:59 INFO  time: code lens generation in 1.94s
2024.07.15 21:46:58 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (19 scala sources)
2024.07.15 21:46:59 INFO  running doctor check
2024.07.15 21:46:59 INFO  java targets: FunctionalProgramming_Practicals_53cb6fdf00-test, FunctionalProgramming_Practicals_53cb6fdf00
2024.07.15 21:47:04 INFO  time: indexed workspace in 5.35s
2024.07.15 21:48:49 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (19 scala sources)
2024.07.15 21:48:49 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.78s
2024.07.15 21:49:23 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (19 scala sources)
2024.07.15 21:49:25 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 1.37s
Jul 15, 2024 9:55:54 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1133
2024.07.15 21:59:22 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (19 scala sources)
2024.07.15 21:59:22 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.67s
2024.07.15 22:09:20 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (19 scala sources)
2024.07.15 22:09:20 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.64s
2024.07.15 22:11:32 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (19 scala sources)
2024.07.15 22:11:32 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.88s
Jul 15, 2024 10:16:28 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1340
2024.07.15 22:20:29 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (19 scala sources)
2024.07.15 22:20:29 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.5s
Jul 15, 2024 10:20:37 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1506
Jul 15, 2024 10:20:37 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1507
2024.07.15 22:22:52 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (19 scala sources)
2024.07.15 22:22:54 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 1.97s
2024.07.15 22:23:27 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (19 scala sources)
2024.07.15 22:23:27 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.71s
Jul 15, 2024 10:24:12 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2118
2024.07.15 22:24:21 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (19 scala sources)
2024.07.15 22:24:21 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.96s
2024.07.15 22:26:33 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (19 scala sources)
2024.07.15 22:26:33 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.53s
Jul 15, 2024 10:29:49 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2598
2024.07.15 22:30:03 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (19 scala sources)
2024.07.15 22:30:03 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.69s
2024.07.15 22:30:57 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (19 scala sources)
2024.07.15 22:30:57 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.42s
2024.07.15 22:32:37 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (19 scala sources)
2024.07.15 22:32:37 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.63s
2024.07.15 22:34:01 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (19 scala sources)
2024.07.15 22:34:01 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.7s
2024.07.15 22:37:04 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (19 scala sources)
2024.07.15 22:37:05 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 1.25s
2024.07.15 22:38:19 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (19 scala sources)
2024.07.15 22:38:19 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.48s
2024.07.15 22:40:07 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (19 scala sources)
2024.07.15 22:40:07 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.65s
2024.07.15 22:40:47 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (19 scala sources)
2024.07.15 22:40:47 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.27s
2024.07.15 22:40:55 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (19 scala sources)
2024.07.15 22:40:55 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.22s
2024.07.15 22:43:02 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (19 scala sources)
2024.07.15 22:43:02 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.43s
2024.07.15 22:43:31 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (19 scala sources)
2024.07.15 22:43:31 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.18s
2024.07.15 22:43:52 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (19 scala sources)
2024.07.15 22:43:52 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.19s
2024.07.15 22:46:31 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (19 scala sources)
2024.07.15 22:46:31 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.2s
Jul 15, 2024 10:46:48 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4297
2024.07.15 22:47:04 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (19 scala sources)
2024.07.15 22:47:04 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.36s
2024.07.15 22:47:22 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (19 scala sources)
2024.07.15 22:47:22 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.21s
2024.07.15 22:49:50 INFO  no build target found for D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 05\3.scala. Using presentation compiler with project's scala-library version: 3.3.3
2024.07.15 22:49:51 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (20 scala sources)
2024.07.15 22:49:51 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.67s
2024.07.15 22:49:52 INFO  time: Imported build in 1.23s
2024.07.15 22:49:52 INFO  running doctor check
2024.07.15 22:49:52 INFO  java targets: FunctionalProgramming_Practicals_53cb6fdf00-test, FunctionalProgramming_Practicals_53cb6fdf00
2024.07.15 22:49:51 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (20 scala sources)
2024.07.15 22:49:52 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.22s
2024.07.15 22:49:54 INFO  time: indexed workspace in 1.96s
2024.07.15 22:49:54 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (20 scala sources)
2024.07.15 22:49:54 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.23s
2024.07.15 22:50:16 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (20 scala sources)
2024.07.15 22:50:16 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.17s
Jul 15, 2024 10:51:01 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4595
2024.07.15 22:51:07 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (20 scala sources)
2024.07.15 22:51:07 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.23s
2024.07.15 22:56:58 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (20 scala sources)
2024.07.15 22:56:58 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.19s
2024.07.15 22:58:53 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (20 scala sources)
2024.07.15 22:58:53 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.75s
2024.07.15 23:02:30 INFO  Shutting down server
2024.07.16 08:07:19 INFO  Started: Metals version 1.3.3 in folders 'D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals' for client Visual Studio Code 1.91.1.
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@52fd727f]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@1112a222]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@52fd727f]
2024.07.16 08:07:26 WARN  Flyway upgrade recommended: H2 2.2.224 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.
2024.07.16 08:07:26 INFO  Attempting to connect to the build server...
2024.07.16 08:07:26 INFO  Running BSP server List(C:\Users\USER\AppData\Local\Coursier\data\bin\.scala-cli.aux.exe, bsp, --json-options, D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\.scala-build\ide-options-v2.json, --json-launcher-options, D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\.scala-build\ide-launcher-options.json, --envs-file, D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\.scala-build\ide-envs.json, D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals)
2024.07.16 08:07:26 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\.metals\bsp.trace.json or C:\Users\USER\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.07.16 08:07:29 INFO  no build target found for D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 05\1.scala. Using presentation compiler with project's scala-library version: 3.3.3
2024.07.16 08:07:30 INFO  BSP server: Starting compilation server
2024.07.16 08:07:35 INFO  time: Connected to build server in 8.71s
2024.07.16 08:07:35 INFO  Connected to Build server: scala-cli v1.3.2
2024.07.16 08:07:35 INFO  time: Imported build in 0.13s
2024.07.16 08:07:35 INFO  running doctor check
2024.07.16 08:07:35 INFO  java targets: FunctionalProgramming_Practicals_53cb6fdf00-test, FunctionalProgramming_Practicals_53cb6fdf00
2024.07.16 08:07:36 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (20 scala sources)
2024.07.16 08:07:41 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 4.43s
2024.07.16 08:07:41 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (20 scala sources)
2024.07.16 08:07:42 WARN  Flyway upgrade recommended: H2 2.2.224 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.
2024.07.16 08:07:42 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 1.34s
2024.07.16 08:07:42 INFO  time: indexed workspace in 7.23s
2024.07.16 08:07:42 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (20 scala sources)
2024.07.16 08:07:44 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 1.29s
2024.07.16 08:07:44 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (20 scala sources)
2024.07.16 08:07:46 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 1.24s
Jul 16, 2024 8:13:18 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 138
2024.07.16 08:14:21 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (20 scala sources)
2024.07.16 08:14:21 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.74s
Jul 16, 2024 8:15:17 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 269
Jul 16, 2024 8:15:19 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 271
Jul 16, 2024 8:16:44 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 283
Jul 16, 2024 8:16:54 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 294
Jul 16, 2024 8:20:46 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 348
2024.07.16 08:21:34 INFO  Shutting down server
2024.07.16 08:21:34 INFO  shutting down Metals
2024.07.16 08:21:34 INFO  Shut down connection with build server.
2024.07.16 08:21:36 INFO  Exiting server
2024.07.30 03:32:30 INFO  Started: Metals version 1.3.4 in folders 'D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals' for client Visual Studio Code 1.91.1.
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@44c65ecb]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@c6127c3]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@44c65ecb]
2024.07.30 03:32:31 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.
Jul 30, 2024 3:32:34 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2
2024.07.30 03:32:35 INFO  Attempting to connect to the build server...
2024.07.30 03:32:35 INFO  Running BSP server List(C:\Users\USER\AppData\Local\Coursier\data\bin\.scala-cli.aux.exe, bsp, --json-options, D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\.scala-build\ide-options-v2.json, --json-launcher-options, D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\.scala-build\ide-launcher-options.json, --envs-file, D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\.scala-build\ide-envs.json, D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals)
2024.07.30 03:32:35 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\.metals\bsp.trace.json or C:\Users\USER\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.07.30 03:32:45 INFO  BSP server: Starting compilation server
2024.07.30 03:32:53 INFO  time: Connected to build server in 18s
2024.07.30 03:32:53 INFO  Connected to Build server: scala-cli v1.3.2
2024.07.30 03:32:53 INFO  time: Imported build in 0.17s
2024.07.30 03:32:53 INFO  running doctor check
2024.07.30 03:32:53 INFO  java targets: FunctionalProgramming_Practicals_53cb6fdf00-test, FunctionalProgramming_Practicals_53cb6fdf00
2024.07.30 03:32:54 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (20 scala sources)
2024.07.30 03:33:03 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 8.37s
2024.07.30 03:33:03 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (20 scala sources)
2024.07.30 03:33:05 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.
2024.07.30 03:33:06 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 3.3s
2024.07.30 03:33:07 INFO  time: indexed workspace in 13s
2024.07.30 03:33:08 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (20 scala sources)
2024.07.30 03:33:11 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 3.15s
2024.07.30 03:33:11 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (20 scala sources)
2024.07.30 03:33:14 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 2.14s
2024.07.30 03:33:15 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (20 scala sources)
2024.07.30 03:33:17 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 2.23s
2024.07.30 03:33:19 INFO  no build target found for D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 06\1.scala. Using presentation compiler with project's scala-library version: 3.3.3
2024.07.30 03:33:20 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (21 scala sources)
2024.07.30 03:33:25 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 4.81s
2024.07.30 03:33:25 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (21 scala sources)
2024.07.30 03:33:25 INFO  no build target found for D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 06\1.scala. Using presentation compiler with project's scala-library version: 3.3.3
2024.07.30 03:33:25 INFO  running doctor check
2024.07.30 03:33:25 INFO  java targets: FunctionalProgramming_Practicals_53cb6fdf00-test, FunctionalProgramming_Practicals_53cb6fdf00
2024.07.30 03:33:29 INFO  time: code lens generation in 9.15s
2024.07.30 03:33:31 INFO  time: indexed workspace in 6.51s
2024.07.30 03:38:22 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (21 scala sources)
2024.07.30 03:38:23 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 1.15s
2024.07.30 03:39:15 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (21 scala sources)
2024.07.30 03:39:16 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 1.24s
Jul 30, 2024 3:47:06 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 94
2024.07.30 03:52:13 INFO  no build target found for D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 06\11.scala. Using presentation compiler with project's scala-library version: 3.3.3
2024.07.30 03:52:13 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (22 scala sources)
2024.07.30 03:52:13 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.72s
2024.07.30 03:52:14 INFO  time: Imported build in 0.98s
2024.07.30 03:52:14 INFO  running doctor check
2024.07.30 03:52:14 INFO  java targets: FunctionalProgramming_Practicals_53cb6fdf00-test, FunctionalProgramming_Practicals_53cb6fdf00
2024.07.30 03:52:13 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (22 scala sources)
2024.07.30 03:52:15 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.56s
2024.07.30 03:52:16 INFO  time: indexed workspace in 1.6s
2024.07.30 03:52:16 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (22 scala sources)
2024.07.30 03:52:16 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.9s
Jul 30, 2024 3:52:29 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 208
2024.07.30 03:53:16 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (22 scala sources)
2024.07.30 03:53:16 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.6s
Jul 30, 2024 3:53:50 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 334
2024.07.30 03:57:40 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-20/lib/src.zip!/java.base/java/lang/Math.java

Uri: jar:file:///C:/Program Files/Java/jdk-20/lib/src.zip!/java.base/java/lang/Math.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:911)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:178)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:756)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:753)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:739)
	scala.meta.internal.metals.WorkspaceLspService.getServiceForOpt(WorkspaceLspService.scala:306)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:315)
	scala.meta.internal.metals.WorkspaceLspService.executeCommand(WorkspaceLspService.scala:781)
	scala.meta.metals.lsp.DelegatingScalaService.executeCommand(DelegatingScalaService.scala:169)
	java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	java.base/java.lang.reflect.Method.invoke(Method.java:578)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$recursiveFindRpcMethods$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:128)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:271)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:201)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:185)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:97)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:114)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:577)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	java.base/java.lang.Thread.run(Thread.java:1623)
```

Jul 30, 2024 3:57:40 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-20/lib/src.zip%21/java.base/java/lang/Math.java",
      "languageId": "java",
      "version": 1,
      "text": "/*\n * Copyright (c) 1994, 2022, Oracle and/or its affiliates. All rights reserved.\n * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n */\n\npackage java.lang;\n\nimport java.math.BigDecimal;\nimport java.util.Random;\nimport jdk.internal.math.FloatConsts;\nimport jdk.internal.math.DoubleConsts;\nimport jdk.internal.vm.annotation.IntrinsicCandidate;\n\n/**\n * The class {@code Math} contains methods for performing basic\n * numeric operations such as the elementary exponential, logarithm,\n * square root, and trigonometric functions.\n *\n * \u003cp\u003eUnlike some of the numeric methods of class\n * {@link java.lang.StrictMath StrictMath}, all implementations of the equivalent\n * functions of class {@code Math} are not defined to return the\n * bit-for-bit same results.  This relaxation permits\n * better-performing implementations where strict reproducibility is\n * not required.\n *\n * \u003cp\u003eBy default many of the {@code Math} methods simply call\n * the equivalent method in {@code StrictMath} for their\n * implementation.  Code generators are encouraged to use\n * platform-specific native libraries or microprocessor instructions,\n * where available, to provide higher-performance implementations of\n * {@code Math} methods.  Such higher-performance\n * implementations still must conform to the specification for\n * {@code Math}.\n *\n * \u003cp\u003eThe quality of implementation specifications concern two\n * properties, accuracy of the returned result and monotonicity of the\n * method.  Accuracy of the floating-point {@code Math} methods is\n * measured in terms of \u003ci\u003eulps\u003c/i\u003e, units in the last place.  For a\n * given floating-point format, an {@linkplain #ulp(double) ulp} of a\n * specific real number value is the distance between the two\n * floating-point values bracketing that numerical value.  When\n * discussing the accuracy of a method as a whole rather than at a\n * specific argument, the number of ulps cited is for the worst-case\n * error at any argument.  If a method always has an error less than\n * 0.5 ulps, the method always returns the floating-point number\n * nearest the exact result; such a method is \u003ci\u003ecorrectly\n * rounded\u003c/i\u003e.  A correctly rounded method is generally the best a\n * floating-point approximation can be; however, it is impractical for\n * many floating-point methods to be correctly rounded.  Instead, for\n * the {@code Math} class, a larger error bound of 1 or 2 ulps is\n * allowed for certain methods.  Informally, with a 1 ulp error bound,\n * when the exact result is a representable number, the exact result\n * should be returned as the computed result; otherwise, either of the\n * two floating-point values which bracket the exact result may be\n * returned.  For exact results large in magnitude, one of the\n * endpoints of the bracket may be infinite.  Besides accuracy at\n * individual arguments, maintaining proper relations between the\n * method at different arguments is also important.  Therefore, most\n * methods with more than 0.5 ulp errors are required to be\n * \u003ci\u003esemi-monotonic\u003c/i\u003e: whenever the mathematical function is\n * non-decreasing, so is the floating-point approximation, likewise,\n * whenever the mathematical function is non-increasing, so is the\n * floating-point approximation.  Not all approximations that have 1\n * ulp accuracy will automatically meet the monotonicity requirements.\n *\n * \u003cp\u003e\n * The platform uses signed two\u0027s complement integer arithmetic with\n * int and long primitive types.  The developer should choose\n * the primitive type to ensure that arithmetic operations consistently\n * produce correct results, which in some cases means the operations\n * will not overflow the range of values of the computation.\n * The best practice is to choose the primitive type and algorithm to avoid\n * overflow. In cases where the size is {@code int} or {@code long} and\n * overflow errors need to be detected, the methods whose names end with\n * {@code Exact} throw an {@code ArithmeticException} when the results overflow.\n *\n * \u003ch2\u003e\u003ca id\u003dIeee754RecommendedOps\u003eIEEE 754 Recommended\n * Operations\u003c/a\u003e\u003c/h2\u003e\n *\n * The 2019 revision of the IEEE 754 floating-point standard includes\n * a section of recommended operations and the semantics of those\n * operations if they are included in a programming environment. The\n * recommended operations present in this class include {@link sin\n * sin}, {@link cos cos}, {@link tan tan}, {@link asin asin}, {@link\n * acos acos}, {@link atan atan}, {@link exp exp}, {@link expm1\n * expm1}, {@link log log}, {@link log10 log10}, {@link log1p log1p},\n * {@link sinh sinh}, {@link cosh cosh}, {@link tanh tanh}, {@link\n * hypot hypot}, and {@link pow pow}.  (The {@link sqrt sqrt}\n * operation is a required part of IEEE 754 from a different section\n * of the standard.) The special case behavior of the recommended\n * operations generally follows the guidance of the IEEE 754\n * standard. However, the {@code pow} method defines different\n * behavior for some arguments, as noted in its {@linkplain pow\n * specification}. The IEEE 754 standard defines its operations to be\n * correctly rounded, which is a more stringent quality of\n * implementation condition than required for most of the methods in\n * question that are also included in this class.\n *\n * @see \u003ca href\u003d\"https://standards.ieee.org/ieee/754/6210/\"\u003e\n *      \u003ccite\u003eIEEE Standard for Floating-Point Arithmetic\u003c/cite\u003e\u003c/a\u003e\n *\n * @author  Joseph D. Darcy\n * @since   1.0\n */\n\npublic final class Math {\n\n    /**\n     * Don\u0027t let anyone instantiate this class.\n     */\n    private Math() {}\n\n    /**\n     * The {@code double} value that is closer than any other to\n     * \u003ci\u003ee\u003c/i\u003e, the base of the natural logarithms.\n     */\n    public static final double E \u003d 2.718281828459045;\n\n    /**\n     * The {@code double} value that is closer than any other to\n     * \u003ci\u003epi\u003c/i\u003e (\u0026pi;), the ratio of the circumference of a circle to\n     * its diameter.\n     */\n    public static final double PI \u003d 3.141592653589793;\n\n    /**\n     * The {@code double} value that is closer than any other to\n     * \u003ci\u003etau\u003c/i\u003e (\u0026tau;), the ratio of the circumference of a circle\n     * to its radius.\n     *\n     * @apiNote\n     * The value of \u003ci\u003epi\u003c/i\u003e is one half that of \u003ci\u003etau\u003c/i\u003e; in other\n     * words, \u003ci\u003etau\u003c/i\u003e is double \u003ci\u003epi\u003c/i\u003e .\n     *\n     * @since 19\n     */\n    public static final double TAU \u003d 2.0 * PI;\n\n    /**\n     * Constant by which to multiply an angular value in degrees to obtain an\n     * angular value in radians.\n     */\n    private static final double DEGREES_TO_RADIANS \u003d 0.017453292519943295;\n\n    /**\n     * Constant by which to multiply an angular value in radians to obtain an\n     * angular value in degrees.\n     */\n    private static final double RADIANS_TO_DEGREES \u003d 57.29577951308232;\n\n    /**\n     * Returns the trigonometric sine of an angle.  Special cases:\n     * \u003cul\u003e\u003cli\u003eIf the argument is NaN or an infinity, then the\n     * result is NaN.\n     * \u003cli\u003eIf the argument is zero, then the result is a zero with the\n     * same sign as the argument.\u003c/ul\u003e\n     *\n     * \u003cp\u003eThe computed result must be within 1 ulp of the exact result.\n     * Results must be semi-monotonic.\n     *\n     * @param   a   an angle, in radians.\n     * @return  the sine of the argument.\n     */\n    @IntrinsicCandidate\n    public static double sin(double a) {\n        return StrictMath.sin(a); // default impl. delegates to StrictMath\n    }\n\n    /**\n     * Returns the trigonometric cosine of an angle. Special cases:\n     * \u003cul\u003e\u003cli\u003eIf the argument is NaN or an infinity, then the\n     * result is NaN.\n     * \u003cli\u003eIf the argument is zero, then the result is {@code 1.0}.\n     *\u003c/ul\u003e\n     *\n     * \u003cp\u003eThe computed result must be within 1 ulp of the exact result.\n     * Results must be semi-monotonic.\n     *\n     * @param   a   an angle, in radians.\n     * @return  the cosine of the argument.\n     */\n    @IntrinsicCandidate\n    public static double cos(double a) {\n        return StrictMath.cos(a); // default impl. delegates to StrictMath\n    }\n\n    /**\n     * Returns the trigonometric tangent of an angle.  Special cases:\n     * \u003cul\u003e\u003cli\u003eIf the argument is NaN or an infinity, then the result\n     * is NaN.\n     * \u003cli\u003eIf the argument is zero, then the result is a zero with the\n     * same sign as the argument.\u003c/ul\u003e\n     *\n     * \u003cp\u003eThe computed result must be within 1 ulp of the exact result.\n     * Results must be semi-monotonic.\n     *\n     * @param   a   an angle, in radians.\n     * @return  the tangent of the argument.\n     */\n    @IntrinsicCandidate\n    public static double tan(double a) {\n        return StrictMath.tan(a); // default impl. delegates to StrictMath\n    }\n\n    /**\n     * Returns the arc sine of a value; the returned angle is in the\n     * range -\u003ci\u003epi\u003c/i\u003e/2 through \u003ci\u003epi\u003c/i\u003e/2.  Special cases:\n     * \u003cul\u003e\u003cli\u003eIf the argument is NaN or its absolute value is greater\n     * than 1, then the result is NaN.\n     * \u003cli\u003eIf the argument is zero, then the result is a zero with the\n     * same sign as the argument.\u003c/ul\u003e\n     *\n     * \u003cp\u003eThe computed result must be within 1 ulp of the exact result.\n     * Results must be semi-monotonic.\n     *\n     * @param   a   the value whose arc sine is to be returned.\n     * @return  the arc sine of the argument.\n     */\n    public static double asin(double a) {\n        return StrictMath.asin(a); // default impl. delegates to StrictMath\n    }\n\n    /**\n     * Returns the arc cosine of a value; the returned angle is in the\n     * range 0.0 through \u003ci\u003epi\u003c/i\u003e.  Special case:\n     * \u003cul\u003e\u003cli\u003eIf the argument is NaN or its absolute value is greater\n     * than 1, then the result is NaN.\n     * \u003cli\u003eIf the argument is {@code 1.0}, the result is positive zero.\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eThe computed result must be within 1 ulp of the exact result.\n     * Results must be semi-monotonic.\n     *\n     * @param   a   the value whose arc cosine is to be returned.\n     * @return  the arc cosine of the argument.\n     */\n    public static double acos(double a) {\n        return StrictMath.acos(a); // default impl. delegates to StrictMath\n    }\n\n    /**\n     * Returns the arc tangent of a value; the returned angle is in the\n     * range -\u003ci\u003epi\u003c/i\u003e/2 through \u003ci\u003epi\u003c/i\u003e/2.  Special cases:\n     * \u003cul\u003e\u003cli\u003eIf the argument is NaN, then the result is NaN.\n     * \u003cli\u003eIf the argument is zero, then the result is a zero with the\n     * same sign as the argument.\n     * \u003cli\u003eIf the argument is {@linkplain Double#isInfinite infinite},\n     * then the result is the closest value to \u003ci\u003epi\u003c/i\u003e/2 with the\n     * same sign as the input.\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eThe computed result must be within 1 ulp of the exact result.\n     * Results must be semi-monotonic.\n     *\n     * @param   a   the value whose arc tangent is to be returned.\n     * @return  the arc tangent of the argument.\n     */\n    public static double atan(double a) {\n        return StrictMath.atan(a); // default impl. delegates to StrictMath\n    }\n\n    /**\n     * Converts an angle measured in degrees to an approximately\n     * equivalent angle measured in radians.  The conversion from\n     * degrees to radians is generally inexact.\n     *\n     * @param   angdeg   an angle, in degrees\n     * @return  the measurement of the angle {@code angdeg}\n     *          in radians.\n     * @since   1.2\n     */\n    public static double toRadians(double angdeg) {\n        return angdeg * DEGREES_TO_RADIANS;\n    }\n\n    /**\n     * Converts an angle measured in radians to an approximately\n     * equivalent angle measured in degrees.  The conversion from\n     * radians to degrees is generally inexact; users should\n     * \u003ci\u003enot\u003c/i\u003e expect {@code cos(toRadians(90.0))} to exactly\n     * equal {@code 0.0}.\n     *\n     * @param   angrad   an angle, in radians\n     * @return  the measurement of the angle {@code angrad}\n     *          in degrees.\n     * @since   1.2\n     */\n    public static double toDegrees(double angrad) {\n        return angrad * RADIANS_TO_DEGREES;\n    }\n\n    /**\n     * Returns Euler\u0027s number \u003ci\u003ee\u003c/i\u003e raised to the power of a\n     * {@code double} value.  Special cases:\n     * \u003cul\u003e\u003cli\u003eIf the argument is NaN, the result is NaN.\n     * \u003cli\u003eIf the argument is positive infinity, then the result is\n     * positive infinity.\n     * \u003cli\u003eIf the argument is negative infinity, then the result is\n     * positive zero.\n     * \u003cli\u003eIf the argument is zero, then the result is {@code 1.0}.\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eThe computed result must be within 1 ulp of the exact result.\n     * Results must be semi-monotonic.\n     *\n     * @param   a   the exponent to raise \u003ci\u003ee\u003c/i\u003e to.\n     * @return  the value \u003ci\u003ee\u003c/i\u003e\u003csup\u003e{@code a}\u003c/sup\u003e,\n     *          where \u003ci\u003ee\u003c/i\u003e is the base of the natural logarithms.\n     */\n    @IntrinsicCandidate\n    public static double exp(double a) {\n        return StrictMath.exp(a); // default impl. delegates to StrictMath\n    }\n\n    /**\n     * Returns the natural logarithm (base \u003ci\u003ee\u003c/i\u003e) of a {@code double}\n     * value.  Special cases:\n     * \u003cul\u003e\u003cli\u003eIf the argument is NaN or less than zero, then the result\n     * is NaN.\n     * \u003cli\u003eIf the argument is positive infinity, then the result is\n     * positive infinity.\n     * \u003cli\u003eIf the argument is positive zero or negative zero, then the\n     * result is negative infinity.\n     * \u003cli\u003eIf the argument is {@code 1.0}, then the result is positive\n     * zero.\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eThe computed result must be within 1 ulp of the exact result.\n     * Results must be semi-monotonic.\n     *\n     * @param   a   a value\n     * @return  the value ln\u0026nbsp;{@code a}, the natural logarithm of\n     *          {@code a}.\n     */\n    @IntrinsicCandidate\n    public static double log(double a) {\n        return StrictMath.log(a); // default impl. delegates to StrictMath\n    }\n\n    /**\n     * Returns the base 10 logarithm of a {@code double} value.\n     * Special cases:\n     *\n     * \u003cul\u003e\u003cli\u003eIf the argument is NaN or less than zero, then the result\n     * is NaN.\n     * \u003cli\u003eIf the argument is positive infinity, then the result is\n     * positive infinity.\n     * \u003cli\u003eIf the argument is positive zero or negative zero, then the\n     * result is negative infinity.\n     * \u003cli\u003eIf the argument is equal to 10\u003csup\u003e\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e for\n     * integer \u003ci\u003en\u003c/i\u003e, then the result is \u003ci\u003en\u003c/i\u003e. In particular,\n     * if the argument is {@code 1.0} (10\u003csup\u003e0\u003c/sup\u003e), then the\n     * result is positive zero.\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eThe computed result must be within 1 ulp of the exact result.\n     * Results must be semi-monotonic.\n     *\n     * @param   a   a value\n     * @return  the base 10 logarithm of  {@code a}.\n     * @since 1.5\n     */\n    @IntrinsicCandidate\n    public static double log10(double a) {\n        return StrictMath.log10(a); // default impl. delegates to StrictMath\n    }\n\n    /**\n     * Returns the correctly rounded positive square root of a\n     * {@code double} value.\n     * Special cases:\n     * \u003cul\u003e\u003cli\u003eIf the argument is NaN or less than zero, then the result\n     * is NaN.\n     * \u003cli\u003eIf the argument is positive infinity, then the result is positive\n     * infinity.\n     * \u003cli\u003eIf the argument is positive zero or negative zero, then the\n     * result is the same as the argument.\u003c/ul\u003e\n     * Otherwise, the result is the {@code double} value closest to\n     * the true mathematical square root of the argument value.\n     *\n     * @apiNote\n     * This method corresponds to the squareRoot operation defined in\n     * IEEE 754.\n     *\n     * @param   a   a value.\n     * @return  the positive square root of {@code a}.\n     *          If the argument is NaN or less than zero, the result is NaN.\n     */\n    @IntrinsicCandidate\n    public static double sqrt(double a) {\n        return StrictMath.sqrt(a); // default impl. delegates to StrictMath\n                                   // Note that hardware sqrt instructions\n                                   // frequently can be directly used by JITs\n                                   // and should be much faster than doing\n                                   // Math.sqrt in software.\n    }\n\n\n    /**\n     * Returns the cube root of a {@code double} value.  For\n     * positive finite {@code x}, {@code cbrt(-x) \u003d\u003d\n     * -cbrt(x)}; that is, the cube root of a negative value is\n     * the negative of the cube root of that value\u0027s magnitude.\n     *\n     * Special cases:\n     *\n     * \u003cul\u003e\n     *\n     * \u003cli\u003eIf the argument is NaN, then the result is NaN.\n     *\n     * \u003cli\u003eIf the argument is infinite, then the result is an infinity\n     * with the same sign as the argument.\n     *\n     * \u003cli\u003eIf the argument is zero, then the result is a zero with the\n     * same sign as the argument.\n     *\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eThe computed result must be within 1 ulp of the exact result.\n     *\n     * @param   a   a value.\n     * @return  the cube root of {@code a}.\n     * @since 1.5\n     */\n    public static double cbrt(double a) {\n        return StrictMath.cbrt(a);\n    }\n\n    /**\n     * Computes the remainder operation on two arguments as prescribed\n     * by the IEEE 754 standard.\n     * The remainder value is mathematically equal to\n     * \u003ccode\u003ef1\u0026nbsp;-\u0026nbsp;f2\u003c/code\u003e\u0026nbsp;\u0026times;\u0026nbsp;\u003ci\u003en\u003c/i\u003e,\n     * where \u003ci\u003en\u003c/i\u003e is the mathematical integer closest to the exact\n     * mathematical value of the quotient {@code f1/f2}, and if two\n     * mathematical integers are equally close to {@code f1/f2},\n     * then \u003ci\u003en\u003c/i\u003e is the integer that is even. If the remainder is\n     * zero, its sign is the same as the sign of the first argument.\n     * Special cases:\n     * \u003cul\u003e\u003cli\u003eIf either argument is NaN, or the first argument is infinite,\n     * or the second argument is positive zero or negative zero, then the\n     * result is NaN.\n     * \u003cli\u003eIf the first argument is finite and the second argument is\n     * infinite, then the result is the same as the first argument.\u003c/ul\u003e\n     *\n     * @param   f1   the dividend.\n     * @param   f2   the divisor.\n     * @return  the remainder when {@code f1} is divided by\n     *          {@code f2}.\n     */\n    public static double IEEEremainder(double f1, double f2) {\n        return StrictMath.IEEEremainder(f1, f2); // delegate to StrictMath\n    }\n\n    /**\n     * Returns the smallest (closest to negative infinity)\n     * {@code double} value that is greater than or equal to the\n     * argument and is equal to a mathematical integer. Special cases:\n     * \u003cul\u003e\u003cli\u003eIf the argument value is already equal to a\n     * mathematical integer, then the result is the same as the\n     * argument.  \u003cli\u003eIf the argument is NaN or an infinity or\n     * positive zero or negative zero, then the result is the same as\n     * the argument.  \u003cli\u003eIf the argument value is less than zero but\n     * greater than -1.0, then the result is negative zero.\u003c/ul\u003e Note\n     * that the value of {@code Math.ceil(x)} is exactly the\n     * value of {@code -Math.floor(-x)}.\n     *\n     * @apiNote\n     * This method corresponds to the roundToIntegralTowardPositive\n     * operation defined in IEEE 754.\n     *\n     * @param   a   a value.\n     * @return  the smallest (closest to negative infinity)\n     *          floating-point value that is greater than or equal to\n     *          the argument and is equal to a mathematical integer.\n     */\n    @IntrinsicCandidate\n    public static double ceil(double a) {\n        return StrictMath.ceil(a); // default impl. delegates to StrictMath\n    }\n\n    /**\n     * Returns the largest (closest to positive infinity)\n     * {@code double} value that is less than or equal to the\n     * argument and is equal to a mathematical integer. Special cases:\n     * \u003cul\u003e\u003cli\u003eIf the argument value is already equal to a\n     * mathematical integer, then the result is the same as the\n     * argument.  \u003cli\u003eIf the argument is NaN or an infinity or\n     * positive zero or negative zero, then the result is the same as\n     * the argument.\u003c/ul\u003e\n     *\n     * @apiNote\n     * This method corresponds to the roundToIntegralTowardNegative\n     * operation defined in IEEE 754.\n     *\n     * @param   a   a value.\n     * @return  the largest (closest to positive infinity)\n     *          floating-point value that less than or equal to the argument\n     *          and is equal to a mathematical integer.\n     */\n    @IntrinsicCandidate\n    public static double floor(double a) {\n        return StrictMath.floor(a); // default impl. delegates to StrictMath\n    }\n\n    /**\n     * Returns the {@code double} value that is closest in value\n     * to the argument and is equal to a mathematical integer. If two\n     * {@code double} values that are mathematical integers are\n     * equally close, the result is the integer value that is\n     * even. Special cases:\n     * \u003cul\u003e\u003cli\u003eIf the argument value is already equal to a mathematical\n     * integer, then the result is the same as the argument.\n     * \u003cli\u003eIf the argument is NaN or an infinity or positive zero or negative\n     * zero, then the result is the same as the argument.\u003c/ul\u003e\n     *\n     * @apiNote\n     * This method corresponds to the roundToIntegralTiesToEven\n     * operation defined in IEEE 754.\n     *\n     * @param   a   a {@code double} value.\n     * @return  the closest floating-point value to {@code a} that is\n     *          equal to a mathematical integer.\n     */\n    @IntrinsicCandidate\n    public static double rint(double a) {\n        return StrictMath.rint(a); // default impl. delegates to StrictMath\n    }\n\n    /**\n     * Returns the angle \u003ci\u003etheta\u003c/i\u003e from the conversion of rectangular\n     * coordinates ({@code x},\u0026nbsp;{@code y}) to polar\n     * coordinates (r,\u0026nbsp;\u003ci\u003etheta\u003c/i\u003e).\n     * This method computes the phase \u003ci\u003etheta\u003c/i\u003e by computing an arc tangent\n     * of {@code y/x} in the range of -\u003ci\u003epi\u003c/i\u003e to \u003ci\u003epi\u003c/i\u003e. Special\n     * cases:\n     * \u003cul\u003e\u003cli\u003eIf either argument is NaN, then the result is NaN.\n     * \u003cli\u003eIf the first argument is positive zero and the second argument\n     * is positive, or the first argument is positive and finite and the\n     * second argument is positive infinity, then the result is positive\n     * zero.\n     * \u003cli\u003eIf the first argument is negative zero and the second argument\n     * is positive, or the first argument is negative and finite and the\n     * second argument is positive infinity, then the result is negative zero.\n     * \u003cli\u003eIf the first argument is positive zero and the second argument\n     * is negative, or the first argument is positive and finite and the\n     * second argument is negative infinity, then the result is the\n     * {@code double} value closest to \u003ci\u003epi\u003c/i\u003e.\n     * \u003cli\u003eIf the first argument is negative zero and the second argument\n     * is negative, or the first argument is negative and finite and the\n     * second argument is negative infinity, then the result is the\n     * {@code double} value closest to -\u003ci\u003epi\u003c/i\u003e.\n     * \u003cli\u003eIf the first argument is positive and the second argument is\n     * positive zero or negative zero, or the first argument is positive\n     * infinity and the second argument is finite, then the result is the\n     * {@code double} value closest to \u003ci\u003epi\u003c/i\u003e/2.\n     * \u003cli\u003eIf the first argument is negative and the second argument is\n     * positive zero or negative zero, or the first argument is negative\n     * infinity and the second argument is finite, then the result is the\n     * {@code double} value closest to -\u003ci\u003epi\u003c/i\u003e/2.\n     * \u003cli\u003eIf both arguments are positive infinity, then the result is the\n     * {@code double} value closest to \u003ci\u003epi\u003c/i\u003e/4.\n     * \u003cli\u003eIf the first argument is positive infinity and the second argument\n     * is negative infinity, then the result is the {@code double}\n     * value closest to 3*\u003ci\u003epi\u003c/i\u003e/4.\n     * \u003cli\u003eIf the first argument is negative infinity and the second argument\n     * is positive infinity, then the result is the {@code double} value\n     * closest to -\u003ci\u003epi\u003c/i\u003e/4.\n     * \u003cli\u003eIf both arguments are negative infinity, then the result is the\n     * {@code double} value closest to -3*\u003ci\u003epi\u003c/i\u003e/4.\u003c/ul\u003e\n     *\n     * \u003cp\u003eThe computed result must be within 2 ulps of the exact result.\n     * Results must be semi-monotonic.\n     *\n     * @apiNote\n     * For \u003ci\u003ey\u003c/i\u003e with a positive sign and finite nonzero\n     * \u003ci\u003ex\u003c/i\u003e, the exact mathematical value of {@code atan2} is\n     * equal to:\n     * \u003cul\u003e\n     * \u003cli\u003eIf \u003ci\u003ex\u003c/i\u003e {@literal \u003e} 0, atan(abs(\u003ci\u003ey\u003c/i\u003e/\u003ci\u003ex\u003c/i\u003e))\n     * \u003cli\u003eIf \u003ci\u003ex\u003c/i\u003e {@literal \u003c} 0, \u0026pi; - atan(abs(\u003ci\u003ey\u003c/i\u003e/\u003ci\u003ex\u003c/i\u003e))\n     * \u003c/ul\u003e\n     *\n     * @param   y   the ordinate coordinate\n     * @param   x   the abscissa coordinate\n     * @return  the \u003ci\u003etheta\u003c/i\u003e component of the point\n     *          (\u003ci\u003er\u003c/i\u003e,\u0026nbsp;\u003ci\u003etheta\u003c/i\u003e)\n     *          in polar coordinates that corresponds to the point\n     *          (\u003ci\u003ex\u003c/i\u003e,\u0026nbsp;\u003ci\u003ey\u003c/i\u003e) in Cartesian coordinates.\n     */\n    @IntrinsicCandidate\n    public static double atan2(double y, double x) {\n        return StrictMath.atan2(y, x); // default impl. delegates to StrictMath\n    }\n\n    /**\n     * Returns the value of the first argument raised to the power of the\n     * second argument. Special cases:\n     *\n     * \u003cul\u003e\u003cli\u003eIf the second argument is positive or negative zero, then the\n     * result is 1.0.\n     * \u003cli\u003eIf the second argument is 1.0, then the result is the same as the\n     * first argument.\n     * \u003cli\u003eIf the second argument is NaN, then the result is NaN.\n     * \u003cli\u003eIf the first argument is NaN and the second argument is nonzero,\n     * then the result is NaN.\n     *\n     * \u003cli\u003eIf\n     * \u003cul\u003e\n     * \u003cli\u003ethe absolute value of the first argument is greater than 1\n     * and the second argument is positive infinity, or\n     * \u003cli\u003ethe absolute value of the first argument is less than 1 and\n     * the second argument is negative infinity,\n     * \u003c/ul\u003e\n     * then the result is positive infinity.\n     *\n     * \u003cli\u003eIf\n     * \u003cul\u003e\n     * \u003cli\u003ethe absolute value of the first argument is greater than 1 and\n     * the second argument is negative infinity, or\n     * \u003cli\u003ethe absolute value of the\n     * first argument is less than 1 and the second argument is positive\n     * infinity,\n     * \u003c/ul\u003e\n     * then the result is positive zero.\n     *\n     * \u003cli\u003eIf the absolute value of the first argument equals 1 and the\n     * second argument is infinite, then the result is NaN.\n     *\n     * \u003cli\u003eIf\n     * \u003cul\u003e\n     * \u003cli\u003ethe first argument is positive zero and the second argument\n     * is greater than zero, or\n     * \u003cli\u003ethe first argument is positive infinity and the second\n     * argument is less than zero,\n     * \u003c/ul\u003e\n     * then the result is positive zero.\n     *\n     * \u003cli\u003eIf\n     * \u003cul\u003e\n     * \u003cli\u003ethe first argument is positive zero and the second argument\n     * is less than zero, or\n     * \u003cli\u003ethe first argument is positive infinity and the second\n     * argument is greater than zero,\n     * \u003c/ul\u003e\n     * then the result is positive infinity.\n     *\n     * \u003cli\u003eIf\n     * \u003cul\u003e\n     * \u003cli\u003ethe first argument is negative zero and the second argument\n     * is greater than zero but not a finite odd integer, or\n     * \u003cli\u003ethe first argument is negative infinity and the second\n     * argument is less than zero but not a finite odd integer,\n     * \u003c/ul\u003e\n     * then the result is positive zero.\n     *\n     * \u003cli\u003eIf\n     * \u003cul\u003e\n     * \u003cli\u003ethe first argument is negative zero and the second argument\n     * is a positive finite odd integer, or\n     * \u003cli\u003ethe first argument is negative infinity and the second\n     * argument is a negative finite odd integer,\n     * \u003c/ul\u003e\n     * then the result is negative zero.\n     *\n     * \u003cli\u003eIf\n     * \u003cul\u003e\n     * \u003cli\u003ethe first argument is negative zero and the second argument\n     * is less than zero but not a finite odd integer, or\n     * \u003cli\u003ethe first argument is negative infinity and the second\n     * argument is greater than zero but not a finite odd integer,\n     * \u003c/ul\u003e\n     * then the result is positive infinity.\n     *\n     * \u003cli\u003eIf\n     * \u003cul\u003e\n     * \u003cli\u003ethe first argument is negative zero and the second argument\n     * is a negative finite odd integer, or\n     * \u003cli\u003ethe first argument is negative infinity and the second\n     * argument is a positive finite odd integer,\n     * \u003c/ul\u003e\n     * then the result is negative infinity.\n     *\n     * \u003cli\u003eIf the first argument is finite and less than zero\n     * \u003cul\u003e\n     * \u003cli\u003e if the second argument is a finite even integer, the\n     * result is equal to the result of raising the absolute value of\n     * the first argument to the power of the second argument\n     *\n     * \u003cli\u003eif the second argument is a finite odd integer, the result\n     * is equal to the negative of the result of raising the absolute\n     * value of the first argument to the power of the second\n     * argument\n     *\n     * \u003cli\u003eif the second argument is finite and not an integer, then\n     * the result is NaN.\n     * \u003c/ul\u003e\n     *\n     * \u003cli\u003eIf both arguments are integers, then the result is exactly equal\n     * to the mathematical result of raising the first argument to the power\n     * of the second argument if that result can in fact be represented\n     * exactly as a {@code double} value.\u003c/ul\u003e\n     *\n     * \u003cp\u003e(In the foregoing descriptions, a floating-point value is\n     * considered to be an integer if and only if it is finite and a\n     * fixed point of the method {@link #ceil ceil} or,\n     * equivalently, a fixed point of the method {@link #floor\n     * floor}. A value is a fixed point of a one-argument\n     * method if and only if the result of applying the method to the\n     * value is equal to the value.)\n     *\n     * \u003cp\u003eThe computed result must be within 1 ulp of the exact result.\n     * Results must be semi-monotonic.\n     *\n     * @apiNote\n     * The special cases definitions of this method differ from the\n     * special case definitions of the IEEE 754 recommended {@code\n     * pow} operation for \u0026plusmn;{@code 1.0} raised to an infinite\n     * power. This method treats such cases as indeterminate and\n     * specifies a NaN is returned. The IEEE 754 specification treats\n     * the infinite power as a large integer (large-magnitude\n     * floating-point numbers are numerically integers, specifically\n     * even integers) and therefore specifies {@code 1.0} be returned.\n     *\n     * @param   a   the base.\n     * @param   b   the exponent.\n     * @return  the value {@code a}\u003csup\u003e{@code b}\u003c/sup\u003e.\n     */\n    @IntrinsicCandidate\n    public static double pow(double a, double b) {\n        return StrictMath.pow(a, b); // default impl. delegates to StrictMath\n    }\n\n    /**\n     * Returns the closest {@code int} to the argument, with ties\n     * rounding to positive infinity.\n     *\n     * \u003cp\u003e\n     * Special cases:\n     * \u003cul\u003e\u003cli\u003eIf the argument is NaN, the result is 0.\n     * \u003cli\u003eIf the argument is negative infinity or any value less than or\n     * equal to the value of {@code Integer.MIN_VALUE}, the result is\n     * equal to the value of {@code Integer.MIN_VALUE}.\n     * \u003cli\u003eIf the argument is positive infinity or any value greater than or\n     * equal to the value of {@code Integer.MAX_VALUE}, the result is\n     * equal to the value of {@code Integer.MAX_VALUE}.\u003c/ul\u003e\n     *\n     * @param   a   a floating-point value to be rounded to an integer.\n     * @return  the value of the argument rounded to the nearest\n     *          {@code int} value.\n     * @see     java.lang.Integer#MAX_VALUE\n     * @see     java.lang.Integer#MIN_VALUE\n     */\n    @IntrinsicCandidate\n    public static int round(float a) {\n        int intBits \u003d Float.floatToRawIntBits(a);\n        int biasedExp \u003d (intBits \u0026 FloatConsts.EXP_BIT_MASK)\n                \u003e\u003e (FloatConsts.SIGNIFICAND_WIDTH - 1);\n        int shift \u003d (FloatConsts.SIGNIFICAND_WIDTH - 2\n                + FloatConsts.EXP_BIAS) - biasedExp;\n        if ((shift \u0026 -32) \u003d\u003d 0) { // shift \u003e\u003d 0 \u0026\u0026 shift \u003c 32\n            // a is a finite number such that pow(2,-32) \u003c\u003d ulp(a) \u003c 1\n            int r \u003d ((intBits \u0026 FloatConsts.SIGNIF_BIT_MASK)\n                    | (FloatConsts.SIGNIF_BIT_MASK + 1));\n            if (intBits \u003c 0) {\n                r \u003d -r;\n            }\n            // In the comments below each Java expression evaluates to the value\n            // the corresponding mathematical expression:\n            // (r) evaluates to a / ulp(a)\n            // (r \u003e\u003e shift) evaluates to floor(a * 2)\n            // ((r \u003e\u003e shift) + 1) evaluates to floor((a + 1/2) * 2)\n            // (((r \u003e\u003e shift) + 1) \u003e\u003e 1) evaluates to floor(a + 1/2)\n            return ((r \u003e\u003e shift) + 1) \u003e\u003e 1;\n        } else {\n            // a is either\n            // - a finite number with abs(a) \u003c exp(2,FloatConsts.SIGNIFICAND_WIDTH-32) \u003c 1/2\n            // - a finite number with ulp(a) \u003e\u003d 1 and hence a is a mathematical integer\n            // - an infinity or NaN\n            return (int) a;\n        }\n    }\n\n    /**\n     * Returns the closest {@code long} to the argument, with ties\n     * rounding to positive infinity.\n     *\n     * \u003cp\u003eSpecial cases:\n     * \u003cul\u003e\u003cli\u003eIf the argument is NaN, the result is 0.\n     * \u003cli\u003eIf the argument is negative infinity or any value less than or\n     * equal to the value of {@code Long.MIN_VALUE}, the result is\n     * equal to the value of {@code Long.MIN_VALUE}.\n     * \u003cli\u003eIf the argument is positive infinity or any value greater than or\n     * equal to the value of {@code Long.MAX_VALUE}, the result is\n     * equal to the value of {@code Long.MAX_VALUE}.\u003c/ul\u003e\n     *\n     * @param   a   a floating-point value to be rounded to a\n     *          {@code long}.\n     * @return  the value of the argument rounded to the nearest\n     *          {@code long} value.\n     * @see     java.lang.Long#MAX_VALUE\n     * @see     java.lang.Long#MIN_VALUE\n     */\n    @IntrinsicCandidate\n    public static long round(double a) {\n        long longBits \u003d Double.doubleToRawLongBits(a);\n        long biasedExp \u003d (longBits \u0026 DoubleConsts.EXP_BIT_MASK)\n                \u003e\u003e (DoubleConsts.SIGNIFICAND_WIDTH - 1);\n        long shift \u003d (DoubleConsts.SIGNIFICAND_WIDTH - 2\n                + DoubleConsts.EXP_BIAS) - biasedExp;\n        if ((shift \u0026 -64) \u003d\u003d 0) { // shift \u003e\u003d 0 \u0026\u0026 shift \u003c 64\n            // a is a finite number such that pow(2,-64) \u003c\u003d ulp(a) \u003c 1\n            long r \u003d ((longBits \u0026 DoubleConsts.SIGNIF_BIT_MASK)\n                    | (DoubleConsts.SIGNIF_BIT_MASK + 1));\n            if (longBits \u003c 0) {\n                r \u003d -r;\n            }\n            // In the comments below each Java expression evaluates to the value\n            // the corresponding mathematical expression:\n            // (r) evaluates to a / ulp(a)\n            // (r \u003e\u003e shift) evaluates to floor(a * 2)\n            // ((r \u003e\u003e shift) + 1) evaluates to floor((a + 1/2) * 2)\n            // (((r \u003e\u003e shift) + 1) \u003e\u003e 1) evaluates to floor(a + 1/2)\n            return ((r \u003e\u003e shift) + 1) \u003e\u003e 1;\n        } else {\n            // a is either\n            // - a finite number with abs(a) \u003c exp(2,DoubleConsts.SIGNIFICAND_WIDTH-64) \u003c 1/2\n            // - a finite number with ulp(a) \u003e\u003d 1 and hence a is a mathematical integer\n            // - an infinity or NaN\n            return (long) a;\n        }\n    }\n\n    private static final class RandomNumberGeneratorHolder {\n        static final Random randomNumberGenerator \u003d new Random();\n    }\n\n    /**\n     * Returns a {@code double} value with a positive sign, greater\n     * than or equal to {@code 0.0} and less than {@code 1.0}.\n     * Returned values are chosen pseudorandomly with (approximately)\n     * uniform distribution from that range.\n     *\n     * \u003cp\u003eWhen this method is first called, it creates a single new\n     * pseudorandom-number generator, exactly as if by the expression\n     *\n     * \u003cblockquote\u003e{@code new java.util.Random()}\u003c/blockquote\u003e\n     *\n     * This new pseudorandom-number generator is used thereafter for\n     * all calls to this method and is used nowhere else.\n     *\n     * \u003cp\u003eThis method is properly synchronized to allow correct use by\n     * more than one thread. However, if many threads need to generate\n     * pseudorandom numbers at a great rate, it may reduce contention\n     * for each thread to have its own pseudorandom-number generator.\n     *\n     * @apiNote\n     * As the largest {@code double} value less than {@code 1.0}\n     * is {@code Math.nextDown(1.0)}, a value {@code x} in the closed range\n     * {@code [x1,x2]} where {@code x1\u003c\u003dx2} may be defined by the statements\n     *\n     * \u003cblockquote\u003e\u003cpre\u003e{@code\n     * double f \u003d Math.random()/Math.nextDown(1.0);\n     * double x \u003d x1*(1.0 - f) + x2*f;\n     * }\u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @return  a pseudorandom {@code double} greater than or equal\n     * to {@code 0.0} and less than {@code 1.0}.\n     * @see #nextDown(double)\n     * @see Random#nextDouble()\n     */\n    public static double random() {\n        return RandomNumberGeneratorHolder.randomNumberGenerator.nextDouble();\n    }\n\n    /**\n     * Returns the sum of its arguments,\n     * throwing an exception if the result overflows an {@code int}.\n     *\n     * @param x the first value\n     * @param y the second value\n     * @return the result\n     * @throws ArithmeticException if the result overflows an int\n     * @since 1.8\n     */\n    @IntrinsicCandidate\n    public static int addExact(int x, int y) {\n        int r \u003d x + y;\n        // HD 2-12 Overflow iff both arguments have the opposite sign of the result\n        if (((x ^ r) \u0026 (y ^ r)) \u003c 0) {\n            throw new ArithmeticException(\"integer overflow\");\n        }\n        return r;\n    }\n\n    /**\n     * Returns the sum of its arguments,\n     * throwing an exception if the result overflows a {@code long}.\n     *\n     * @param x the first value\n     * @param y the second value\n     * @return the result\n     * @throws ArithmeticException if the result overflows a long\n     * @since 1.8\n     */\n    @IntrinsicCandidate\n    public static long addExact(long x, long y) {\n        long r \u003d x + y;\n        // HD 2-12 Overflow iff both arguments have the opposite sign of the result\n        if (((x ^ r) \u0026 (y ^ r)) \u003c 0) {\n            throw new ArithmeticException(\"long overflow\");\n        }\n        return r;\n    }\n\n    /**\n     * Returns the difference of the arguments,\n     * throwing an exception if the result overflows an {@code int}.\n     *\n     * @param x the first value\n     * @param y the second value to subtract from the first\n     * @return the result\n     * @throws ArithmeticException if the result overflows an int\n     * @since 1.8\n     */\n    @IntrinsicCandidate\n    public static int subtractExact(int x, int y) {\n        int r \u003d x - y;\n        // HD 2-12 Overflow iff the arguments have different signs and\n        // the sign of the result is different from the sign of x\n        if (((x ^ y) \u0026 (x ^ r)) \u003c 0) {\n            throw new ArithmeticException(\"integer overflow\");\n        }\n        return r;\n    }\n\n    /**\n     * Returns the difference of the arguments,\n     * throwing an exception if the result overflows a {@code long}.\n     *\n     * @param x the first value\n     * @param y the second value to subtract from the first\n     * @return the result\n     * @throws ArithmeticException if the result overflows a long\n     * @since 1.8\n     */\n    @IntrinsicCandidate\n    public static long subtractExact(long x, long y) {\n        long r \u003d x - y;\n        // HD 2-12 Overflow iff the arguments have different signs and\n        // the sign of the result is different from the sign of x\n        if (((x ^ y) \u0026 (x ^ r)) \u003c 0) {\n            throw new ArithmeticException(\"long overflow\");\n        }\n        return r;\n    }\n\n    /**\n     * Returns the product of the arguments,\n     * throwing an exception if the result overflows an {@code int}.\n     *\n     * @param x the first value\n     * @param y the second value\n     * @return the result\n     * @throws ArithmeticException if the result overflows an int\n     * @since 1.8\n     */\n    @IntrinsicCandidate\n    public static int multiplyExact(int x, int y) {\n        long r \u003d (long)x * (long)y;\n        if ((int)r !\u003d r) {\n            throw new ArithmeticException(\"integer overflow\");\n        }\n        return (int)r;\n    }\n\n    /**\n     * Returns the product of the arguments, throwing an exception if the result\n     * overflows a {@code long}.\n     *\n     * @param x the first value\n     * @param y the second value\n     * @return the result\n     * @throws ArithmeticException if the result overflows a long\n     * @since 9\n     */\n    public static long multiplyExact(long x, int y) {\n        return multiplyExact(x, (long)y);\n    }\n\n    /**\n     * Returns the product of the arguments,\n     * throwing an exception if the result overflows a {@code long}.\n     *\n     * @param x the first value\n     * @param y the second value\n     * @return the result\n     * @throws ArithmeticException if the result overflows a long\n     * @since 1.8\n     */\n    @IntrinsicCandidate\n    public static long multiplyExact(long x, long y) {\n        long r \u003d x * y;\n        long ax \u003d Math.abs(x);\n        long ay \u003d Math.abs(y);\n        if (((ax | ay) \u003e\u003e\u003e 31 !\u003d 0)) {\n            // Some bits greater than 2^31 that might cause overflow\n            // Check the result using the divide operator\n            // and check for the special case of Long.MIN_VALUE * -1\n           if (((y !\u003d 0) \u0026\u0026 (r / y !\u003d x)) ||\n               (x \u003d\u003d Long.MIN_VALUE \u0026\u0026 y \u003d\u003d -1)) {\n                throw new ArithmeticException(\"long overflow\");\n            }\n        }\n        return r;\n    }\n\n    /**\n     * Returns the quotient of the arguments, throwing an exception if the\n     * result overflows an {@code int}.  Such overflow occurs in this method if\n     * {@code x} is {@link Integer#MIN_VALUE} and {@code y} is {@code -1}.\n     * In contrast, if {@code Integer.MIN_VALUE / -1} were evaluated directly,\n     * the result would be {@code Integer.MIN_VALUE} and no exception would be\n     * thrown.\n     * \u003cp\u003e\n     * If {@code y} is zero, an {@code ArithmeticException} is thrown\n     * (JLS {@jls 15.17.2}).\n     * \u003cp\u003e\n     * The built-in remainder operator \"{@code %}\" is a suitable counterpart\n     * both for this method and for the built-in division operator \"{@code /}\".\n     *\n     * @param x the dividend\n     * @param y the divisor\n     * @return the quotient {@code x / y}\n     * @throws ArithmeticException if {@code y} is zero or the quotient\n     * overflows an int\n     * @jls 15.17.2 Division Operator /\n     * @since 18\n     */\n    public static int divideExact(int x, int y) {\n        int q \u003d x / y;\n        if ((x \u0026 y \u0026 q) \u003e\u003d 0) {\n            return q;\n        }\n        throw new ArithmeticException(\"integer overflow\");\n    }\n\n    /**\n     * Returns the quotient of the arguments, throwing an exception if the\n     * result overflows a {@code long}.  Such overflow occurs in this method if\n     * {@code x} is {@link Long#MIN_VALUE} and {@code y} is {@code -1}.\n     * In contrast, if {@code Long.MIN_VALUE / -1} were evaluated directly,\n     * the result would be {@code Long.MIN_VALUE} and no exception would be\n     * thrown.\n     * \u003cp\u003e\n     * If {@code y} is zero, an {@code ArithmeticException} is thrown\n     * (JLS {@jls 15.17.2}).\n     * \u003cp\u003e\n     * The built-in remainder operator \"{@code %}\" is a suitable counterpart\n     * both for this method and for the built-in division operator \"{@code /}\".\n     *\n     * @param x the dividend\n     * @param y the divisor\n     * @return the quotient {@code x / y}\n     * @throws ArithmeticException if {@code y} is zero or the quotient\n     * overflows a long\n     * @jls 15.17.2 Division Operator /\n     * @since 18\n     */\n    public static long divideExact(long x, long y) {\n        long q \u003d x / y;\n        if ((x \u0026 y \u0026 q) \u003e\u003d 0) {\n            return q;\n        }\n        throw new ArithmeticException(\"long overflow\");\n    }\n\n    /**\n     * Returns the largest (closest to positive infinity)\n     * {@code int} value that is less than or equal to the algebraic quotient.\n     * This method is identical to {@link #floorDiv(int,int)} except that it\n     * throws an {@code ArithmeticException} when the dividend is\n     * {@linkplain Integer#MIN_VALUE Integer.MIN_VALUE} and the divisor is\n     * {@code -1} instead of ignoring the integer overflow and returning\n     * {@code Integer.MIN_VALUE}.\n     * \u003cp\u003e\n     * The floor modulus method {@link #floorMod(int,int)} is a suitable\n     * counterpart both for this method and for the {@link #floorDiv(int,int)}\n     * method.\n     * \u003cp\u003e\n     * For examples, see {@link #floorDiv(int, int)}.\n     *\n     * @param x the dividend\n     * @param y the divisor\n     * @return the largest (closest to positive infinity)\n     * {@code int} value that is less than or equal to the algebraic quotient.\n     * @throws ArithmeticException if the divisor {@code y} is zero, or the\n     * dividend {@code x} is {@code Integer.MIN_VALUE} and the divisor {@code y}\n     * is {@code -1}.\n     * @see #floorDiv(int, int)\n     * @since 18\n     */\n    public static int floorDivExact(int x, int y) {\n        final int q \u003d x / y;\n        if ((x \u0026 y \u0026 q) \u003e\u003d 0) {\n            // if the signs are different and modulo not zero, round down\n            if ((x ^ y) \u003c 0 \u0026\u0026 (q * y !\u003d x)) {\n                return q - 1;\n            }\n            return q;\n        }\n        throw new ArithmeticException(\"integer overflow\");\n    }\n\n    /**\n     * Returns the largest (closest to positive infinity)\n     * {@code long} value that is less than or equal to the algebraic quotient.\n     * This method is identical to {@link #floorDiv(long,long)} except that it\n     * throws an {@code ArithmeticException} when the dividend is\n     * {@linkplain Long#MIN_VALUE Long.MIN_VALUE} and the divisor is\n     * {@code -1} instead of ignoring the integer overflow and returning\n     * {@code Long.MIN_VALUE}.\n     * \u003cp\u003e\n     * The floor modulus method {@link #floorMod(long,long)} is a suitable\n     * counterpart both for this method and for the {@link #floorDiv(long,long)}\n     * method.\n     * \u003cp\u003e\n     * For examples, see {@link #floorDiv(int, int)}.\n     *\n     * @param x the dividend\n     * @param y the divisor\n     * @return the largest (closest to positive infinity)\n     * {@code long} value that is less than or equal to the algebraic quotient.\n     * @throws ArithmeticException if the divisor {@code y} is zero, or the\n     * dividend {@code x} is {@code Long.MIN_VALUE} and the divisor {@code y}\n     * is {@code -1}.\n     * @see #floorDiv(long,long)\n     * @since 18\n     */\n    public static long floorDivExact(long x, long y) {\n        final long q \u003d x / y;\n        if ((x \u0026 y \u0026 q) \u003e\u003d 0) {\n            // if the signs are different and modulo not zero, round down\n            if ((x ^ y) \u003c 0 \u0026\u0026 (q * y !\u003d x)) {\n                return q - 1;\n            }\n            return q;\n        }\n        throw new ArithmeticException(\"long overflow\");\n    }\n\n    /**\n     * Returns the smallest (closest to negative infinity)\n     * {@code int} value that is greater than or equal to the algebraic quotient.\n     * This method is identical to {@link #ceilDiv(int,int)} except that it\n     * throws an {@code ArithmeticException} when the dividend is\n     * {@linkplain Integer#MIN_VALUE Integer.MIN_VALUE} and the divisor is\n     * {@code -1} instead of ignoring the integer overflow and returning\n     * {@code Integer.MIN_VALUE}.\n     * \u003cp\u003e\n     * The ceil modulus method {@link #ceilMod(int,int)} is a suitable\n     * counterpart both for this method and for the {@link #ceilDiv(int,int)}\n     * method.\n     * \u003cp\u003e\n     * For examples, see {@link #ceilDiv(int, int)}.\n     *\n     * @param x the dividend\n     * @param y the divisor\n     * @return the smallest (closest to negative infinity)\n     * {@code int} value that is greater than or equal to the algebraic quotient.\n     * @throws ArithmeticException if the divisor {@code y} is zero, or the\n     * dividend {@code x} is {@code Integer.MIN_VALUE} and the divisor {@code y}\n     * is {@code -1}.\n     * @see #ceilDiv(int, int)\n     * @since 18\n     */\n    public static int ceilDivExact(int x, int y) {\n        final int q \u003d x / y;\n        if ((x \u0026 y \u0026 q) \u003e\u003d 0) {\n            // if the signs are the same and modulo not zero, round up\n            if ((x ^ y) \u003e\u003d 0 \u0026\u0026 (q * y !\u003d x)) {\n                return q + 1;\n            }\n            return q;\n        }\n        throw new ArithmeticException(\"integer overflow\");\n    }\n\n    /**\n     * Returns the smallest (closest to negative infinity)\n     * {@code long} value that is greater than or equal to the algebraic quotient.\n     * This method is identical to {@link #ceilDiv(long,long)} except that it\n     * throws an {@code ArithmeticException} when the dividend is\n     * {@linkplain Long#MIN_VALUE Long.MIN_VALUE} and the divisor is\n     * {@code -1} instead of ignoring the integer overflow and returning\n     * {@code Long.MIN_VALUE}.\n     * \u003cp\u003e\n     * The ceil modulus method {@link #ceilMod(long,long)} is a suitable\n     * counterpart both for this method and for the {@link #ceilDiv(long,long)}\n     * method.\n     * \u003cp\u003e\n     * For examples, see {@link #ceilDiv(int, int)}.\n     *\n     * @param x the dividend\n     * @param y the divisor\n     * @return the smallest (closest to negative infinity)\n     * {@code long} value that is greater than or equal to the algebraic quotient.\n     * @throws ArithmeticException if the divisor {@code y} is zero, or the\n     * dividend {@code x} is {@code Long.MIN_VALUE} and the divisor {@code y}\n     * is {@code -1}.\n     * @see #ceilDiv(long,long)\n     * @since 18\n     */\n    public static long ceilDivExact(long x, long y) {\n        final long q \u003d x / y;\n        if ((x \u0026 y \u0026 q) \u003e\u003d 0) {\n            // if the signs are the same and modulo not zero, round up\n            if ((x ^ y) \u003e\u003d 0 \u0026\u0026 (q * y !\u003d x)) {\n                return q + 1;\n            }\n            return q;\n        }\n        throw new ArithmeticException(\"long overflow\");\n    }\n\n    /**\n     * Returns the argument incremented by one, throwing an exception if the\n     * result overflows an {@code int}.\n     * The overflow only occurs for {@linkplain Integer#MAX_VALUE the maximum value}.\n     *\n     * @param a the value to increment\n     * @return the result\n     * @throws ArithmeticException if the result overflows an int\n     * @since 1.8\n     */\n    @IntrinsicCandidate\n    public static int incrementExact(int a) {\n        if (a \u003d\u003d Integer.MAX_VALUE) {\n            throw new ArithmeticException(\"integer overflow\");\n        }\n\n        return a + 1;\n    }\n\n    /**\n     * Returns the argument incremented by one, throwing an exception if the\n     * result overflows a {@code long}.\n     * The overflow only occurs for {@linkplain Long#MAX_VALUE the maximum value}.\n     *\n     * @param a the value to increment\n     * @return the result\n     * @throws ArithmeticException if the result overflows a long\n     * @since 1.8\n     */\n    @IntrinsicCandidate\n    public static long incrementExact(long a) {\n        if (a \u003d\u003d Long.MAX_VALUE) {\n            throw new ArithmeticException(\"long overflow\");\n        }\n\n        return a + 1L;\n    }\n\n    /**\n     * Returns the argument decremented by one, throwing an exception if the\n     * result overflows an {@code int}.\n     * The overflow only occurs for {@linkplain Integer#MIN_VALUE the minimum value}.\n     *\n     * @param a the value to decrement\n     * @return the result\n     * @throws ArithmeticException if the result overflows an int\n     * @since 1.8\n     */\n    @IntrinsicCandidate\n    public static int decrementExact(int a) {\n        if (a \u003d\u003d Integer.MIN_VALUE) {\n            throw new ArithmeticException(\"integer overflow\");\n        }\n\n        return a - 1;\n    }\n\n    /**\n     * Returns the argument decremented by one, throwing an exception if the\n     * result overflows a {@code long}.\n     * The overflow only occurs for {@linkplain Long#MIN_VALUE the minimum value}.\n     *\n     * @param a the value to decrement\n     * @return the result\n     * @throws ArithmeticException if the result overflows a long\n     * @since 1.8\n     */\n    @IntrinsicCandidate\n    public static long decrementExact(long a) {\n        if (a \u003d\u003d Long.MIN_VALUE) {\n            throw new ArithmeticException(\"long overflow\");\n        }\n\n        return a - 1L;\n    }\n\n    /**\n     * Returns the negation of the argument, throwing an exception if the\n     * result overflows an {@code int}.\n     * The overflow only occurs for {@linkplain Integer#MIN_VALUE the minimum value}.\n     *\n     * @param a the value to negate\n     * @return the result\n     * @throws ArithmeticException if the result overflows an int\n     * @since 1.8\n     */\n    @IntrinsicCandidate\n    public static int negateExact(int a) {\n        if (a \u003d\u003d Integer.MIN_VALUE) {\n            throw new ArithmeticException(\"integer overflow\");\n        }\n\n        return -a;\n    }\n\n    /**\n     * Returns the negation of the argument, throwing an exception if the\n     * result overflows a {@code long}.\n     * The overflow only occurs for {@linkplain Long#MIN_VALUE the minimum value}.\n     *\n     * @param a the value to negate\n     * @return the result\n     * @throws ArithmeticException if the result overflows a long\n     * @since 1.8\n     */\n    @IntrinsicCandidate\n    public static long negateExact(long a) {\n        if (a \u003d\u003d Long.MIN_VALUE) {\n            throw new ArithmeticException(\"long overflow\");\n        }\n\n        return -a;\n    }\n\n    /**\n     * Returns the value of the {@code long} argument,\n     * throwing an exception if the value overflows an {@code int}.\n     *\n     * @param value the long value\n     * @return the argument as an int\n     * @throws ArithmeticException if the {@code argument} overflows an int\n     * @since 1.8\n     */\n    public static int toIntExact(long value) {\n        if ((int)value !\u003d value) {\n            throw new ArithmeticException(\"integer overflow\");\n        }\n        return (int)value;\n    }\n\n    /**\n     * Returns the exact mathematical product of the arguments.\n     *\n     * @param x the first value\n     * @param y the second value\n     * @return the result\n     * @since 9\n     */\n    public static long multiplyFull(int x, int y) {\n        return (long)x * (long)y;\n    }\n\n    /**\n     * Returns as a {@code long} the most significant 64 bits of the 128-bit\n     * product of two 64-bit factors.\n     *\n     * @param x the first value\n     * @param y the second value\n     * @return the result\n     * @see #unsignedMultiplyHigh\n     * @since 9\n     */\n    @IntrinsicCandidate\n    public static long multiplyHigh(long x, long y) {\n        // Use technique from section 8-2 of Henry S. Warren, Jr.,\n        // Hacker\u0027s Delight (2nd ed.) (Addison Wesley, 2013), 173-174.\n        long x1 \u003d x \u003e\u003e 32;\n        long x2 \u003d x \u0026 0xFFFFFFFFL;\n        long y1 \u003d y \u003e\u003e 32;\n        long y2 \u003d y \u0026 0xFFFFFFFFL;\n\n        long z2 \u003d x2 * y2;\n        long t \u003d x1 * y2 + (z2 \u003e\u003e\u003e 32);\n        long z1 \u003d t \u0026 0xFFFFFFFFL;\n        long z0 \u003d t \u003e\u003e 32;\n        z1 +\u003d x2 * y1;\n\n        return x1 * y1 + z0 + (z1 \u003e\u003e 32);\n    }\n\n    /**\n     * Returns as a {@code long} the most significant 64 bits of the unsigned\n     * 128-bit product of two unsigned 64-bit factors.\n     *\n     * @param x the first value\n     * @param y the second value\n     * @return the result\n     * @see #multiplyHigh\n     * @since 18\n     */\n    @IntrinsicCandidate\n    public static long unsignedMultiplyHigh(long x, long y) {\n        // Compute via multiplyHigh() to leverage the intrinsic\n        long result \u003d Math.multiplyHigh(x, y);\n        result +\u003d (y \u0026 (x \u003e\u003e 63)); // equivalent to `if (x \u003c 0) result +\u003d y;`\n        result +\u003d (x \u0026 (y \u003e\u003e 63)); // equivalent to `if (y \u003c 0) result +\u003d x;`\n        return result;\n    }\n\n    /**\n     * Returns the largest (closest to positive infinity)\n     * {@code int} value that is less than or equal to the algebraic quotient.\n     * There is one special case: if the dividend is\n     * {@linkplain Integer#MIN_VALUE Integer.MIN_VALUE} and the divisor is {@code -1},\n     * then integer overflow occurs and\n     * the result is equal to {@code Integer.MIN_VALUE}.\n     * \u003cp\u003e\n     * Normal integer division operates under the round to zero rounding mode\n     * (truncation).  This operation instead acts under the round toward\n     * negative infinity (floor) rounding mode.\n     * The floor rounding mode gives different results from truncation\n     * when the exact quotient is not an integer and is negative.\n     * \u003cul\u003e\n     *   \u003cli\u003eIf the signs of the arguments are the same, the results of\n     *       {@code floorDiv} and the {@code /} operator are the same.  \u003cbr\u003e\n     *       For example, {@code floorDiv(4, 3) \u003d\u003d 1} and {@code (4 / 3) \u003d\u003d 1}.\u003c/li\u003e\n     *   \u003cli\u003eIf the signs of the arguments are different, {@code floorDiv}\n     *       returns the largest integer less than or equal to the quotient\n     *       while the {@code /} operator returns the smallest integer greater\n     *       than or equal to the quotient.\n     *       They differ if and only if the quotient is not an integer.\u003cbr\u003e\n     *       For example, {@code floorDiv(-4, 3) \u003d\u003d -2},\n     *       whereas {@code (-4 / 3) \u003d\u003d -1}.\n     *   \u003c/li\u003e\n     * \u003c/ul\u003e\n     *\n     * @param x the dividend\n     * @param y the divisor\n     * @return the largest (closest to positive infinity)\n     * {@code int} value that is less than or equal to the algebraic quotient.\n     * @throws ArithmeticException if the divisor {@code y} is zero\n     * @see #floorMod(int, int)\n     * @see #floor(double)\n     * @since 1.8\n     */\n    public static int floorDiv(int x, int y) {\n        final int q \u003d x / y;\n        // if the signs are different and modulo not zero, round down\n        if ((x ^ y) \u003c 0 \u0026\u0026 (q * y !\u003d x)) {\n            return q - 1;\n        }\n        return q;\n    }\n\n    /**\n     * Returns the largest (closest to positive infinity)\n     * {@code long} value that is less than or equal to the algebraic quotient.\n     * There is one special case: if the dividend is\n     * {@linkplain Long#MIN_VALUE Long.MIN_VALUE} and the divisor is {@code -1},\n     * then integer overflow occurs and\n     * the result is equal to {@code Long.MIN_VALUE}.\n     * \u003cp\u003e\n     * Normal integer division operates under the round to zero rounding mode\n     * (truncation).  This operation instead acts under the round toward\n     * negative infinity (floor) rounding mode.\n     * The floor rounding mode gives different results from truncation\n     * when the exact result is not an integer and is negative.\n     * \u003cp\u003e\n     * For examples, see {@link #floorDiv(int, int)}.\n     *\n     * @param x the dividend\n     * @param y the divisor\n     * @return the largest (closest to positive infinity)\n     * {@code long} value that is less than or equal to the algebraic quotient.\n     * @throws ArithmeticException if the divisor {@code y} is zero\n     * @see #floorMod(long, int)\n     * @see #floor(double)\n     * @since 9\n     */\n    public static long floorDiv(long x, int y) {\n        return floorDiv(x, (long)y);\n    }\n\n    /**\n     * Returns the largest (closest to positive infinity)\n     * {@code long} value that is less than or equal to the algebraic quotient.\n     * There is one special case: if the dividend is\n     * {@linkplain Long#MIN_VALUE Long.MIN_VALUE} and the divisor is {@code -1},\n     * then integer overflow occurs and\n     * the result is equal to {@code Long.MIN_VALUE}.\n     * \u003cp\u003e\n     * Normal integer division operates under the round to zero rounding mode\n     * (truncation).  This operation instead acts under the round toward\n     * negative infinity (floor) rounding mode.\n     * The floor rounding mode gives different results from truncation\n     * when the exact result is not an integer and is negative.\n     * \u003cp\u003e\n     * For examples, see {@link #floorDiv(int, int)}.\n     *\n     * @param x the dividend\n     * @param y the divisor\n     * @return the largest (closest to positive infinity)\n     * {@code long} value that is less than or equal to the algebraic quotient.\n     * @throws ArithmeticException if the divisor {@code y} is zero\n     * @see #floorMod(long, long)\n     * @see #floor(double)\n     * @since 1.8\n     */\n    public static long floorDiv(long x, long y) {\n        final long q \u003d x / y;\n        // if the signs are different and modulo not zero, round down\n        if ((x ^ y) \u003c 0 \u0026\u0026 (q * y !\u003d x)) {\n            return q - 1;\n        }\n        return q;\n    }\n\n    /**\n     * Returns the floor modulus of the {@code int} arguments.\n     * \u003cp\u003e\n     * The floor modulus is {@code r \u003d x - (floorDiv(x, y) * y)},\n     * has the same sign as the divisor {@code y} or is zero, and\n     * is in the range of {@code -abs(y) \u003c r \u003c +abs(y)}.\n     *\n     * \u003cp\u003e\n     * The relationship between {@code floorDiv} and {@code floorMod} is such that:\n     * \u003cul\u003e\n     *   \u003cli\u003e{@code floorDiv(x, y) * y + floorMod(x, y) \u003d\u003d x}\u003c/li\u003e\n     * \u003c/ul\u003e\n     * \u003cp\u003e\n     * The difference in values between {@code floorMod} and the {@code %} operator\n     * is due to the difference between {@code floorDiv} and the {@code /}\n     * operator, as detailed in {@linkplain #floorDiv(int, int)}.\n     * \u003cp\u003e\n     * Examples:\n     * \u003cul\u003e\n     *   \u003cli\u003eRegardless of the signs of the arguments, {@code floorMod}(x, y)\n     *       is zero exactly when {@code x % y} is zero as well.\u003c/li\u003e\n     *   \u003cli\u003eIf neither {@code floorMod}(x, y) nor {@code x % y} is zero,\n     *       they differ exactly when the signs of the arguments differ.\u003cbr\u003e\n     *       \u003cul\u003e\n     *       \u003cli\u003e{@code floorMod(+4, +3) \u003d\u003d +1}; \u0026nbsp; and {@code (+4 % +3) \u003d\u003d +1}\u003c/li\u003e\n     *       \u003cli\u003e{@code floorMod(-4, -3) \u003d\u003d -1}; \u0026nbsp; and {@code (-4 % -3) \u003d\u003d -1}\u003c/li\u003e\n     *       \u003cli\u003e{@code floorMod(+4, -3) \u003d\u003d -2}; \u0026nbsp; and {@code (+4 % -3) \u003d\u003d +1}\u003c/li\u003e\n     *       \u003cli\u003e{@code floorMod(-4, +3) \u003d\u003d +2}; \u0026nbsp; and {@code (-4 % +3) \u003d\u003d -1}\u003c/li\u003e\n     *       \u003c/ul\u003e\n     *   \u003c/li\u003e\n     * \u003c/ul\u003e\n     *\n     * @param x the dividend\n     * @param y the divisor\n     * @return the floor modulus {@code x - (floorDiv(x, y) * y)}\n     * @throws ArithmeticException if the divisor {@code y} is zero\n     * @see #floorDiv(int, int)\n     * @since 1.8\n     */\n    public static int floorMod(int x, int y) {\n        final int r \u003d x % y;\n        // if the signs are different and modulo not zero, adjust result\n        if ((x ^ y) \u003c 0 \u0026\u0026 r !\u003d 0) {\n            return r + y;\n        }\n        return r;\n    }\n\n    /**\n     * Returns the floor modulus of the {@code long} and {@code int} arguments.\n     * \u003cp\u003e\n     * The floor modulus is {@code r \u003d x - (floorDiv(x, y) * y)},\n     * has the same sign as the divisor {@code y} or is zero, and\n     * is in the range of {@code -abs(y) \u003c r \u003c +abs(y)}.\n     *\n     * \u003cp\u003e\n     * The relationship between {@code floorDiv} and {@code floorMod} is such that:\n     * \u003cul\u003e\n     *   \u003cli\u003e{@code floorDiv(x, y) * y + floorMod(x, y) \u003d\u003d x}\u003c/li\u003e\n     * \u003c/ul\u003e\n     * \u003cp\u003e\n     * For examples, see {@link #floorMod(int, int)}.\n     *\n     * @param x the dividend\n     * @param y the divisor\n     * @return the floor modulus {@code x - (floorDiv(x, y) * y)}\n     * @throws ArithmeticException if the divisor {@code y} is zero\n     * @see #floorDiv(long, int)\n     * @since 9\n     */\n    public static int floorMod(long x, int y) {\n        // Result cannot overflow the range of int.\n        return (int)floorMod(x, (long)y);\n    }\n\n    /**\n     * Returns the floor modulus of the {@code long} arguments.\n     * \u003cp\u003e\n     * The floor modulus is {@code r \u003d x - (floorDiv(x, y) * y)},\n     * has the same sign as the divisor {@code y} or is zero, and\n     * is in the range of {@code -abs(y) \u003c r \u003c +abs(y)}.\n     *\n     * \u003cp\u003e\n     * The relationship between {@code floorDiv} and {@code floorMod} is such that:\n     * \u003cul\u003e\n     *   \u003cli\u003e{@code floorDiv(x, y) * y + floorMod(x, y) \u003d\u003d x}\u003c/li\u003e\n     * \u003c/ul\u003e\n     * \u003cp\u003e\n     * For examples, see {@link #floorMod(int, int)}.\n     *\n     * @param x the dividend\n     * @param y the divisor\n     * @return the floor modulus {@code x - (floorDiv(x, y) * y)}\n     * @throws ArithmeticException if the divisor {@code y} is zero\n     * @see #floorDiv(long, long)\n     * @since 1.8\n     */\n    public static long floorMod(long x, long y) {\n        final long r \u003d x % y;\n        // if the signs are different and modulo not zero, adjust result\n        if ((x ^ y) \u003c 0 \u0026\u0026 r !\u003d 0) {\n            return r + y;\n        }\n        return r;\n    }\n\n    /**\n     * Returns the smallest (closest to negative infinity)\n     * {@code int} value that is greater than or equal to the algebraic quotient.\n     * There is one special case: if the dividend is\n     * {@linkplain Integer#MIN_VALUE Integer.MIN_VALUE} and the divisor is {@code -1},\n     * then integer overflow occurs and\n     * the result is equal to {@code Integer.MIN_VALUE}.\n     * \u003cp\u003e\n     * Normal integer division operates under the round to zero rounding mode\n     * (truncation).  This operation instead acts under the round toward\n     * positive infinity (ceiling) rounding mode.\n     * The ceiling rounding mode gives different results from truncation\n     * when the exact quotient is not an integer and is positive.\n     * \u003cul\u003e\n     *   \u003cli\u003eIf the signs of the arguments are different, the results of\n     *       {@code ceilDiv} and the {@code /} operator are the same.  \u003cbr\u003e\n     *       For example, {@code ceilDiv(-4, 3) \u003d\u003d -1} and {@code (-4 / 3) \u003d\u003d -1}.\u003c/li\u003e\n     *   \u003cli\u003eIf the signs of the arguments are the same, {@code ceilDiv}\n     *       returns the smallest integer greater than or equal to the quotient\n     *       while the {@code /} operator returns the largest integer less\n     *       than or equal to the quotient.\n     *       They differ if and only if the quotient is not an integer.\u003cbr\u003e\n     *       For example, {@code ceilDiv(4, 3) \u003d\u003d 2},\n     *       whereas {@code (4 / 3) \u003d\u003d 1}.\n     *   \u003c/li\u003e\n     * \u003c/ul\u003e\n     *\n     * @param x the dividend\n     * @param y the divisor\n     * @return the smallest (closest to negative infinity)\n     * {@code int} value that is greater than or equal to the algebraic quotient.\n     * @throws ArithmeticException if the divisor {@code y} is zero\n     * @see #ceilMod(int, int)\n     * @see #ceil(double)\n     * @since 18\n     */\n    public static int ceilDiv(int x, int y) {\n        final int q \u003d x / y;\n        // if the signs are the same and modulo not zero, round up\n        if ((x ^ y) \u003e\u003d 0 \u0026\u0026 (q * y !\u003d x)) {\n            return q + 1;\n        }\n        return q;\n    }\n\n    /**\n     * Returns the smallest (closest to negative infinity)\n     * {@code long} value that is greater than or equal to the algebraic quotient.\n     * There is one special case: if the dividend is\n     * {@linkplain Long#MIN_VALUE Long.MIN_VALUE} and the divisor is {@code -1},\n     * then integer overflow occurs and\n     * the result is equal to {@code Long.MIN_VALUE}.\n     * \u003cp\u003e\n     * Normal integer division operates under the round to zero rounding mode\n     * (truncation).  This operation instead acts under the round toward\n     * positive infinity (ceiling) rounding mode.\n     * The ceiling rounding mode gives different results from truncation\n     * when the exact result is not an integer and is positive.\n     * \u003cp\u003e\n     * For examples, see {@link #ceilDiv(int, int)}.\n     *\n     * @param x the dividend\n     * @param y the divisor\n     * @return the smallest (closest to negative infinity)\n     * {@code long} value that is greater than or equal to the algebraic quotient.\n     * @throws ArithmeticException if the divisor {@code y} is zero\n     * @see #ceilMod(int, int)\n     * @see #ceil(double)\n     * @since 18\n     */\n    public static long ceilDiv(long x, int y) {\n        return ceilDiv(x, (long)y);\n    }\n\n    /**\n     * Returns the smallest (closest to negative infinity)\n     * {@code long} value that is greater than or equal to the algebraic quotient.\n     * There is one special case: if the dividend is\n     * {@linkplain Long#MIN_VALUE Long.MIN_VALUE} and the divisor is {@code -1},\n     * then integer overflow occurs and\n     * the result is equal to {@code Long.MIN_VALUE}.\n     * \u003cp\u003e\n     * Normal integer division operates under the round to zero rounding mode\n     * (truncation).  This operation instead acts under the round toward\n     * positive infinity (ceiling) rounding mode.\n     * The ceiling rounding mode gives different results from truncation\n     * when the exact result is not an integer and is positive.\n     * \u003cp\u003e\n     * For examples, see {@link #ceilDiv(int, int)}.\n     *\n     * @param x the dividend\n     * @param y the divisor\n     * @return the smallest (closest to negative infinity)\n     * {@code long} value that is greater than or equal to the algebraic quotient.\n     * @throws ArithmeticException if the divisor {@code y} is zero\n     * @see #ceilMod(int, int)\n     * @see #ceil(double)\n     * @since 18\n     */\n    public static long ceilDiv(long x, long y) {\n        final long q \u003d x / y;\n        // if the signs are the same and modulo not zero, round up\n        if ((x ^ y) \u003e\u003d 0 \u0026\u0026 (q * y !\u003d x)) {\n            return q + 1;\n        }\n        return q;\n    }\n\n    /**\n     * Returns the ceiling modulus of the {@code int} arguments.\n     * \u003cp\u003e\n     * The ceiling modulus is {@code r \u003d x - (ceilDiv(x, y) * y)},\n     * has the opposite sign as the divisor {@code y} or is zero, and\n     * is in the range of {@code -abs(y) \u003c r \u003c +abs(y)}.\n     *\n     * \u003cp\u003e\n     * The relationship between {@code ceilDiv} and {@code ceilMod} is such that:\n     * \u003cul\u003e\n     *   \u003cli\u003e{@code ceilDiv(x, y) * y + ceilMod(x, y) \u003d\u003d x}\u003c/li\u003e\n     * \u003c/ul\u003e\n     * \u003cp\u003e\n     * The difference in values between {@code ceilMod} and the {@code %} operator\n     * is due to the difference between {@code ceilDiv} and the {@code /}\n     * operator, as detailed in {@linkplain #ceilDiv(int, int)}.\n     * \u003cp\u003e\n     * Examples:\n     * \u003cul\u003e\n     *   \u003cli\u003eRegardless of the signs of the arguments, {@code ceilMod}(x, y)\n     *       is zero exactly when {@code x % y} is zero as well.\u003c/li\u003e\n     *   \u003cli\u003eIf neither {@code ceilMod}(x, y) nor {@code x % y} is zero,\n     *       they differ exactly when the signs of the arguments are the same.\u003cbr\u003e\n     *       \u003cul\u003e\n     *       \u003cli\u003e{@code ceilMod(+4, +3) \u003d\u003d -2}; \u0026nbsp; and {@code (+4 % +3) \u003d\u003d +1}\u003c/li\u003e\n     *       \u003cli\u003e{@code ceilMod(-4, -3) \u003d\u003d +2}; \u0026nbsp; and {@code (-4 % -3) \u003d\u003d -1}\u003c/li\u003e\n     *       \u003cli\u003e{@code ceilMod(+4, -3) \u003d\u003d +1}; \u0026nbsp; and {@code (+4 % -3) \u003d\u003d +1}\u003c/li\u003e\n     *       \u003cli\u003e{@code ceilMod(-4, +3) \u003d\u003d -1}; \u0026nbsp; and {@code (-4 % +3) \u003d\u003d -1}\u003c/li\u003e\n     *       \u003c/ul\u003e\n     *   \u003c/li\u003e\n     * \u003c/ul\u003e\n     *\n     * @param x the dividend\n     * @param y the divisor\n     * @return the ceiling modulus {@code x - (ceilDiv(x, y) * y)}\n     * @throws ArithmeticException if the divisor {@code y} is zero\n     * @see #ceilDiv(int, int)\n     * @since 18\n     */\n    public static int ceilMod(int x, int y) {\n        final int r \u003d x % y;\n        // if the signs are the same and modulo not zero, adjust result\n        if ((x ^ y) \u003e\u003d 0 \u0026\u0026 r !\u003d 0) {\n            return r - y;\n        }\n        return r;\n    }\n\n    /**\n     * Returns the ceiling modulus of the {@code long} and {@code int} arguments.\n     * \u003cp\u003e\n     * The ceiling modulus is {@code r \u003d x - (ceilDiv(x, y) * y)},\n     * has the opposite sign as the divisor {@code y} or is zero, and\n     * is in the range of {@code -abs(y) \u003c r \u003c +abs(y)}.\n     *\n     * \u003cp\u003e\n     * The relationship between {@code ceilDiv} and {@code ceilMod} is such that:\n     * \u003cul\u003e\n     *   \u003cli\u003e{@code ceilDiv(x, y) * y + ceilMod(x, y) \u003d\u003d x}\u003c/li\u003e\n     * \u003c/ul\u003e\n     * \u003cp\u003e\n     * For examples, see {@link #ceilMod(int, int)}.\n     *\n     * @param x the dividend\n     * @param y the divisor\n     * @return the ceiling modulus {@code x - (ceilDiv(x, y) * y)}\n     * @throws ArithmeticException if the divisor {@code y} is zero\n     * @see #ceilDiv(long, int)\n     * @since 18\n     */\n    public static int ceilMod(long x, int y) {\n        // Result cannot overflow the range of int.\n        return (int)ceilMod(x, (long)y);\n    }\n\n    /**\n     * Returns the ceiling modulus of the {@code long} arguments.\n     * \u003cp\u003e\n     * The ceiling modulus is {@code r \u003d x - (ceilDiv(x, y) * y)},\n     * has the opposite sign as the divisor {@code y} or is zero, and\n     * is in the range of {@code -abs(y) \u003c r \u003c +abs(y)}.\n     *\n     * \u003cp\u003e\n     * The relationship between {@code ceilDiv} and {@code ceilMod} is such that:\n     * \u003cul\u003e\n     *   \u003cli\u003e{@code ceilDiv(x, y) * y + ceilMod(x, y) \u003d\u003d x}\u003c/li\u003e\n     * \u003c/ul\u003e\n     * \u003cp\u003e\n     * For examples, see {@link #ceilMod(int, int)}.\n     *\n     * @param x the dividend\n     * @param y the divisor\n     * @return the ceiling modulus {@code x - (ceilDiv(x, y) * y)}\n     * @throws ArithmeticException if the divisor {@code y} is zero\n     * @see #ceilDiv(long, long)\n     * @since 18\n     */\n    public static long ceilMod(long x, long y) {\n        final long r \u003d x % y;\n        // if the signs are the same and modulo not zero, adjust result\n        if ((x ^ y) \u003e\u003d 0 \u0026\u0026 r !\u003d 0) {\n            return r - y;\n        }\n        return r;\n    }\n\n    /**\n     * Returns the absolute value of an {@code int} value.\n     * If the argument is not negative, the argument is returned.\n     * If the argument is negative, the negation of the argument is returned.\n     *\n     * \u003cp\u003eNote that if the argument is equal to the value of {@link\n     * Integer#MIN_VALUE}, the most negative representable {@code int}\n     * value, the result is that same value, which is negative. In\n     * contrast, the {@link Math#absExact(int)} method throws an\n     * {@code ArithmeticException} for this value.\n     *\n     * @param   a   the argument whose absolute value is to be determined\n     * @return  the absolute value of the argument.\n     * @see Math#absExact(int)\n     */\n    @IntrinsicCandidate\n    public static int abs(int a) {\n        return (a \u003c 0) ? -a : a;\n    }\n\n    /**\n     * Returns the mathematical absolute value of an {@code int} value\n     * if it is exactly representable as an {@code int}, throwing\n     * {@code ArithmeticException} if the result overflows the\n     * positive {@code int} range.\n     *\n     * \u003cp\u003eSince the range of two\u0027s complement integers is asymmetric\n     * with one additional negative value (JLS {@jls 4.2.1}), the\n     * mathematical absolute value of {@link Integer#MIN_VALUE}\n     * overflows the positive {@code int} range, so an exception is\n     * thrown for that argument.\n     *\n     * @param  a  the argument whose absolute value is to be determined\n     * @return the absolute value of the argument, unless overflow occurs\n     * @throws ArithmeticException if the argument is {@link Integer#MIN_VALUE}\n     * @see Math#abs(int)\n     * @since 15\n     */\n    public static int absExact(int a) {\n        if (a \u003d\u003d Integer.MIN_VALUE)\n            throw new ArithmeticException(\n                \"Overflow to represent absolute value of Integer.MIN_VALUE\");\n        else\n            return abs(a);\n    }\n\n    /**\n     * Returns the absolute value of a {@code long} value.\n     * If the argument is not negative, the argument is returned.\n     * If the argument is negative, the negation of the argument is returned.\n     *\n     * \u003cp\u003eNote that if the argument is equal to the value of {@link\n     * Long#MIN_VALUE}, the most negative representable {@code long}\n     * value, the result is that same value, which is negative. In\n     * contrast, the {@link Math#absExact(long)} method throws an\n     * {@code ArithmeticException} for this value.\n     *\n     * @param   a   the argument whose absolute value is to be determined\n     * @return  the absolute value of the argument.\n     * @see Math#absExact(long)\n     */\n    @IntrinsicCandidate\n    public static long abs(long a) {\n        return (a \u003c 0) ? -a : a;\n    }\n\n    /**\n     * Returns the mathematical absolute value of an {@code long} value\n     * if it is exactly representable as an {@code long}, throwing\n     * {@code ArithmeticException} if the result overflows the\n     * positive {@code long} range.\n     *\n     * \u003cp\u003eSince the range of two\u0027s complement integers is asymmetric\n     * with one additional negative value (JLS {@jls 4.2.1}), the\n     * mathematical absolute value of {@link Long#MIN_VALUE} overflows\n     * the positive {@code long} range, so an exception is thrown for\n     * that argument.\n     *\n     * @param  a  the argument whose absolute value is to be determined\n     * @return the absolute value of the argument, unless overflow occurs\n     * @throws ArithmeticException if the argument is {@link Long#MIN_VALUE}\n     * @see Math#abs(long)\n     * @since 15\n     */\n    public static long absExact(long a) {\n        if (a \u003d\u003d Long.MIN_VALUE)\n            throw new ArithmeticException(\n                \"Overflow to represent absolute value of Long.MIN_VALUE\");\n        else\n            return abs(a);\n    }\n\n    /**\n     * Returns the absolute value of a {@code float} value.\n     * If the argument is not negative, the argument is returned.\n     * If the argument is negative, the negation of the argument is returned.\n     * Special cases:\n     * \u003cul\u003e\u003cli\u003eIf the argument is positive zero or negative zero, the\n     * result is positive zero.\n     * \u003cli\u003eIf the argument is infinite, the result is positive infinity.\n     * \u003cli\u003eIf the argument is NaN, the result is NaN.\u003c/ul\u003e\n     *\n     * @apiNote As implied by the above, one valid implementation of\n     * this method is given by the expression below which computes a\n     * {@code float} with the same exponent and significand as the\n     * argument but with a guaranteed zero sign bit indicating a\n     * positive value:\u003cbr\u003e\n     * {@code Float.intBitsToFloat(0x7fffffff \u0026 Float.floatToRawIntBits(a))}\n     *\n     * @param   a   the argument whose absolute value is to be determined\n     * @return  the absolute value of the argument.\n     */\n    @IntrinsicCandidate\n    public static float abs(float a) {\n        // Convert to bit field form, zero the sign bit, and convert back\n        return Float.intBitsToFloat(Float.floatToRawIntBits(a) \u0026 FloatConsts.MAG_BIT_MASK);\n    }\n\n    /**\n     * Returns the absolute value of a {@code double} value.\n     * If the argument is not negative, the argument is returned.\n     * If the argument is negative, the negation of the argument is returned.\n     * Special cases:\n     * \u003cul\u003e\u003cli\u003eIf the argument is positive zero or negative zero, the result\n     * is positive zero.\n     * \u003cli\u003eIf the argument is infinite, the result is positive infinity.\n     * \u003cli\u003eIf the argument is NaN, the result is NaN.\u003c/ul\u003e\n     *\n     * @apiNote As implied by the above, one valid implementation of\n     * this method is given by the expression below which computes a\n     * {@code double} with the same exponent and significand as the\n     * argument but with a guaranteed zero sign bit indicating a\n     * positive value:\u003cbr\u003e\n     * {@code Double.longBitsToDouble((Double.doubleToRawLongBits(a)\u003c\u003c1)\u003e\u003e\u003e1)}\n     *\n     * @param   a   the argument whose absolute value is to be determined\n     * @return  the absolute value of the argument.\n     */\n    @IntrinsicCandidate\n    public static double abs(double a) {\n        // Convert to bit field form, zero the sign bit, and convert back\n        return Double.longBitsToDouble(Double.doubleToRawLongBits(a) \u0026 DoubleConsts.MAG_BIT_MASK);\n\n    }\n\n    /**\n     * Returns the greater of two {@code int} values. That is, the\n     * result is the argument closer to the value of\n     * {@link Integer#MAX_VALUE}. If the arguments have the same value,\n     * the result is that same value.\n     *\n     * @param   a   an argument.\n     * @param   b   another argument.\n     * @return  the larger of {@code a} and {@code b}.\n     */\n    @IntrinsicCandidate\n    public static int max(int a, int b) {\n        return (a \u003e\u003d b) ? a : b;\n    }\n\n    /**\n     * Returns the greater of two {@code long} values. That is, the\n     * result is the argument closer to the value of\n     * {@link Long#MAX_VALUE}. If the arguments have the same value,\n     * the result is that same value.\n     *\n     * @param   a   an argument.\n     * @param   b   another argument.\n     * @return  the larger of {@code a} and {@code b}.\n     */\n    public static long max(long a, long b) {\n        return (a \u003e\u003d b) ? a : b;\n    }\n\n    // Use raw bit-wise conversions on guaranteed non-NaN arguments.\n    private static final long negativeZeroFloatBits  \u003d Float.floatToRawIntBits(-0.0f);\n    private static final long negativeZeroDoubleBits \u003d Double.doubleToRawLongBits(-0.0d);\n\n    /**\n     * Returns the greater of two {@code float} values.  That is,\n     * the result is the argument closer to positive infinity. If the\n     * arguments have the same value, the result is that same\n     * value. If either value is NaN, then the result is NaN.  Unlike\n     * the numerical comparison operators, this method considers\n     * negative zero to be strictly smaller than positive zero. If one\n     * argument is positive zero and the other negative zero, the\n     * result is positive zero.\n     *\n     * @apiNote\n     * This method corresponds to the maximum operation defined in\n     * IEEE 754.\n     *\n     * @param   a   an argument.\n     * @param   b   another argument.\n     * @return  the larger of {@code a} and {@code b}.\n     */\n    @IntrinsicCandidate\n    public static float max(float a, float b) {\n        if (a !\u003d a)\n            return a;   // a is NaN\n        if ((a \u003d\u003d 0.0f) \u0026\u0026\n            (b \u003d\u003d 0.0f) \u0026\u0026\n            (Float.floatToRawIntBits(a) \u003d\u003d negativeZeroFloatBits)) {\n            // Raw conversion ok since NaN can\u0027t map to -0.0.\n            return b;\n        }\n        return (a \u003e\u003d b) ? a : b;\n    }\n\n    /**\n     * Returns the greater of two {@code double} values.  That\n     * is, the result is the argument closer to positive infinity. If\n     * the arguments have the same value, the result is that same\n     * value. If either value is NaN, then the result is NaN.  Unlike\n     * the numerical comparison operators, this method considers\n     * negative zero to be strictly smaller than positive zero. If one\n     * argument is positive zero and the other negative zero, the\n     * result is positive zero.\n     *\n     * @apiNote\n     * This method corresponds to the maximum operation defined in\n     * IEEE 754.\n     *\n     * @param   a   an argument.\n     * @param   b   another argument.\n     * @return  the larger of {@code a} and {@code b}.\n     */\n    @IntrinsicCandidate\n    public static double max(double a, double b) {\n        if (a !\u003d a)\n            return a;   // a is NaN\n        if ((a \u003d\u003d 0.0d) \u0026\u0026\n            (b \u003d\u003d 0.0d) \u0026\u0026\n            (Double.doubleToRawLongBits(a) \u003d\u003d negativeZeroDoubleBits)) {\n            // Raw conversion ok since NaN can\u0027t map to -0.0.\n            return b;\n        }\n        return (a \u003e\u003d b) ? a : b;\n    }\n\n    /**\n     * Returns the smaller of two {@code int} values. That is,\n     * the result the argument closer to the value of\n     * {@link Integer#MIN_VALUE}.  If the arguments have the same\n     * value, the result is that same value.\n     *\n     * @param   a   an argument.\n     * @param   b   another argument.\n     * @return  the smaller of {@code a} and {@code b}.\n     */\n    @IntrinsicCandidate\n    public static int min(int a, int b) {\n        return (a \u003c\u003d b) ? a : b;\n    }\n\n    /**\n     * Returns the smaller of two {@code long} values. That is,\n     * the result is the argument closer to the value of\n     * {@link Long#MIN_VALUE}. If the arguments have the same\n     * value, the result is that same value.\n     *\n     * @param   a   an argument.\n     * @param   b   another argument.\n     * @return  the smaller of {@code a} and {@code b}.\n     */\n    public static long min(long a, long b) {\n        return (a \u003c\u003d b) ? a : b;\n    }\n\n    /**\n     * Returns the smaller of two {@code float} values.  That is,\n     * the result is the value closer to negative infinity. If the\n     * arguments have the same value, the result is that same\n     * value. If either value is NaN, then the result is NaN.  Unlike\n     * the numerical comparison operators, this method considers\n     * negative zero to be strictly smaller than positive zero.  If\n     * one argument is positive zero and the other is negative zero,\n     * the result is negative zero.\n     *\n     * @apiNote\n     * This method corresponds to the minimum operation defined in\n     * IEEE 754.\n     *\n     * @param   a   an argument.\n     * @param   b   another argument.\n     * @return  the smaller of {@code a} and {@code b}.\n     */\n    @IntrinsicCandidate\n    public static float min(float a, float b) {\n        if (a !\u003d a)\n            return a;   // a is NaN\n        if ((a \u003d\u003d 0.0f) \u0026\u0026\n            (b \u003d\u003d 0.0f) \u0026\u0026\n            (Float.floatToRawIntBits(b) \u003d\u003d negativeZeroFloatBits)) {\n            // Raw conversion ok since NaN can\u0027t map to -0.0.\n            return b;\n        }\n        return (a \u003c\u003d b) ? a : b;\n    }\n\n    /**\n     * Returns the smaller of two {@code double} values.  That\n     * is, the result is the value closer to negative infinity. If the\n     * arguments have the same value, the result is that same\n     * value. If either value is NaN, then the result is NaN.  Unlike\n     * the numerical comparison operators, this method considers\n     * negative zero to be strictly smaller than positive zero. If one\n     * argument is positive zero and the other is negative zero, the\n     * result is negative zero.\n     *\n     * @apiNote\n     * This method corresponds to the minimum operation defined in\n     * IEEE 754.\n     *\n     * @param   a   an argument.\n     * @param   b   another argument.\n     * @return  the smaller of {@code a} and {@code b}.\n     */\n    @IntrinsicCandidate\n    public static double min(double a, double b) {\n        if (a !\u003d a)\n            return a;   // a is NaN\n        if ((a \u003d\u003d 0.0d) \u0026\u0026\n            (b \u003d\u003d 0.0d) \u0026\u0026\n            (Double.doubleToRawLongBits(b) \u003d\u003d negativeZeroDoubleBits)) {\n            // Raw conversion ok since NaN can\u0027t map to -0.0.\n            return b;\n        }\n        return (a \u003c\u003d b) ? a : b;\n    }\n\n    /**\n     * Returns the fused multiply add of the three arguments; that is,\n     * returns the exact product of the first two arguments summed\n     * with the third argument and then rounded once to the nearest\n     * {@code double}.\n     *\n     * The rounding is done using the {@linkplain\n     * java.math.RoundingMode#HALF_EVEN round to nearest even\n     * rounding mode}.\n     *\n     * In contrast, if {@code a * b + c} is evaluated as a regular\n     * floating-point expression, two rounding errors are involved,\n     * the first for the multiply operation, the second for the\n     * addition operation.\n     *\n     * \u003cp\u003eSpecial cases:\n     * \u003cul\u003e\n     * \u003cli\u003e If any argument is NaN, the result is NaN.\n     *\n     * \u003cli\u003e If one of the first two arguments is infinite and the\n     * other is zero, the result is NaN.\n     *\n     * \u003cli\u003e If the exact product of the first two arguments is infinite\n     * (in other words, at least one of the arguments is infinite and\n     * the other is neither zero nor NaN) and the third argument is an\n     * infinity of the opposite sign, the result is NaN.\n     *\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eNote that {@code fma(a, 1.0, c)} returns the same\n     * result as ({@code a + c}).  However,\n     * {@code fma(a, b, +0.0)} does \u003cem\u003enot\u003c/em\u003e always return the\n     * same result as ({@code a * b}) since\n     * {@code fma(-0.0, +0.0, +0.0)} is {@code +0.0} while\n     * ({@code -0.0 * +0.0}) is {@code -0.0}; {@code fma(a, b, -0.0)} is\n     * equivalent to ({@code a * b}) however.\n     *\n     * @apiNote This method corresponds to the fusedMultiplyAdd\n     * operation defined in IEEE 754.\n     *\n     * @param a a value\n     * @param b a value\n     * @param c a value\n     *\n     * @return (\u003ci\u003ea\u003c/i\u003e\u0026nbsp;\u0026times;\u0026nbsp;\u003ci\u003eb\u003c/i\u003e\u0026nbsp;+\u0026nbsp;\u003ci\u003ec\u003c/i\u003e)\n     * computed, as if with unlimited range and precision, and rounded\n     * once to the nearest {@code double} value\n     *\n     * @since 9\n     */\n    @IntrinsicCandidate\n    public static double fma(double a, double b, double c) {\n        /*\n         * Infinity and NaN arithmetic is not quite the same with two\n         * roundings as opposed to just one so the simple expression\n         * \"a * b + c\" cannot always be used to compute the correct\n         * result.  With two roundings, the product can overflow and\n         * if the addend is infinite, a spurious NaN can be produced\n         * if the infinity from the overflow and the infinite addend\n         * have opposite signs.\n         */\n\n        // First, screen for and handle non-finite input values whose\n        // arithmetic is not supported by BigDecimal.\n        if (Double.isNaN(a) || Double.isNaN(b) || Double.isNaN(c)) {\n            return Double.NaN;\n        } else { // All inputs non-NaN\n            boolean infiniteA \u003d Double.isInfinite(a);\n            boolean infiniteB \u003d Double.isInfinite(b);\n            boolean infiniteC \u003d Double.isInfinite(c);\n            double result;\n\n            if (infiniteA || infiniteB || infiniteC) {\n                if (infiniteA \u0026\u0026 b \u003d\u003d 0.0 ||\n                    infiniteB \u0026\u0026 a \u003d\u003d 0.0 ) {\n                    return Double.NaN;\n                }\n                double product \u003d a * b;\n                if (Double.isInfinite(product) \u0026\u0026 !infiniteA \u0026\u0026 !infiniteB) {\n                    // Intermediate overflow; might cause a\n                    // spurious NaN if added to infinite c.\n                    assert Double.isInfinite(c);\n                    return c;\n                } else {\n                    result \u003d product + c;\n                    assert !Double.isFinite(result);\n                    return result;\n                }\n            } else { // All inputs finite\n                BigDecimal product \u003d (new BigDecimal(a)).multiply(new BigDecimal(b));\n                if (c \u003d\u003d 0.0) { // Positive or negative zero\n                    // If the product is an exact zero, use a\n                    // floating-point expression to compute the sign\n                    // of the zero final result. The product is an\n                    // exact zero if and only if at least one of a and\n                    // b is zero.\n                    if (a \u003d\u003d 0.0 || b \u003d\u003d 0.0) {\n                        return a * b + c;\n                    } else {\n                        // The sign of a zero addend doesn\u0027t matter if\n                        // the product is nonzero. The sign of a zero\n                        // addend is not factored in the result if the\n                        // exact product is nonzero but underflows to\n                        // zero; see IEEE-754 2008 section 6.3 \"The\n                        // sign bit\".\n                        return product.doubleValue();\n                    }\n                } else {\n                    return product.add(new BigDecimal(c)).doubleValue();\n                }\n            }\n        }\n    }\n\n    /**\n     * Returns the fused multiply add of the three arguments; that is,\n     * returns the exact product of the first two arguments summed\n     * with the third argument and then rounded once to the nearest\n     * {@code float}.\n     *\n     * The rounding is done using the {@linkplain\n     * java.math.RoundingMode#HALF_EVEN round to nearest even\n     * rounding mode}.\n     *\n     * In contrast, if {@code a * b + c} is evaluated as a regular\n     * floating-point expression, two rounding errors are involved,\n     * the first for the multiply operation, the second for the\n     * addition operation.\n     *\n     * \u003cp\u003eSpecial cases:\n     * \u003cul\u003e\n     * \u003cli\u003e If any argument is NaN, the result is NaN.\n     *\n     * \u003cli\u003e If one of the first two arguments is infinite and the\n     * other is zero, the result is NaN.\n     *\n     * \u003cli\u003e If the exact product of the first two arguments is infinite\n     * (in other words, at least one of the arguments is infinite and\n     * the other is neither zero nor NaN) and the third argument is an\n     * infinity of the opposite sign, the result is NaN.\n     *\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eNote that {@code fma(a, 1.0f, c)} returns the same\n     * result as ({@code a + c}).  However,\n     * {@code fma(a, b, +0.0f)} does \u003cem\u003enot\u003c/em\u003e always return the\n     * same result as ({@code a * b}) since\n     * {@code fma(-0.0f, +0.0f, +0.0f)} is {@code +0.0f} while\n     * ({@code -0.0f * +0.0f}) is {@code -0.0f}; {@code fma(a, b, -0.0f)} is\n     * equivalent to ({@code a * b}) however.\n     *\n     * @apiNote This method corresponds to the fusedMultiplyAdd\n     * operation defined in IEEE 754.\n     *\n     * @param a a value\n     * @param b a value\n     * @param c a value\n     *\n     * @return (\u003ci\u003ea\u003c/i\u003e\u0026nbsp;\u0026times;\u0026nbsp;\u003ci\u003eb\u003c/i\u003e\u0026nbsp;+\u0026nbsp;\u003ci\u003ec\u003c/i\u003e)\n     * computed, as if with unlimited range and precision, and rounded\n     * once to the nearest {@code float} value\n     *\n     * @since 9\n     */\n    @IntrinsicCandidate\n    public static float fma(float a, float b, float c) {\n        if (Float.isFinite(a) \u0026\u0026 Float.isFinite(b) \u0026\u0026 Float.isFinite(c)) {\n            if (a \u003d\u003d 0.0 || b \u003d\u003d 0.0) {\n                return a * b + c; // Handled signed zero cases\n            } else {\n                return (new BigDecimal((double)a * (double)b) // Exact multiply\n                        .add(new BigDecimal((double)c)))      // Exact sum\n                    .floatValue();                            // One rounding\n                                                              // to a float value\n            }\n        } else {\n            // At least one of a,b, and c is non-finite. The result\n            // will be non-finite as well and will be the same\n            // non-finite value under double as float arithmetic.\n            return (float)fma((double)a, (double)b, (double)c);\n        }\n    }\n\n    /**\n     * Returns the size of an ulp of the argument.  An ulp, unit in\n     * the last place, of a {@code double} value is the positive\n     * distance between this floating-point value and the {@code\n     * double} value next larger in magnitude.  Note that for non-NaN\n     * \u003ci\u003ex\u003c/i\u003e, \u003ccode\u003eulp(-\u003ci\u003ex\u003c/i\u003e) \u003d\u003d ulp(\u003ci\u003ex\u003c/i\u003e)\u003c/code\u003e.\n     *\n     * \u003cp\u003eSpecial Cases:\n     * \u003cul\u003e\n     * \u003cli\u003e If the argument is NaN, then the result is NaN.\n     * \u003cli\u003e If the argument is positive or negative infinity, then the\n     * result is positive infinity.\n     * \u003cli\u003e If the argument is positive or negative zero, then the result is\n     * {@code Double.MIN_VALUE}.\n     * \u003cli\u003e If the argument is \u0026plusmn;{@code Double.MAX_VALUE}, then\n     * the result is equal to 2\u003csup\u003e971\u003c/sup\u003e.\n     * \u003c/ul\u003e\n     *\n     * @param d the floating-point value whose ulp is to be returned\n     * @return the size of an ulp of the argument\n     * @author Joseph D. Darcy\n     * @since 1.5\n     */\n    public static double ulp(double d) {\n        int exp \u003d getExponent(d);\n\n        return switch(exp) {\n            case Double.MAX_EXPONENT + 1 -\u003e Math.abs(d);      // NaN or infinity\n            case Double.MIN_EXPONENT - 1 -\u003e Double.MIN_VALUE; // zero or subnormal\n            default -\u003e {\n                assert exp \u003c\u003d Double.MAX_EXPONENT \u0026\u0026 exp \u003e\u003d Double.MIN_EXPONENT;\n\n                // ulp(x) is usually 2^(SIGNIFICAND_WIDTH-1)*(2^ilogb(x))\n                exp \u003d exp - (DoubleConsts.SIGNIFICAND_WIDTH - 1);\n                if (exp \u003e\u003d Double.MIN_EXPONENT) {\n                    yield powerOfTwoD(exp);\n                } else {\n                    // return a subnormal result; left shift integer\n                    // representation of Double.MIN_VALUE appropriate\n                    // number of positions\n                    yield Double.longBitsToDouble(1L \u003c\u003c\n                            (exp - (Double.MIN_EXPONENT - (DoubleConsts.SIGNIFICAND_WIDTH - 1))));\n                }\n            }\n        };\n    }\n\n    /**\n     * Returns the size of an ulp of the argument.  An ulp, unit in\n     * the last place, of a {@code float} value is the positive\n     * distance between this floating-point value and the {@code\n     * float} value next larger in magnitude.  Note that for non-NaN\n     * \u003ci\u003ex\u003c/i\u003e, \u003ccode\u003eulp(-\u003ci\u003ex\u003c/i\u003e) \u003d\u003d ulp(\u003ci\u003ex\u003c/i\u003e)\u003c/code\u003e.\n     *\n     * \u003cp\u003eSpecial Cases:\n     * \u003cul\u003e\n     * \u003cli\u003e If the argument is NaN, then the result is NaN.\n     * \u003cli\u003e If the argument is positive or negative infinity, then the\n     * result is positive infinity.\n     * \u003cli\u003e If the argument is positive or negative zero, then the result is\n     * {@code Float.MIN_VALUE}.\n     * \u003cli\u003e If the argument is \u0026plusmn;{@code Float.MAX_VALUE}, then\n     * the result is equal to 2\u003csup\u003e104\u003c/sup\u003e.\n     * \u003c/ul\u003e\n     *\n     * @param f the floating-point value whose ulp is to be returned\n     * @return the size of an ulp of the argument\n     * @author Joseph D. Darcy\n     * @since 1.5\n     */\n    public static float ulp(float f) {\n        int exp \u003d getExponent(f);\n\n        return switch(exp) {\n            case Float.MAX_EXPONENT + 1 -\u003e Math.abs(f);     // NaN or infinity\n            case Float.MIN_EXPONENT - 1 -\u003e Float.MIN_VALUE; // zero or subnormal\n            default -\u003e {\n                assert exp \u003c\u003d Float.MAX_EXPONENT \u0026\u0026 exp \u003e\u003d Float.MIN_EXPONENT;\n\n                // ulp(x) is usually 2^(SIGNIFICAND_WIDTH-1)*(2^ilogb(x))\n                exp \u003d exp - (FloatConsts.SIGNIFICAND_WIDTH - 1);\n                if (exp \u003e\u003d Float.MIN_EXPONENT) {\n                    yield powerOfTwoF(exp);\n                } else {\n                    // return a subnormal result; left shift integer\n                    // representation of FloatConsts.MIN_VALUE appropriate\n                    // number of positions\n                    yield Float.intBitsToFloat(1 \u003c\u003c\n                            (exp - (Float.MIN_EXPONENT - (FloatConsts.SIGNIFICAND_WIDTH - 1))));\n                }\n            }\n        };\n    }\n\n    /**\n     * Returns the signum function of the argument; zero if the argument\n     * is zero, 1.0 if the argument is greater than zero, -1.0 if the\n     * argument is less than zero.\n     *\n     * \u003cp\u003eSpecial Cases:\n     * \u003cul\u003e\n     * \u003cli\u003e If the argument is NaN, then the result is NaN.\n     * \u003cli\u003e If the argument is positive zero or negative zero, then the\n     *      result is the same as the argument.\n     * \u003c/ul\u003e\n     *\n     * @param d the floating-point value whose signum is to be returned\n     * @return the signum function of the argument\n     * @author Joseph D. Darcy\n     * @since 1.5\n     */\n    @IntrinsicCandidate\n    public static double signum(double d) {\n        return (d \u003d\u003d 0.0 || Double.isNaN(d))?d:copySign(1.0, d);\n    }\n\n    /**\n     * Returns the signum function of the argument; zero if the argument\n     * is zero, 1.0f if the argument is greater than zero, -1.0f if the\n     * argument is less than zero.\n     *\n     * \u003cp\u003eSpecial Cases:\n     * \u003cul\u003e\n     * \u003cli\u003e If the argument is NaN, then the result is NaN.\n     * \u003cli\u003e If the argument is positive zero or negative zero, then the\n     *      result is the same as the argument.\n     * \u003c/ul\u003e\n     *\n     * @param f the floating-point value whose signum is to be returned\n     * @return the signum function of the argument\n     * @author Joseph D. Darcy\n     * @since 1.5\n     */\n    @IntrinsicCandidate\n    public static float signum(float f) {\n        return (f \u003d\u003d 0.0f || Float.isNaN(f))?f:copySign(1.0f, f);\n    }\n\n    /**\n     * Returns the hyperbolic sine of a {@code double} value.\n     * The hyperbolic sine of \u003ci\u003ex\u003c/i\u003e is defined to be\n     * (\u003ci\u003ee\u003csup\u003ex\u003c/sup\u003e\u0026nbsp;-\u0026nbsp;e\u003csup\u003e-x\u003c/sup\u003e\u003c/i\u003e)/2\n     * where \u003ci\u003ee\u003c/i\u003e is {@linkplain Math#E Euler\u0027s number}.\n     *\n     * \u003cp\u003eSpecial cases:\n     * \u003cul\u003e\n     *\n     * \u003cli\u003eIf the argument is NaN, then the result is NaN.\n     *\n     * \u003cli\u003eIf the argument is infinite, then the result is an infinity\n     * with the same sign as the argument.\n     *\n     * \u003cli\u003eIf the argument is zero, then the result is a zero with the\n     * same sign as the argument.\n     *\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eThe computed result must be within 2.5 ulps of the exact result.\n     *\n     * @param   x The number whose hyperbolic sine is to be returned.\n     * @return  The hyperbolic sine of {@code x}.\n     * @since 1.5\n     */\n    public static double sinh(double x) {\n        return StrictMath.sinh(x);\n    }\n\n    /**\n     * Returns the hyperbolic cosine of a {@code double} value.\n     * The hyperbolic cosine of \u003ci\u003ex\u003c/i\u003e is defined to be\n     * (\u003ci\u003ee\u003csup\u003ex\u003c/sup\u003e\u0026nbsp;+\u0026nbsp;e\u003csup\u003e-x\u003c/sup\u003e\u003c/i\u003e)/2\n     * where \u003ci\u003ee\u003c/i\u003e is {@linkplain Math#E Euler\u0027s number}.\n     *\n     * \u003cp\u003eSpecial cases:\n     * \u003cul\u003e\n     *\n     * \u003cli\u003eIf the argument is NaN, then the result is NaN.\n     *\n     * \u003cli\u003eIf the argument is infinite, then the result is positive\n     * infinity.\n     *\n     * \u003cli\u003eIf the argument is zero, then the result is {@code 1.0}.\n     *\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eThe computed result must be within 2.5 ulps of the exact result.\n     *\n     * @param   x The number whose hyperbolic cosine is to be returned.\n     * @return  The hyperbolic cosine of {@code x}.\n     * @since 1.5\n     */\n    public static double cosh(double x) {\n        return StrictMath.cosh(x);\n    }\n\n    /**\n     * Returns the hyperbolic tangent of a {@code double} value.\n     * The hyperbolic tangent of \u003ci\u003ex\u003c/i\u003e is defined to be\n     * (\u003ci\u003ee\u003csup\u003ex\u003c/sup\u003e\u0026nbsp;-\u0026nbsp;e\u003csup\u003e-x\u003c/sup\u003e\u003c/i\u003e)/(\u003ci\u003ee\u003csup\u003ex\u003c/sup\u003e\u0026nbsp;+\u0026nbsp;e\u003csup\u003e-x\u003c/sup\u003e\u003c/i\u003e),\n     * in other words, {@linkplain Math#sinh\n     * sinh(\u003ci\u003ex\u003c/i\u003e)}/{@linkplain Math#cosh cosh(\u003ci\u003ex\u003c/i\u003e)}.  Note\n     * that the absolute value of the exact tanh is always less than\n     * 1.\n     *\n     * \u003cp\u003eSpecial cases:\n     * \u003cul\u003e\n     *\n     * \u003cli\u003eIf the argument is NaN, then the result is NaN.\n     *\n     * \u003cli\u003eIf the argument is zero, then the result is a zero with the\n     * same sign as the argument.\n     *\n     * \u003cli\u003eIf the argument is positive infinity, then the result is\n     * {@code +1.0}.\n     *\n     * \u003cli\u003eIf the argument is negative infinity, then the result is\n     * {@code -1.0}.\n     *\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eThe computed result must be within 2.5 ulps of the exact result.\n     * The result of {@code tanh} for any finite input must have\n     * an absolute value less than or equal to 1.  Note that once the\n     * exact result of tanh is within 1/2 of an ulp of the limit value\n     * of \u0026plusmn;1, correctly signed \u0026plusmn;{@code 1.0} should\n     * be returned.\n     *\n     * @param   x The number whose hyperbolic tangent is to be returned.\n     * @return  The hyperbolic tangent of {@code x}.\n     * @since 1.5\n     */\n    public static double tanh(double x) {\n        return StrictMath.tanh(x);\n    }\n\n    /**\n     * Returns sqrt(\u003ci\u003ex\u003c/i\u003e\u003csup\u003e2\u003c/sup\u003e\u0026nbsp;+\u003ci\u003ey\u003c/i\u003e\u003csup\u003e2\u003c/sup\u003e)\n     * without intermediate overflow or underflow.\n     *\n     * \u003cp\u003eSpecial cases:\n     * \u003cul\u003e\n     *\n     * \u003cli\u003e If either argument is infinite, then the result\n     * is positive infinity.\n     *\n     * \u003cli\u003e If either argument is NaN and neither argument is infinite,\n     * then the result is NaN.\n     *\n     * \u003cli\u003e If both arguments are zero, the result is positive zero.\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eThe computed result must be within 1 ulp of the exact\n     * result.  If one parameter is held constant, the results must be\n     * semi-monotonic in the other parameter.\n     *\n     * @param x a value\n     * @param y a value\n     * @return sqrt(\u003ci\u003ex\u003c/i\u003e\u003csup\u003e2\u003c/sup\u003e\u0026nbsp;+\u003ci\u003ey\u003c/i\u003e\u003csup\u003e2\u003c/sup\u003e)\n     * without intermediate overflow or underflow\n     * @since 1.5\n     */\n    public static double hypot(double x, double y) {\n        return StrictMath.hypot(x, y);\n    }\n\n    /**\n     * Returns \u003ci\u003ee\u003c/i\u003e\u003csup\u003ex\u003c/sup\u003e\u0026nbsp;-1.  Note that for values of\n     * \u003ci\u003ex\u003c/i\u003e near 0, the exact sum of\n     * {@code expm1(x)}\u0026nbsp;+\u0026nbsp;1 is much closer to the true\n     * result of \u003ci\u003ee\u003c/i\u003e\u003csup\u003ex\u003c/sup\u003e than {@code exp(x)}.\n     *\n     * \u003cp\u003eSpecial cases:\n     * \u003cul\u003e\n     * \u003cli\u003eIf the argument is NaN, the result is NaN.\n     *\n     * \u003cli\u003eIf the argument is positive infinity, then the result is\n     * positive infinity.\n     *\n     * \u003cli\u003eIf the argument is negative infinity, then the result is\n     * -1.0.\n     *\n     * \u003cli\u003eIf the argument is zero, then the result is a zero with the\n     * same sign as the argument.\n     *\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eThe computed result must be within 1 ulp of the exact result.\n     * Results must be semi-monotonic.  The result of\n     * {@code expm1} for any finite input must be greater than or\n     * equal to {@code -1.0}.  Note that once the exact result of\n     * \u003ci\u003ee\u003c/i\u003e\u003csup\u003e{@code x}\u003c/sup\u003e\u0026nbsp;-\u0026nbsp;1 is within 1/2\n     * ulp of the limit value -1, {@code -1.0} should be\n     * returned.\n     *\n     * @param   x   the exponent to raise \u003ci\u003ee\u003c/i\u003e to in the computation of\n     *              \u003ci\u003ee\u003c/i\u003e\u003csup\u003e{@code x}\u003c/sup\u003e\u0026nbsp;-1.\n     * @return  the value \u003ci\u003ee\u003c/i\u003e\u003csup\u003e{@code x}\u003c/sup\u003e\u0026nbsp;-\u0026nbsp;1.\n     * @since 1.5\n     */\n    public static double expm1(double x) {\n        return StrictMath.expm1(x);\n    }\n\n    /**\n     * Returns the natural logarithm of the sum of the argument and 1.\n     * Note that for small values {@code x}, the result of\n     * {@code log1p(x)} is much closer to the true result of ln(1\n     * + {@code x}) than the floating-point evaluation of\n     * {@code log(1.0+x)}.\n     *\n     * \u003cp\u003eSpecial cases:\n     *\n     * \u003cul\u003e\n     *\n     * \u003cli\u003eIf the argument is NaN or less than -1, then the result is\n     * NaN.\n     *\n     * \u003cli\u003eIf the argument is positive infinity, then the result is\n     * positive infinity.\n     *\n     * \u003cli\u003eIf the argument is negative one, then the result is\n     * negative infinity.\n     *\n     * \u003cli\u003eIf the argument is zero, then the result is a zero with the\n     * same sign as the argument.\n     *\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eThe computed result must be within 1 ulp of the exact result.\n     * Results must be semi-monotonic.\n     *\n     * @param   x   a value\n     * @return the value ln({@code x}\u0026nbsp;+\u0026nbsp;1), the natural\n     * log of {@code x}\u0026nbsp;+\u0026nbsp;1\n     * @since 1.5\n     */\n    public static double log1p(double x) {\n        return StrictMath.log1p(x);\n    }\n\n    /**\n     * Returns the first floating-point argument with the sign of the\n     * second floating-point argument.  Note that unlike the {@link\n     * StrictMath#copySign(double, double) StrictMath.copySign}\n     * method, this method does not require NaN {@code sign}\n     * arguments to be treated as positive values; implementations are\n     * permitted to treat some NaN arguments as positive and other NaN\n     * arguments as negative to allow greater performance.\n     *\n     * @apiNote\n     * This method corresponds to the copySign operation defined in\n     * IEEE 754.\n     *\n     * @param magnitude  the parameter providing the magnitude of the result\n     * @param sign   the parameter providing the sign of the result\n     * @return a value with the magnitude of {@code magnitude}\n     * and the sign of {@code sign}.\n     * @since 1.6\n     */\n    @IntrinsicCandidate\n    public static double copySign(double magnitude, double sign) {\n        return Double.longBitsToDouble((Double.doubleToRawLongBits(sign) \u0026\n                                        (DoubleConsts.SIGN_BIT_MASK)) |\n                                       (Double.doubleToRawLongBits(magnitude) \u0026\n                                        (DoubleConsts.EXP_BIT_MASK |\n                                         DoubleConsts.SIGNIF_BIT_MASK)));\n    }\n\n    /**\n     * Returns the first floating-point argument with the sign of the\n     * second floating-point argument.  Note that unlike the {@link\n     * StrictMath#copySign(float, float) StrictMath.copySign}\n     * method, this method does not require NaN {@code sign}\n     * arguments to be treated as positive values; implementations are\n     * permitted to treat some NaN arguments as positive and other NaN\n     * arguments as negative to allow greater performance.\n     *\n     * @apiNote\n     * This method corresponds to the copySign operation defined in\n     * IEEE 754.\n     *\n     * @param magnitude  the parameter providing the magnitude of the result\n     * @param sign   the parameter providing the sign of the result\n     * @return a value with the magnitude of {@code magnitude}\n     * and the sign of {@code sign}.\n     * @since 1.6\n     */\n    @IntrinsicCandidate\n    public static float copySign(float magnitude, float sign) {\n        return Float.intBitsToFloat((Float.floatToRawIntBits(sign) \u0026\n                                     (FloatConsts.SIGN_BIT_MASK)) |\n                                    (Float.floatToRawIntBits(magnitude) \u0026\n                                     (FloatConsts.EXP_BIT_MASK |\n                                      FloatConsts.SIGNIF_BIT_MASK)));\n    }\n\n    /**\n     * Returns the unbiased exponent used in the representation of a\n     * {@code float}.  Special cases:\n     *\n     * \u003cul\u003e\n     * \u003cli\u003eIf the argument is NaN or infinite, then the result is\n     * {@link Float#MAX_EXPONENT} + 1.\n     * \u003cli\u003eIf the argument is zero or subnormal, then the result is\n     * {@link Float#MIN_EXPONENT} - 1.\n     * \u003c/ul\u003e\n     * @apiNote\n     * This method is analogous to the logB operation defined in IEEE\n     * 754, but returns a different value on subnormal arguments.\n     *\n     * @param f a {@code float} value\n     * @return the unbiased exponent of the argument\n     * @since 1.6\n     */\n    public static int getExponent(float f) {\n        /*\n         * Bitwise convert f to integer, mask out exponent bits, shift\n         * to the right and then subtract out float\u0027s bias adjust to\n         * get true exponent value\n         */\n        return ((Float.floatToRawIntBits(f) \u0026 FloatConsts.EXP_BIT_MASK) \u003e\u003e\n                (FloatConsts.SIGNIFICAND_WIDTH - 1)) - FloatConsts.EXP_BIAS;\n    }\n\n    /**\n     * Returns the unbiased exponent used in the representation of a\n     * {@code double}.  Special cases:\n     *\n     * \u003cul\u003e\n     * \u003cli\u003eIf the argument is NaN or infinite, then the result is\n     * {@link Double#MAX_EXPONENT} + 1.\n     * \u003cli\u003eIf the argument is zero or subnormal, then the result is\n     * {@link Double#MIN_EXPONENT} - 1.\n     * \u003c/ul\u003e\n     * @apiNote\n     * This method is analogous to the logB operation defined in IEEE\n     * 754, but returns a different value on subnormal arguments.\n     *\n     * @param d a {@code double} value\n     * @return the unbiased exponent of the argument\n     * @since 1.6\n     */\n    public static int getExponent(double d) {\n        /*\n         * Bitwise convert d to long, mask out exponent bits, shift\n         * to the right and then subtract out double\u0027s bias adjust to\n         * get true exponent value.\n         */\n        return (int)(((Double.doubleToRawLongBits(d) \u0026 DoubleConsts.EXP_BIT_MASK) \u003e\u003e\n                      (DoubleConsts.SIGNIFICAND_WIDTH - 1)) - DoubleConsts.EXP_BIAS);\n    }\n\n    /**\n     * Returns the floating-point number adjacent to the first\n     * argument in the direction of the second argument.  If both\n     * arguments compare as equal the second argument is returned.\n     *\n     * \u003cp\u003e\n     * Special cases:\n     * \u003cul\u003e\n     * \u003cli\u003e If either argument is a NaN, then NaN is returned.\n     *\n     * \u003cli\u003e If both arguments are signed zeros, {@code direction}\n     * is returned unchanged (as implied by the requirement of\n     * returning the second argument if the arguments compare as\n     * equal).\n     *\n     * \u003cli\u003e If {@code start} is\n     * \u0026plusmn;{@link Double#MIN_VALUE} and {@code direction}\n     * has a value such that the result should have a smaller\n     * magnitude, then a zero with the same sign as {@code start}\n     * is returned.\n     *\n     * \u003cli\u003e If {@code start} is infinite and\n     * {@code direction} has a value such that the result should\n     * have a smaller magnitude, {@link Double#MAX_VALUE} with the\n     * same sign as {@code start} is returned.\n     *\n     * \u003cli\u003e If {@code start} is equal to \u0026plusmn;\n     * {@link Double#MAX_VALUE} and {@code direction} has a\n     * value such that the result should have a larger magnitude, an\n     * infinity with same sign as {@code start} is returned.\n     * \u003c/ul\u003e\n     *\n     * @param start  starting floating-point value\n     * @param direction value indicating which of\n     * {@code start}\u0027s neighbors or {@code start} should\n     * be returned\n     * @return The floating-point number adjacent to {@code start} in the\n     * direction of {@code direction}.\n     * @since 1.6\n     */\n    public static double nextAfter(double start, double direction) {\n        /*\n         * The cases:\n         *\n         * nextAfter(+infinity, 0)  \u003d\u003d MAX_VALUE\n         * nextAfter(+infinity, +infinity)  \u003d\u003d +infinity\n         * nextAfter(-infinity, 0)  \u003d\u003d -MAX_VALUE\n         * nextAfter(-infinity, -infinity)  \u003d\u003d -infinity\n         *\n         * are naturally handled without any additional testing\n         */\n\n        /*\n         * IEEE 754 floating-point numbers are lexicographically\n         * ordered if treated as signed-magnitude integers.\n         * Since Java\u0027s integers are two\u0027s complement,\n         * incrementing the two\u0027s complement representation of a\n         * logically negative floating-point value *decrements*\n         * the signed-magnitude representation. Therefore, when\n         * the integer representation of a floating-point value\n         * is negative, the adjustment to the representation is in\n         * the opposite direction from what would initially be expected.\n         */\n\n        // Branch to descending case first as it is more costly than ascending\n        // case due to start !\u003d 0.0d conditional.\n        if (start \u003e direction) { // descending\n            if (start !\u003d 0.0d) {\n                final long transducer \u003d Double.doubleToRawLongBits(start);\n                return Double.longBitsToDouble(transducer + ((transducer \u003e 0L) ? -1L : 1L));\n            } else { // start \u003d\u003d 0.0d \u0026\u0026 direction \u003c 0.0d\n                return -Double.MIN_VALUE;\n            }\n        } else if (start \u003c direction) { // ascending\n            // Add +0.0 to get rid of a -0.0 (+0.0 + -0.0 \u003d\u003e +0.0)\n            // then bitwise convert start to integer.\n            final long transducer \u003d Double.doubleToRawLongBits(start + 0.0d);\n            return Double.longBitsToDouble(transducer + ((transducer \u003e\u003d 0L) ? 1L : -1L));\n        } else if (start \u003d\u003d direction) {\n            return direction;\n        } else { // isNaN(start) || isNaN(direction)\n            return start + direction;\n        }\n    }\n\n    /**\n     * Returns the floating-point number adjacent to the first\n     * argument in the direction of the second argument.  If both\n     * arguments compare as equal a value equivalent to the second argument\n     * is returned.\n     *\n     * \u003cp\u003e\n     * Special cases:\n     * \u003cul\u003e\n     * \u003cli\u003e If either argument is a NaN, then NaN is returned.\n     *\n     * \u003cli\u003e If both arguments are signed zeros, a value equivalent\n     * to {@code direction} is returned.\n     *\n     * \u003cli\u003e If {@code start} is\n     * \u0026plusmn;{@link Float#MIN_VALUE} and {@code direction}\n     * has a value such that the result should have a smaller\n     * magnitude, then a zero with the same sign as {@code start}\n     * is returned.\n     *\n     * \u003cli\u003e If {@code start} is infinite and\n     * {@code direction} has a value such that the result should\n     * have a smaller magnitude, {@link Float#MAX_VALUE} with the\n     * same sign as {@code start} is returned.\n     *\n     * \u003cli\u003e If {@code start} is equal to \u0026plusmn;\n     * {@link Float#MAX_VALUE} and {@code direction} has a\n     * value such that the result should have a larger magnitude, an\n     * infinity with same sign as {@code start} is returned.\n     * \u003c/ul\u003e\n     *\n     * @param start  starting floating-point value\n     * @param direction value indicating which of\n     * {@code start}\u0027s neighbors or {@code start} should\n     * be returned\n     * @return The floating-point number adjacent to {@code start} in the\n     * direction of {@code direction}.\n     * @since 1.6\n     */\n    public static float nextAfter(float start, double direction) {\n        /*\n         * The cases:\n         *\n         * nextAfter(+infinity, 0)  \u003d\u003d MAX_VALUE\n         * nextAfter(+infinity, +infinity)  \u003d\u003d +infinity\n         * nextAfter(-infinity, 0)  \u003d\u003d -MAX_VALUE\n         * nextAfter(-infinity, -infinity)  \u003d\u003d -infinity\n         *\n         * are naturally handled without any additional testing\n         */\n\n        /*\n         * IEEE 754 floating-point numbers are lexicographically\n         * ordered if treated as signed-magnitude integers.\n         * Since Java\u0027s integers are two\u0027s complement,\n         * incrementing the two\u0027s complement representation of a\n         * logically negative floating-point value *decrements*\n         * the signed-magnitude representation. Therefore, when\n         * the integer representation of a floating-point value\n         * is negative, the adjustment to the representation is in\n         * the opposite direction from what would initially be expected.\n         */\n\n        // Branch to descending case first as it is more costly than ascending\n        // case due to start !\u003d 0.0f conditional.\n        if (start \u003e direction) { // descending\n            if (start !\u003d 0.0f) {\n                final int transducer \u003d Float.floatToRawIntBits(start);\n                return Float.intBitsToFloat(transducer + ((transducer \u003e 0) ? -1 : 1));\n            } else { // start \u003d\u003d 0.0f \u0026\u0026 direction \u003c 0.0f\n                return -Float.MIN_VALUE;\n            }\n        } else if (start \u003c direction) { // ascending\n            // Add +0.0 to get rid of a -0.0 (+0.0 + -0.0 \u003d\u003e +0.0)\n            // then bitwise convert start to integer.\n            final int transducer \u003d Float.floatToRawIntBits(start + 0.0f);\n            return Float.intBitsToFloat(transducer + ((transducer \u003e\u003d 0) ? 1 : -1));\n        } else if (start \u003d\u003d direction) {\n            return (float)direction;\n        } else { // isNaN(start) || isNaN(direction)\n            return start + (float)direction;\n        }\n    }\n\n    /**\n     * Returns the floating-point value adjacent to {@code d} in\n     * the direction of positive infinity.  This method is\n     * semantically equivalent to {@code nextAfter(d,\n     * Double.POSITIVE_INFINITY)}; however, a {@code nextUp}\n     * implementation may run faster than its equivalent\n     * {@code nextAfter} call.\n     *\n     * \u003cp\u003eSpecial Cases:\n     * \u003cul\u003e\n     * \u003cli\u003e If the argument is NaN, the result is NaN.\n     *\n     * \u003cli\u003e If the argument is positive infinity, the result is\n     * positive infinity.\n     *\n     * \u003cli\u003e If the argument is zero, the result is\n     * {@link Double#MIN_VALUE}\n     *\n     * \u003c/ul\u003e\n     *\n     * @apiNote This method corresponds to the nextUp\n     * operation defined in IEEE 754.\n     *\n     * @param d starting floating-point value\n     * @return The adjacent floating-point value closer to positive\n     * infinity.\n     * @since 1.6\n     */\n    public static double nextUp(double d) {\n        // Use a single conditional and handle the likely cases first.\n        if (d \u003c Double.POSITIVE_INFINITY) {\n            // Add +0.0 to get rid of a -0.0 (+0.0 + -0.0 \u003d\u003e +0.0).\n            final long transducer \u003d Double.doubleToRawLongBits(d + 0.0D);\n            return Double.longBitsToDouble(transducer + ((transducer \u003e\u003d 0L) ? 1L : -1L));\n        } else { // d is NaN or +Infinity\n            return d;\n        }\n    }\n\n    /**\n     * Returns the floating-point value adjacent to {@code f} in\n     * the direction of positive infinity.  This method is\n     * semantically equivalent to {@code nextAfter(f,\n     * Float.POSITIVE_INFINITY)}; however, a {@code nextUp}\n     * implementation may run faster than its equivalent\n     * {@code nextAfter} call.\n     *\n     * \u003cp\u003eSpecial Cases:\n     * \u003cul\u003e\n     * \u003cli\u003e If the argument is NaN, the result is NaN.\n     *\n     * \u003cli\u003e If the argument is positive infinity, the result is\n     * positive infinity.\n     *\n     * \u003cli\u003e If the argument is zero, the result is\n     * {@link Float#MIN_VALUE}\n     *\n     * \u003c/ul\u003e\n     *\n     * @apiNote This method corresponds to the nextUp\n     * operation defined in IEEE 754.\n     *\n     * @param f starting floating-point value\n     * @return The adjacent floating-point value closer to positive\n     * infinity.\n     * @since 1.6\n     */\n    public static float nextUp(float f) {\n        // Use a single conditional and handle the likely cases first.\n        if (f \u003c Float.POSITIVE_INFINITY) {\n            // Add +0.0 to get rid of a -0.0 (+0.0 + -0.0 \u003d\u003e +0.0).\n            final int transducer \u003d Float.floatToRawIntBits(f + 0.0F);\n            return Float.intBitsToFloat(transducer + ((transducer \u003e\u003d 0) ? 1 : -1));\n        } else { // f is NaN or +Infinity\n            return f;\n        }\n    }\n\n    /**\n     * Returns the floating-point value adjacent to {@code d} in\n     * the direction of negative infinity.  This method is\n     * semantically equivalent to {@code nextAfter(d,\n     * Double.NEGATIVE_INFINITY)}; however, a\n     * {@code nextDown} implementation may run faster than its\n     * equivalent {@code nextAfter} call.\n     *\n     * \u003cp\u003eSpecial Cases:\n     * \u003cul\u003e\n     * \u003cli\u003e If the argument is NaN, the result is NaN.\n     *\n     * \u003cli\u003e If the argument is negative infinity, the result is\n     * negative infinity.\n     *\n     * \u003cli\u003e If the argument is zero, the result is\n     * {@code -Double.MIN_VALUE}\n     *\n     * \u003c/ul\u003e\n     *\n     * @apiNote This method corresponds to the nextDown\n     * operation defined in IEEE 754.\n     *\n     * @param d  starting floating-point value\n     * @return The adjacent floating-point value closer to negative\n     * infinity.\n     * @since 1.8\n     */\n    public static double nextDown(double d) {\n        if (Double.isNaN(d) || d \u003d\u003d Double.NEGATIVE_INFINITY)\n            return d;\n        else {\n            if (d \u003d\u003d 0.0)\n                return -Double.MIN_VALUE;\n            else\n                return Double.longBitsToDouble(Double.doubleToRawLongBits(d) +\n                                               ((d \u003e 0.0d)?-1L:+1L));\n        }\n    }\n\n    /**\n     * Returns the floating-point value adjacent to {@code f} in\n     * the direction of negative infinity.  This method is\n     * semantically equivalent to {@code nextAfter(f,\n     * Float.NEGATIVE_INFINITY)}; however, a\n     * {@code nextDown} implementation may run faster than its\n     * equivalent {@code nextAfter} call.\n     *\n     * \u003cp\u003eSpecial Cases:\n     * \u003cul\u003e\n     * \u003cli\u003e If the argument is NaN, the result is NaN.\n     *\n     * \u003cli\u003e If the argument is negative infinity, the result is\n     * negative infinity.\n     *\n     * \u003cli\u003e If the argument is zero, the result is\n     * {@code -Float.MIN_VALUE}\n     *\n     * \u003c/ul\u003e\n     *\n     * @apiNote This method corresponds to the nextDown\n     * operation defined in IEEE 754.\n     *\n     * @param f  starting floating-point value\n     * @return The adjacent floating-point value closer to negative\n     * infinity.\n     * @since 1.8\n     */\n    public static float nextDown(float f) {\n        if (Float.isNaN(f) || f \u003d\u003d Float.NEGATIVE_INFINITY)\n            return f;\n        else {\n            if (f \u003d\u003d 0.0f)\n                return -Float.MIN_VALUE;\n            else\n                return Float.intBitsToFloat(Float.floatToRawIntBits(f) +\n                                            ((f \u003e 0.0f)?-1:+1));\n        }\n    }\n\n    /**\n     * Returns {@code d} \u0026times; 2\u003csup\u003e{@code scaleFactor}\u003c/sup\u003e\n     * rounded as if performed by a single correctly rounded\n     * floating-point multiply.  If the exponent of the result is\n     * between {@link Double#MIN_EXPONENT} and {@link\n     * Double#MAX_EXPONENT}, the answer is calculated exactly.  If the\n     * exponent of the result would be larger than {@code\n     * Double.MAX_EXPONENT}, an infinity is returned.  Note that if\n     * the result is subnormal, precision may be lost; that is, when\n     * {@code scalb(x, n)} is subnormal, {@code scalb(scalb(x, n),\n     * -n)} may not equal \u003ci\u003ex\u003c/i\u003e.  When the result is non-NaN, the\n     * result has the same sign as {@code d}.\n     *\n     * \u003cp\u003eSpecial cases:\n     * \u003cul\u003e\n     * \u003cli\u003e If the first argument is NaN, NaN is returned.\n     * \u003cli\u003e If the first argument is infinite, then an infinity of the\n     * same sign is returned.\n     * \u003cli\u003e If the first argument is zero, then a zero of the same\n     * sign is returned.\n     * \u003c/ul\u003e\n     *\n     * @apiNote This method corresponds to the scaleB operation\n     * defined in IEEE 754.\n     *\n     * @param d number to be scaled by a power of two.\n     * @param scaleFactor power of 2 used to scale {@code d}\n     * @return {@code d} \u0026times; 2\u003csup\u003e{@code scaleFactor}\u003c/sup\u003e\n     * @since 1.6\n     */\n    public static double scalb(double d, int scaleFactor) {\n        /*\n         * When scaling up, it does not matter what order the\n         * multiply-store operations are done; the result will be\n         * finite or overflow regardless of the operation ordering.\n         * However, to get the correct result when scaling down, a\n         * particular ordering must be used.\n         *\n         * When scaling down, the multiply-store operations are\n         * sequenced so that it is not possible for two consecutive\n         * multiply-stores to return subnormal results.  If one\n         * multiply-store result is subnormal, the next multiply will\n         * round it away to zero.  This is done by first multiplying\n         * by 2 ^ (scaleFactor % n) and then multiplying several\n         * times by 2^n as needed where n is the exponent of number\n         * that is a convenient power of two.  In this way, at most one\n         * real rounding error occurs.\n         */\n\n        // magnitude of a power of two so large that scaling a finite\n        // nonzero value by it would be guaranteed to over or\n        // underflow; due to rounding, scaling down takes an\n        // additional power of two which is reflected here\n        final int MAX_SCALE \u003d Double.MAX_EXPONENT + -Double.MIN_EXPONENT +\n                              DoubleConsts.SIGNIFICAND_WIDTH + 1;\n        int exp_adjust \u003d 0;\n        int scale_increment \u003d 0;\n        double exp_delta \u003d Double.NaN;\n\n        // Make sure scaling factor is in a reasonable range\n\n        if(scaleFactor \u003c 0) {\n            scaleFactor \u003d Math.max(scaleFactor, -MAX_SCALE);\n            scale_increment \u003d -512;\n            exp_delta \u003d twoToTheDoubleScaleDown;\n        }\n        else {\n            scaleFactor \u003d Math.min(scaleFactor, MAX_SCALE);\n            scale_increment \u003d 512;\n            exp_delta \u003d twoToTheDoubleScaleUp;\n        }\n\n        // Calculate (scaleFactor % +/-512), 512 \u003d 2^9, using\n        // technique from \"Hacker\u0027s Delight\" section 10-2.\n        int t \u003d (scaleFactor \u003e\u003e 9-1) \u003e\u003e\u003e 32 - 9;\n        exp_adjust \u003d ((scaleFactor + t) \u0026 (512 -1)) - t;\n\n        d *\u003d powerOfTwoD(exp_adjust);\n        scaleFactor -\u003d exp_adjust;\n\n        while(scaleFactor !\u003d 0) {\n            d *\u003d exp_delta;\n            scaleFactor -\u003d scale_increment;\n        }\n        return d;\n    }\n\n    /**\n     * Returns {@code f} \u0026times; 2\u003csup\u003e{@code scaleFactor}\u003c/sup\u003e\n     * rounded as if performed by a single correctly rounded\n     * floating-point multiply.  If the exponent of the result is\n     * between {@link Float#MIN_EXPONENT} and {@link\n     * Float#MAX_EXPONENT}, the answer is calculated exactly.  If the\n     * exponent of the result would be larger than {@code\n     * Float.MAX_EXPONENT}, an infinity is returned.  Note that if the\n     * result is subnormal, precision may be lost; that is, when\n     * {@code scalb(x, n)} is subnormal, {@code scalb(scalb(x, n),\n     * -n)} may not equal \u003ci\u003ex\u003c/i\u003e.  When the result is non-NaN, the\n     * result has the same sign as {@code f}.\n     *\n     * \u003cp\u003eSpecial cases:\n     * \u003cul\u003e\n     * \u003cli\u003e If the first argument is NaN, NaN is returned.\n     * \u003cli\u003e If the first argument is infinite, then an infinity of the\n     * same sign is returned.\n     * \u003cli\u003e If the first argument is zero, then a zero of the same\n     * sign is returned.\n     * \u003c/ul\u003e\n     *\n     * @apiNote This method corresponds to the scaleB operation\n     * defined in IEEE 754.\n     *\n     * @param f number to be scaled by a power of two.\n     * @param scaleFactor power of 2 used to scale {@code f}\n     * @return {@code f} \u0026times; 2\u003csup\u003e{@code scaleFactor}\u003c/sup\u003e\n     * @since 1.6\n     */\n    public static float scalb(float f, int scaleFactor) {\n        // magnitude of a power of two so large that scaling a finite\n        // nonzero value by it would be guaranteed to over or\n        // underflow; due to rounding, scaling down takes an\n        // additional power of two which is reflected here\n        final int MAX_SCALE \u003d Float.MAX_EXPONENT + -Float.MIN_EXPONENT +\n                              FloatConsts.SIGNIFICAND_WIDTH + 1;\n\n        // Make sure scaling factor is in a reasonable range\n        scaleFactor \u003d Math.max(Math.min(scaleFactor, MAX_SCALE), -MAX_SCALE);\n\n        /*\n         * Since + MAX_SCALE for float fits well within the double\n         * exponent range and + float -\u003e double conversion is exact\n         * the multiplication below will be exact. Therefore, the\n         * rounding that occurs when the double product is cast to\n         * float will be the correctly rounded float result.\n         */\n        return (float)((double)f*powerOfTwoD(scaleFactor));\n    }\n\n    // Constants used in scalb\n    static double twoToTheDoubleScaleUp \u003d powerOfTwoD(512);\n    static double twoToTheDoubleScaleDown \u003d powerOfTwoD(-512);\n\n    /**\n     * Returns a floating-point power of two in the normal range.\n     */\n    static double powerOfTwoD(int n) {\n        assert(n \u003e\u003d Double.MIN_EXPONENT \u0026\u0026 n \u003c\u003d Double.MAX_EXPONENT);\n        return Double.longBitsToDouble((((long)n + (long)DoubleConsts.EXP_BIAS) \u003c\u003c\n                                        (DoubleConsts.SIGNIFICAND_WIDTH-1))\n                                       \u0026 DoubleConsts.EXP_BIT_MASK);\n    }\n\n    /**\n     * Returns a floating-point power of two in the normal range.\n     */\n    static float powerOfTwoF(int n) {\n        assert(n \u003e\u003d Float.MIN_EXPONENT \u0026\u0026 n \u003c\u003d Float.MAX_EXPONENT);\n        return Float.intBitsToFloat(((n + FloatConsts.EXP_BIAS) \u003c\u003c\n                                     (FloatConsts.SIGNIFICAND_WIDTH-1))\n                                    \u0026 FloatConsts.EXP_BIT_MASK);\n    }\n}\n"
    }
  }
}
java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-20/lib/src.zip!/java.base/java/lang/Math.java
	at java.base/java.net.URI.create(URI.java:911)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:178)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:175)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:175)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:756)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:753)
	at scala.meta.internal.metals.WorkspaceLspService.didOpen(WorkspaceLspService.scala:389)
	at scala.meta.metals.lsp.DelegatingScalaService.didOpen(DelegatingScalaService.scala:39)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$recursiveFindRpcMethods$0(GenericEndpoint.java:65)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:160)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:231)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:198)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:185)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:97)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:114)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:577)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1623)
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-20/lib/src.zip!/java.base/java/lang/Math.java
	at java.base/java.net.URI$Parser.fail(URI.java:2963)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3134)
	at java.base/java.net.URI$Parser.parse(URI.java:3170)
	at java.base/java.net.URI.<init>(URI.java:628)
	at java.base/java.net.URI.create(URI.java:909)
	... 22 more

Jul 30, 2024 3:57:40 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didClose",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-20/lib/src.zip%21/java.base/java/lang/Math.java"
    }
  }
}
java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-20/lib/src.zip!/java.base/java/lang/Math.java
	at java.base/java.net.URI.create(URI.java:911)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:178)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:175)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:175)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:756)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:753)
	at scala.meta.internal.metals.WorkspaceLspService.didClose(WorkspaceLspService.scala:408)
	at scala.meta.metals.lsp.DelegatingScalaService.didClose(DelegatingScalaService.scala:53)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$recursiveFindRpcMethods$0(GenericEndpoint.java:65)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:160)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:231)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:198)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:185)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:97)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:114)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:577)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1623)
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-20/lib/src.zip!/java.base/java/lang/Math.java
	at java.base/java.net.URI$Parser.fail(URI.java:2963)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3134)
	at java.base/java.net.URI$Parser.parse(URI.java:3170)
	at java.base/java.net.URI.<init>(URI.java:628)
	at java.base/java.net.URI.create(URI.java:909)
	... 22 more

2024.07.30 03:57:40 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-20/lib/src.zip!/java.base/java/lang/Math.java

Uri: jar:file:///C:/Program Files/Java/jdk-20/lib/src.zip!/java.base/java/lang/Math.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:911)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:178)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:756)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:753)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:739)
	scala.meta.internal.metals.WorkspaceLspService.getServiceForOpt(WorkspaceLspService.scala:306)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:315)
	scala.meta.internal.metals.WorkspaceLspService.executeCommand(WorkspaceLspService.scala:781)
	scala.meta.metals.lsp.DelegatingScalaService.executeCommand(DelegatingScalaService.scala:169)
	java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	java.base/java.lang.reflect.Method.invoke(Method.java:578)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$recursiveFindRpcMethods$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:128)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:271)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:201)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:185)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:97)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:114)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:577)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	java.base/java.lang.Thread.run(Thread.java:1623)
```

Jul 30, 2024 3:57:40 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-20/lib/src.zip%21/java.base/java/lang/Math.java",
      "languageId": "java",
      "version": 1,
      "text": "/*\n * Copyright (c) 1994, 2022, Oracle and/or its affiliates. All rights reserved.\n * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n */\n\npackage java.lang;\n\nimport java.math.BigDecimal;\nimport java.util.Random;\nimport jdk.internal.math.FloatConsts;\nimport jdk.internal.math.DoubleConsts;\nimport jdk.internal.vm.annotation.IntrinsicCandidate;\n\n/**\n * The class {@code Math} contains methods for performing basic\n * numeric operations such as the elementary exponential, logarithm,\n * square root, and trigonometric functions.\n *\n * \u003cp\u003eUnlike some of the numeric methods of class\n * {@link java.lang.StrictMath StrictMath}, all implementations of the equivalent\n * functions of class {@code Math} are not defined to return the\n * bit-for-bit same results.  This relaxation permits\n * better-performing implementations where strict reproducibility is\n * not required.\n *\n * \u003cp\u003eBy default many of the {@code Math} methods simply call\n * the equivalent method in {@code StrictMath} for their\n * implementation.  Code generators are encouraged to use\n * platform-specific native libraries or microprocessor instructions,\n * where available, to provide higher-performance implementations of\n * {@code Math} methods.  Such higher-performance\n * implementations still must conform to the specification for\n * {@code Math}.\n *\n * \u003cp\u003eThe quality of implementation specifications concern two\n * properties, accuracy of the returned result and monotonicity of the\n * method.  Accuracy of the floating-point {@code Math} methods is\n * measured in terms of \u003ci\u003eulps\u003c/i\u003e, units in the last place.  For a\n * given floating-point format, an {@linkplain #ulp(double) ulp} of a\n * specific real number value is the distance between the two\n * floating-point values bracketing that numerical value.  When\n * discussing the accuracy of a method as a whole rather than at a\n * specific argument, the number of ulps cited is for the worst-case\n * error at any argument.  If a method always has an error less than\n * 0.5 ulps, the method always returns the floating-point number\n * nearest the exact result; such a method is \u003ci\u003ecorrectly\n * rounded\u003c/i\u003e.  A correctly rounded method is generally the best a\n * floating-point approximation can be; however, it is impractical for\n * many floating-point methods to be correctly rounded.  Instead, for\n * the {@code Math} class, a larger error bound of 1 or 2 ulps is\n * allowed for certain methods.  Informally, with a 1 ulp error bound,\n * when the exact result is a representable number, the exact result\n * should be returned as the computed result; otherwise, either of the\n * two floating-point values which bracket the exact result may be\n * returned.  For exact results large in magnitude, one of the\n * endpoints of the bracket may be infinite.  Besides accuracy at\n * individual arguments, maintaining proper relations between the\n * method at different arguments is also important.  Therefore, most\n * methods with more than 0.5 ulp errors are required to be\n * \u003ci\u003esemi-monotonic\u003c/i\u003e: whenever the mathematical function is\n * non-decreasing, so is the floating-point approximation, likewise,\n * whenever the mathematical function is non-increasing, so is the\n * floating-point approximation.  Not all approximations that have 1\n * ulp accuracy will automatically meet the monotonicity requirements.\n *\n * \u003cp\u003e\n * The platform uses signed two\u0027s complement integer arithmetic with\n * int and long primitive types.  The developer should choose\n * the primitive type to ensure that arithmetic operations consistently\n * produce correct results, which in some cases means the operations\n * will not overflow the range of values of the computation.\n * The best practice is to choose the primitive type and algorithm to avoid\n * overflow. In cases where the size is {@code int} or {@code long} and\n * overflow errors need to be detected, the methods whose names end with\n * {@code Exact} throw an {@code ArithmeticException} when the results overflow.\n *\n * \u003ch2\u003e\u003ca id\u003dIeee754RecommendedOps\u003eIEEE 754 Recommended\n * Operations\u003c/a\u003e\u003c/h2\u003e\n *\n * The 2019 revision of the IEEE 754 floating-point standard includes\n * a section of recommended operations and the semantics of those\n * operations if they are included in a programming environment. The\n * recommended operations present in this class include {@link sin\n * sin}, {@link cos cos}, {@link tan tan}, {@link asin asin}, {@link\n * acos acos}, {@link atan atan}, {@link exp exp}, {@link expm1\n * expm1}, {@link log log}, {@link log10 log10}, {@link log1p log1p},\n * {@link sinh sinh}, {@link cosh cosh}, {@link tanh tanh}, {@link\n * hypot hypot}, and {@link pow pow}.  (The {@link sqrt sqrt}\n * operation is a required part of IEEE 754 from a different section\n * of the standard.) The special case behavior of the recommended\n * operations generally follows the guidance of the IEEE 754\n * standard. However, the {@code pow} method defines different\n * behavior for some arguments, as noted in its {@linkplain pow\n * specification}. The IEEE 754 standard defines its operations to be\n * correctly rounded, which is a more stringent quality of\n * implementation condition than required for most of the methods in\n * question that are also included in this class.\n *\n * @see \u003ca href\u003d\"https://standards.ieee.org/ieee/754/6210/\"\u003e\n *      \u003ccite\u003eIEEE Standard for Floating-Point Arithmetic\u003c/cite\u003e\u003c/a\u003e\n *\n * @author  Joseph D. Darcy\n * @since   1.0\n */\n\npublic final class Math {\n\n    /**\n     * Don\u0027t let anyone instantiate this class.\n     */\n    private Math() {}\n\n    /**\n     * The {@code double} value that is closer than any other to\n     * \u003ci\u003ee\u003c/i\u003e, the base of the natural logarithms.\n     */\n    public static final double E \u003d 2.718281828459045;\n\n    /**\n     * The {@code double} value that is closer than any other to\n     * \u003ci\u003epi\u003c/i\u003e (\u0026pi;), the ratio of the circumference of a circle to\n     * its diameter.\n     */\n    public static final double PI \u003d 3.141592653589793;\n\n    /**\n     * The {@code double} value that is closer than any other to\n     * \u003ci\u003etau\u003c/i\u003e (\u0026tau;), the ratio of the circumference of a circle\n     * to its radius.\n     *\n     * @apiNote\n     * The value of \u003ci\u003epi\u003c/i\u003e is one half that of \u003ci\u003etau\u003c/i\u003e; in other\n     * words, \u003ci\u003etau\u003c/i\u003e is double \u003ci\u003epi\u003c/i\u003e .\n     *\n     * @since 19\n     */\n    public static final double TAU \u003d 2.0 * PI;\n\n    /**\n     * Constant by which to multiply an angular value in degrees to obtain an\n     * angular value in radians.\n     */\n    private static final double DEGREES_TO_RADIANS \u003d 0.017453292519943295;\n\n    /**\n     * Constant by which to multiply an angular value in radians to obtain an\n     * angular value in degrees.\n     */\n    private static final double RADIANS_TO_DEGREES \u003d 57.29577951308232;\n\n    /**\n     * Returns the trigonometric sine of an angle.  Special cases:\n     * \u003cul\u003e\u003cli\u003eIf the argument is NaN or an infinity, then the\n     * result is NaN.\n     * \u003cli\u003eIf the argument is zero, then the result is a zero with the\n     * same sign as the argument.\u003c/ul\u003e\n     *\n     * \u003cp\u003eThe computed result must be within 1 ulp of the exact result.\n     * Results must be semi-monotonic.\n     *\n     * @param   a   an angle, in radians.\n     * @return  the sine of the argument.\n     */\n    @IntrinsicCandidate\n    public static double sin(double a) {\n        return StrictMath.sin(a); // default impl. delegates to StrictMath\n    }\n\n    /**\n     * Returns the trigonometric cosine of an angle. Special cases:\n     * \u003cul\u003e\u003cli\u003eIf the argument is NaN or an infinity, then the\n     * result is NaN.\n     * \u003cli\u003eIf the argument is zero, then the result is {@code 1.0}.\n     *\u003c/ul\u003e\n     *\n     * \u003cp\u003eThe computed result must be within 1 ulp of the exact result.\n     * Results must be semi-monotonic.\n     *\n     * @param   a   an angle, in radians.\n     * @return  the cosine of the argument.\n     */\n    @IntrinsicCandidate\n    public static double cos(double a) {\n        return StrictMath.cos(a); // default impl. delegates to StrictMath\n    }\n\n    /**\n     * Returns the trigonometric tangent of an angle.  Special cases:\n     * \u003cul\u003e\u003cli\u003eIf the argument is NaN or an infinity, then the result\n     * is NaN.\n     * \u003cli\u003eIf the argument is zero, then the result is a zero with the\n     * same sign as the argument.\u003c/ul\u003e\n     *\n     * \u003cp\u003eThe computed result must be within 1 ulp of the exact result.\n     * Results must be semi-monotonic.\n     *\n     * @param   a   an angle, in radians.\n     * @return  the tangent of the argument.\n     */\n    @IntrinsicCandidate\n    public static double tan(double a) {\n        return StrictMath.tan(a); // default impl. delegates to StrictMath\n    }\n\n    /**\n     * Returns the arc sine of a value; the returned angle is in the\n     * range -\u003ci\u003epi\u003c/i\u003e/2 through \u003ci\u003epi\u003c/i\u003e/2.  Special cases:\n     * \u003cul\u003e\u003cli\u003eIf the argument is NaN or its absolute value is greater\n     * than 1, then the result is NaN.\n     * \u003cli\u003eIf the argument is zero, then the result is a zero with the\n     * same sign as the argument.\u003c/ul\u003e\n     *\n     * \u003cp\u003eThe computed result must be within 1 ulp of the exact result.\n     * Results must be semi-monotonic.\n     *\n     * @param   a   the value whose arc sine is to be returned.\n     * @return  the arc sine of the argument.\n     */\n    public static double asin(double a) {\n        return StrictMath.asin(a); // default impl. delegates to StrictMath\n    }\n\n    /**\n     * Returns the arc cosine of a value; the returned angle is in the\n     * range 0.0 through \u003ci\u003epi\u003c/i\u003e.  Special case:\n     * \u003cul\u003e\u003cli\u003eIf the argument is NaN or its absolute value is greater\n     * than 1, then the result is NaN.\n     * \u003cli\u003eIf the argument is {@code 1.0}, the result is positive zero.\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eThe computed result must be within 1 ulp of the exact result.\n     * Results must be semi-monotonic.\n     *\n     * @param   a   the value whose arc cosine is to be returned.\n     * @return  the arc cosine of the argument.\n     */\n    public static double acos(double a) {\n        return StrictMath.acos(a); // default impl. delegates to StrictMath\n    }\n\n    /**\n     * Returns the arc tangent of a value; the returned angle is in the\n     * range -\u003ci\u003epi\u003c/i\u003e/2 through \u003ci\u003epi\u003c/i\u003e/2.  Special cases:\n     * \u003cul\u003e\u003cli\u003eIf the argument is NaN, then the result is NaN.\n     * \u003cli\u003eIf the argument is zero, then the result is a zero with the\n     * same sign as the argument.\n     * \u003cli\u003eIf the argument is {@linkplain Double#isInfinite infinite},\n     * then the result is the closest value to \u003ci\u003epi\u003c/i\u003e/2 with the\n     * same sign as the input.\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eThe computed result must be within 1 ulp of the exact result.\n     * Results must be semi-monotonic.\n     *\n     * @param   a   the value whose arc tangent is to be returned.\n     * @return  the arc tangent of the argument.\n     */\n    public static double atan(double a) {\n        return StrictMath.atan(a); // default impl. delegates to StrictMath\n    }\n\n    /**\n     * Converts an angle measured in degrees to an approximately\n     * equivalent angle measured in radians.  The conversion from\n     * degrees to radians is generally inexact.\n     *\n     * @param   angdeg   an angle, in degrees\n     * @return  the measurement of the angle {@code angdeg}\n     *          in radians.\n     * @since   1.2\n     */\n    public static double toRadians(double angdeg) {\n        return angdeg * DEGREES_TO_RADIANS;\n    }\n\n    /**\n     * Converts an angle measured in radians to an approximately\n     * equivalent angle measured in degrees.  The conversion from\n     * radians to degrees is generally inexact; users should\n     * \u003ci\u003enot\u003c/i\u003e expect {@code cos(toRadians(90.0))} to exactly\n     * equal {@code 0.0}.\n     *\n     * @param   angrad   an angle, in radians\n     * @return  the measurement of the angle {@code angrad}\n     *          in degrees.\n     * @since   1.2\n     */\n    public static double toDegrees(double angrad) {\n        return angrad * RADIANS_TO_DEGREES;\n    }\n\n    /**\n     * Returns Euler\u0027s number \u003ci\u003ee\u003c/i\u003e raised to the power of a\n     * {@code double} value.  Special cases:\n     * \u003cul\u003e\u003cli\u003eIf the argument is NaN, the result is NaN.\n     * \u003cli\u003eIf the argument is positive infinity, then the result is\n     * positive infinity.\n     * \u003cli\u003eIf the argument is negative infinity, then the result is\n     * positive zero.\n     * \u003cli\u003eIf the argument is zero, then the result is {@code 1.0}.\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eThe computed result must be within 1 ulp of the exact result.\n     * Results must be semi-monotonic.\n     *\n     * @param   a   the exponent to raise \u003ci\u003ee\u003c/i\u003e to.\n     * @return  the value \u003ci\u003ee\u003c/i\u003e\u003csup\u003e{@code a}\u003c/sup\u003e,\n     *          where \u003ci\u003ee\u003c/i\u003e is the base of the natural logarithms.\n     */\n    @IntrinsicCandidate\n    public static double exp(double a) {\n        return StrictMath.exp(a); // default impl. delegates to StrictMath\n    }\n\n    /**\n     * Returns the natural logarithm (base \u003ci\u003ee\u003c/i\u003e) of a {@code double}\n     * value.  Special cases:\n     * \u003cul\u003e\u003cli\u003eIf the argument is NaN or less than zero, then the result\n     * is NaN.\n     * \u003cli\u003eIf the argument is positive infinity, then the result is\n     * positive infinity.\n     * \u003cli\u003eIf the argument is positive zero or negative zero, then the\n     * result is negative infinity.\n     * \u003cli\u003eIf the argument is {@code 1.0}, then the result is positive\n     * zero.\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eThe computed result must be within 1 ulp of the exact result.\n     * Results must be semi-monotonic.\n     *\n     * @param   a   a value\n     * @return  the value ln\u0026nbsp;{@code a}, the natural logarithm of\n     *          {@code a}.\n     */\n    @IntrinsicCandidate\n    public static double log(double a) {\n        return StrictMath.log(a); // default impl. delegates to StrictMath\n    }\n\n    /**\n     * Returns the base 10 logarithm of a {@code double} value.\n     * Special cases:\n     *\n     * \u003cul\u003e\u003cli\u003eIf the argument is NaN or less than zero, then the result\n     * is NaN.\n     * \u003cli\u003eIf the argument is positive infinity, then the result is\n     * positive infinity.\n     * \u003cli\u003eIf the argument is positive zero or negative zero, then the\n     * result is negative infinity.\n     * \u003cli\u003eIf the argument is equal to 10\u003csup\u003e\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e for\n     * integer \u003ci\u003en\u003c/i\u003e, then the result is \u003ci\u003en\u003c/i\u003e. In particular,\n     * if the argument is {@code 1.0} (10\u003csup\u003e0\u003c/sup\u003e), then the\n     * result is positive zero.\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eThe computed result must be within 1 ulp of the exact result.\n     * Results must be semi-monotonic.\n     *\n     * @param   a   a value\n     * @return  the base 10 logarithm of  {@code a}.\n     * @since 1.5\n     */\n    @IntrinsicCandidate\n    public static double log10(double a) {\n        return StrictMath.log10(a); // default impl. delegates to StrictMath\n    }\n\n    /**\n     * Returns the correctly rounded positive square root of a\n     * {@code double} value.\n     * Special cases:\n     * \u003cul\u003e\u003cli\u003eIf the argument is NaN or less than zero, then the result\n     * is NaN.\n     * \u003cli\u003eIf the argument is positive infinity, then the result is positive\n     * infinity.\n     * \u003cli\u003eIf the argument is positive zero or negative zero, then the\n     * result is the same as the argument.\u003c/ul\u003e\n     * Otherwise, the result is the {@code double} value closest to\n     * the true mathematical square root of the argument value.\n     *\n     * @apiNote\n     * This method corresponds to the squareRoot operation defined in\n     * IEEE 754.\n     *\n     * @param   a   a value.\n     * @return  the positive square root of {@code a}.\n     *          If the argument is NaN or less than zero, the result is NaN.\n     */\n    @IntrinsicCandidate\n    public static double sqrt(double a) {\n        return StrictMath.sqrt(a); // default impl. delegates to StrictMath\n                                   // Note that hardware sqrt instructions\n                                   // frequently can be directly used by JITs\n                                   // and should be much faster than doing\n                                   // Math.sqrt in software.\n    }\n\n\n    /**\n     * Returns the cube root of a {@code double} value.  For\n     * positive finite {@code x}, {@code cbrt(-x) \u003d\u003d\n     * -cbrt(x)}; that is, the cube root of a negative value is\n     * the negative of the cube root of that value\u0027s magnitude.\n     *\n     * Special cases:\n     *\n     * \u003cul\u003e\n     *\n     * \u003cli\u003eIf the argument is NaN, then the result is NaN.\n     *\n     * \u003cli\u003eIf the argument is infinite, then the result is an infinity\n     * with the same sign as the argument.\n     *\n     * \u003cli\u003eIf the argument is zero, then the result is a zero with the\n     * same sign as the argument.\n     *\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eThe computed result must be within 1 ulp of the exact result.\n     *\n     * @param   a   a value.\n     * @return  the cube root of {@code a}.\n     * @since 1.5\n     */\n    public static double cbrt(double a) {\n        return StrictMath.cbrt(a);\n    }\n\n    /**\n     * Computes the remainder operation on two arguments as prescribed\n     * by the IEEE 754 standard.\n     * The remainder value is mathematically equal to\n     * \u003ccode\u003ef1\u0026nbsp;-\u0026nbsp;f2\u003c/code\u003e\u0026nbsp;\u0026times;\u0026nbsp;\u003ci\u003en\u003c/i\u003e,\n     * where \u003ci\u003en\u003c/i\u003e is the mathematical integer closest to the exact\n     * mathematical value of the quotient {@code f1/f2}, and if two\n     * mathematical integers are equally close to {@code f1/f2},\n     * then \u003ci\u003en\u003c/i\u003e is the integer that is even. If the remainder is\n     * zero, its sign is the same as the sign of the first argument.\n     * Special cases:\n     * \u003cul\u003e\u003cli\u003eIf either argument is NaN, or the first argument is infinite,\n     * or the second argument is positive zero or negative zero, then the\n     * result is NaN.\n     * \u003cli\u003eIf the first argument is finite and the second argument is\n     * infinite, then the result is the same as the first argument.\u003c/ul\u003e\n     *\n     * @param   f1   the dividend.\n     * @param   f2   the divisor.\n     * @return  the remainder when {@code f1} is divided by\n     *          {@code f2}.\n     */\n    public static double IEEEremainder(double f1, double f2) {\n        return StrictMath.IEEEremainder(f1, f2); // delegate to StrictMath\n    }\n\n    /**\n     * Returns the smallest (closest to negative infinity)\n     * {@code double} value that is greater than or equal to the\n     * argument and is equal to a mathematical integer. Special cases:\n     * \u003cul\u003e\u003cli\u003eIf the argument value is already equal to a\n     * mathematical integer, then the result is the same as the\n     * argument.  \u003cli\u003eIf the argument is NaN or an infinity or\n     * positive zero or negative zero, then the result is the same as\n     * the argument.  \u003cli\u003eIf the argument value is less than zero but\n     * greater than -1.0, then the result is negative zero.\u003c/ul\u003e Note\n     * that the value of {@code Math.ceil(x)} is exactly the\n     * value of {@code -Math.floor(-x)}.\n     *\n     * @apiNote\n     * This method corresponds to the roundToIntegralTowardPositive\n     * operation defined in IEEE 754.\n     *\n     * @param   a   a value.\n     * @return  the smallest (closest to negative infinity)\n     *          floating-point value that is greater than or equal to\n     *          the argument and is equal to a mathematical integer.\n     */\n    @IntrinsicCandidate\n    public static double ceil(double a) {\n        return StrictMath.ceil(a); // default impl. delegates to StrictMath\n    }\n\n    /**\n     * Returns the largest (closest to positive infinity)\n     * {@code double} value that is less than or equal to the\n     * argument and is equal to a mathematical integer. Special cases:\n     * \u003cul\u003e\u003cli\u003eIf the argument value is already equal to a\n     * mathematical integer, then the result is the same as the\n     * argument.  \u003cli\u003eIf the argument is NaN or an infinity or\n     * positive zero or negative zero, then the result is the same as\n     * the argument.\u003c/ul\u003e\n     *\n     * @apiNote\n     * This method corresponds to the roundToIntegralTowardNegative\n     * operation defined in IEEE 754.\n     *\n     * @param   a   a value.\n     * @return  the largest (closest to positive infinity)\n     *          floating-point value that less than or equal to the argument\n     *          and is equal to a mathematical integer.\n     */\n    @IntrinsicCandidate\n    public static double floor(double a) {\n        return StrictMath.floor(a); // default impl. delegates to StrictMath\n    }\n\n    /**\n     * Returns the {@code double} value that is closest in value\n     * to the argument and is equal to a mathematical integer. If two\n     * {@code double} values that are mathematical integers are\n     * equally close, the result is the integer value that is\n     * even. Special cases:\n     * \u003cul\u003e\u003cli\u003eIf the argument value is already equal to a mathematical\n     * integer, then the result is the same as the argument.\n     * \u003cli\u003eIf the argument is NaN or an infinity or positive zero or negative\n     * zero, then the result is the same as the argument.\u003c/ul\u003e\n     *\n     * @apiNote\n     * This method corresponds to the roundToIntegralTiesToEven\n     * operation defined in IEEE 754.\n     *\n     * @param   a   a {@code double} value.\n     * @return  the closest floating-point value to {@code a} that is\n     *          equal to a mathematical integer.\n     */\n    @IntrinsicCandidate\n    public static double rint(double a) {\n        return StrictMath.rint(a); // default impl. delegates to StrictMath\n    }\n\n    /**\n     * Returns the angle \u003ci\u003etheta\u003c/i\u003e from the conversion of rectangular\n     * coordinates ({@code x},\u0026nbsp;{@code y}) to polar\n     * coordinates (r,\u0026nbsp;\u003ci\u003etheta\u003c/i\u003e).\n     * This method computes the phase \u003ci\u003etheta\u003c/i\u003e by computing an arc tangent\n     * of {@code y/x} in the range of -\u003ci\u003epi\u003c/i\u003e to \u003ci\u003epi\u003c/i\u003e. Special\n     * cases:\n     * \u003cul\u003e\u003cli\u003eIf either argument is NaN, then the result is NaN.\n     * \u003cli\u003eIf the first argument is positive zero and the second argument\n     * is positive, or the first argument is positive and finite and the\n     * second argument is positive infinity, then the result is positive\n     * zero.\n     * \u003cli\u003eIf the first argument is negative zero and the second argument\n     * is positive, or the first argument is negative and finite and the\n     * second argument is positive infinity, then the result is negative zero.\n     * \u003cli\u003eIf the first argument is positive zero and the second argument\n     * is negative, or the first argument is positive and finite and the\n     * second argument is negative infinity, then the result is the\n     * {@code double} value closest to \u003ci\u003epi\u003c/i\u003e.\n     * \u003cli\u003eIf the first argument is negative zero and the second argument\n     * is negative, or the first argument is negative and finite and the\n     * second argument is negative infinity, then the result is the\n     * {@code double} value closest to -\u003ci\u003epi\u003c/i\u003e.\n     * \u003cli\u003eIf the first argument is positive and the second argument is\n     * positive zero or negative zero, or the first argument is positive\n     * infinity and the second argument is finite, then the result is the\n     * {@code double} value closest to \u003ci\u003epi\u003c/i\u003e/2.\n     * \u003cli\u003eIf the first argument is negative and the second argument is\n     * positive zero or negative zero, or the first argument is negative\n     * infinity and the second argument is finite, then the result is the\n     * {@code double} value closest to -\u003ci\u003epi\u003c/i\u003e/2.\n     * \u003cli\u003eIf both arguments are positive infinity, then the result is the\n     * {@code double} value closest to \u003ci\u003epi\u003c/i\u003e/4.\n     * \u003cli\u003eIf the first argument is positive infinity and the second argument\n     * is negative infinity, then the result is the {@code double}\n     * value closest to 3*\u003ci\u003epi\u003c/i\u003e/4.\n     * \u003cli\u003eIf the first argument is negative infinity and the second argument\n     * is positive infinity, then the result is the {@code double} value\n     * closest to -\u003ci\u003epi\u003c/i\u003e/4.\n     * \u003cli\u003eIf both arguments are negative infinity, then the result is the\n     * {@code double} value closest to -3*\u003ci\u003epi\u003c/i\u003e/4.\u003c/ul\u003e\n     *\n     * \u003cp\u003eThe computed result must be within 2 ulps of the exact result.\n     * Results must be semi-monotonic.\n     *\n     * @apiNote\n     * For \u003ci\u003ey\u003c/i\u003e with a positive sign and finite nonzero\n     * \u003ci\u003ex\u003c/i\u003e, the exact mathematical value of {@code atan2} is\n     * equal to:\n     * \u003cul\u003e\n     * \u003cli\u003eIf \u003ci\u003ex\u003c/i\u003e {@literal \u003e} 0, atan(abs(\u003ci\u003ey\u003c/i\u003e/\u003ci\u003ex\u003c/i\u003e))\n     * \u003cli\u003eIf \u003ci\u003ex\u003c/i\u003e {@literal \u003c} 0, \u0026pi; - atan(abs(\u003ci\u003ey\u003c/i\u003e/\u003ci\u003ex\u003c/i\u003e))\n     * \u003c/ul\u003e\n     *\n     * @param   y   the ordinate coordinate\n     * @param   x   the abscissa coordinate\n     * @return  the \u003ci\u003etheta\u003c/i\u003e component of the point\n     *          (\u003ci\u003er\u003c/i\u003e,\u0026nbsp;\u003ci\u003etheta\u003c/i\u003e)\n     *          in polar coordinates that corresponds to the point\n     *          (\u003ci\u003ex\u003c/i\u003e,\u0026nbsp;\u003ci\u003ey\u003c/i\u003e) in Cartesian coordinates.\n     */\n    @IntrinsicCandidate\n    public static double atan2(double y, double x) {\n        return StrictMath.atan2(y, x); // default impl. delegates to StrictMath\n    }\n\n    /**\n     * Returns the value of the first argument raised to the power of the\n     * second argument. Special cases:\n     *\n     * \u003cul\u003e\u003cli\u003eIf the second argument is positive or negative zero, then the\n     * result is 1.0.\n     * \u003cli\u003eIf the second argument is 1.0, then the result is the same as the\n     * first argument.\n     * \u003cli\u003eIf the second argument is NaN, then the result is NaN.\n     * \u003cli\u003eIf the first argument is NaN and the second argument is nonzero,\n     * then the result is NaN.\n     *\n     * \u003cli\u003eIf\n     * \u003cul\u003e\n     * \u003cli\u003ethe absolute value of the first argument is greater than 1\n     * and the second argument is positive infinity, or\n     * \u003cli\u003ethe absolute value of the first argument is less than 1 and\n     * the second argument is negative infinity,\n     * \u003c/ul\u003e\n     * then the result is positive infinity.\n     *\n     * \u003cli\u003eIf\n     * \u003cul\u003e\n     * \u003cli\u003ethe absolute value of the first argument is greater than 1 and\n     * the second argument is negative infinity, or\n     * \u003cli\u003ethe absolute value of the\n     * first argument is less than 1 and the second argument is positive\n     * infinity,\n     * \u003c/ul\u003e\n     * then the result is positive zero.\n     *\n     * \u003cli\u003eIf the absolute value of the first argument equals 1 and the\n     * second argument is infinite, then the result is NaN.\n     *\n     * \u003cli\u003eIf\n     * \u003cul\u003e\n     * \u003cli\u003ethe first argument is positive zero and the second argument\n     * is greater than zero, or\n     * \u003cli\u003ethe first argument is positive infinity and the second\n     * argument is less than zero,\n     * \u003c/ul\u003e\n     * then the result is positive zero.\n     *\n     * \u003cli\u003eIf\n     * \u003cul\u003e\n     * \u003cli\u003ethe first argument is positive zero and the second argument\n     * is less than zero, or\n     * \u003cli\u003ethe first argument is positive infinity and the second\n     * argument is greater than zero,\n     * \u003c/ul\u003e\n     * then the result is positive infinity.\n     *\n     * \u003cli\u003eIf\n     * \u003cul\u003e\n     * \u003cli\u003ethe first argument is negative zero and the second argument\n     * is greater than zero but not a finite odd integer, or\n     * \u003cli\u003ethe first argument is negative infinity and the second\n     * argument is less than zero but not a finite odd integer,\n     * \u003c/ul\u003e\n     * then the result is positive zero.\n     *\n     * \u003cli\u003eIf\n     * \u003cul\u003e\n     * \u003cli\u003ethe first argument is negative zero and the second argument\n     * is a positive finite odd integer, or\n     * \u003cli\u003ethe first argument is negative infinity and the second\n     * argument is a negative finite odd integer,\n     * \u003c/ul\u003e\n     * then the result is negative zero.\n     *\n     * \u003cli\u003eIf\n     * \u003cul\u003e\n     * \u003cli\u003ethe first argument is negative zero and the second argument\n     * is less than zero but not a finite odd integer, or\n     * \u003cli\u003ethe first argument is negative infinity and the second\n     * argument is greater than zero but not a finite odd integer,\n     * \u003c/ul\u003e\n     * then the result is positive infinity.\n     *\n     * \u003cli\u003eIf\n     * \u003cul\u003e\n     * \u003cli\u003ethe first argument is negative zero and the second argument\n     * is a negative finite odd integer, or\n     * \u003cli\u003ethe first argument is negative infinity and the second\n     * argument is a positive finite odd integer,\n     * \u003c/ul\u003e\n     * then the result is negative infinity.\n     *\n     * \u003cli\u003eIf the first argument is finite and less than zero\n     * \u003cul\u003e\n     * \u003cli\u003e if the second argument is a finite even integer, the\n     * result is equal to the result of raising the absolute value of\n     * the first argument to the power of the second argument\n     *\n     * \u003cli\u003eif the second argument is a finite odd integer, the result\n     * is equal to the negative of the result of raising the absolute\n     * value of the first argument to the power of the second\n     * argument\n     *\n     * \u003cli\u003eif the second argument is finite and not an integer, then\n     * the result is NaN.\n     * \u003c/ul\u003e\n     *\n     * \u003cli\u003eIf both arguments are integers, then the result is exactly equal\n     * to the mathematical result of raising the first argument to the power\n     * of the second argument if that result can in fact be represented\n     * exactly as a {@code double} value.\u003c/ul\u003e\n     *\n     * \u003cp\u003e(In the foregoing descriptions, a floating-point value is\n     * considered to be an integer if and only if it is finite and a\n     * fixed point of the method {@link #ceil ceil} or,\n     * equivalently, a fixed point of the method {@link #floor\n     * floor}. A value is a fixed point of a one-argument\n     * method if and only if the result of applying the method to the\n     * value is equal to the value.)\n     *\n     * \u003cp\u003eThe computed result must be within 1 ulp of the exact result.\n     * Results must be semi-monotonic.\n     *\n     * @apiNote\n     * The special cases definitions of this method differ from the\n     * special case definitions of the IEEE 754 recommended {@code\n     * pow} operation for \u0026plusmn;{@code 1.0} raised to an infinite\n     * power. This method treats such cases as indeterminate and\n     * specifies a NaN is returned. The IEEE 754 specification treats\n     * the infinite power as a large integer (large-magnitude\n     * floating-point numbers are numerically integers, specifically\n     * even integers) and therefore specifies {@code 1.0} be returned.\n     *\n     * @param   a   the base.\n     * @param   b   the exponent.\n     * @return  the value {@code a}\u003csup\u003e{@code b}\u003c/sup\u003e.\n     */\n    @IntrinsicCandidate\n    public static double pow(double a, double b) {\n        return StrictMath.pow(a, b); // default impl. delegates to StrictMath\n    }\n\n    /**\n     * Returns the closest {@code int} to the argument, with ties\n     * rounding to positive infinity.\n     *\n     * \u003cp\u003e\n     * Special cases:\n     * \u003cul\u003e\u003cli\u003eIf the argument is NaN, the result is 0.\n     * \u003cli\u003eIf the argument is negative infinity or any value less than or\n     * equal to the value of {@code Integer.MIN_VALUE}, the result is\n     * equal to the value of {@code Integer.MIN_VALUE}.\n     * \u003cli\u003eIf the argument is positive infinity or any value greater than or\n     * equal to the value of {@code Integer.MAX_VALUE}, the result is\n     * equal to the value of {@code Integer.MAX_VALUE}.\u003c/ul\u003e\n     *\n     * @param   a   a floating-point value to be rounded to an integer.\n     * @return  the value of the argument rounded to the nearest\n     *          {@code int} value.\n     * @see     java.lang.Integer#MAX_VALUE\n     * @see     java.lang.Integer#MIN_VALUE\n     */\n    @IntrinsicCandidate\n    public static int round(float a) {\n        int intBits \u003d Float.floatToRawIntBits(a);\n        int biasedExp \u003d (intBits \u0026 FloatConsts.EXP_BIT_MASK)\n                \u003e\u003e (FloatConsts.SIGNIFICAND_WIDTH - 1);\n        int shift \u003d (FloatConsts.SIGNIFICAND_WIDTH - 2\n                + FloatConsts.EXP_BIAS) - biasedExp;\n        if ((shift \u0026 -32) \u003d\u003d 0) { // shift \u003e\u003d 0 \u0026\u0026 shift \u003c 32\n            // a is a finite number such that pow(2,-32) \u003c\u003d ulp(a) \u003c 1\n            int r \u003d ((intBits \u0026 FloatConsts.SIGNIF_BIT_MASK)\n                    | (FloatConsts.SIGNIF_BIT_MASK + 1));\n            if (intBits \u003c 0) {\n                r \u003d -r;\n            }\n            // In the comments below each Java expression evaluates to the value\n            // the corresponding mathematical expression:\n            // (r) evaluates to a / ulp(a)\n            // (r \u003e\u003e shift) evaluates to floor(a * 2)\n            // ((r \u003e\u003e shift) + 1) evaluates to floor((a + 1/2) * 2)\n            // (((r \u003e\u003e shift) + 1) \u003e\u003e 1) evaluates to floor(a + 1/2)\n            return ((r \u003e\u003e shift) + 1) \u003e\u003e 1;\n        } else {\n            // a is either\n            // - a finite number with abs(a) \u003c exp(2,FloatConsts.SIGNIFICAND_WIDTH-32) \u003c 1/2\n            // - a finite number with ulp(a) \u003e\u003d 1 and hence a is a mathematical integer\n            // - an infinity or NaN\n            return (int) a;\n        }\n    }\n\n    /**\n     * Returns the closest {@code long} to the argument, with ties\n     * rounding to positive infinity.\n     *\n     * \u003cp\u003eSpecial cases:\n     * \u003cul\u003e\u003cli\u003eIf the argument is NaN, the result is 0.\n     * \u003cli\u003eIf the argument is negative infinity or any value less than or\n     * equal to the value of {@code Long.MIN_VALUE}, the result is\n     * equal to the value of {@code Long.MIN_VALUE}.\n     * \u003cli\u003eIf the argument is positive infinity or any value greater than or\n     * equal to the value of {@code Long.MAX_VALUE}, the result is\n     * equal to the value of {@code Long.MAX_VALUE}.\u003c/ul\u003e\n     *\n     * @param   a   a floating-point value to be rounded to a\n     *          {@code long}.\n     * @return  the value of the argument rounded to the nearest\n     *          {@code long} value.\n     * @see     java.lang.Long#MAX_VALUE\n     * @see     java.lang.Long#MIN_VALUE\n     */\n    @IntrinsicCandidate\n    public static long round(double a) {\n        long longBits \u003d Double.doubleToRawLongBits(a);\n        long biasedExp \u003d (longBits \u0026 DoubleConsts.EXP_BIT_MASK)\n                \u003e\u003e (DoubleConsts.SIGNIFICAND_WIDTH - 1);\n        long shift \u003d (DoubleConsts.SIGNIFICAND_WIDTH - 2\n                + DoubleConsts.EXP_BIAS) - biasedExp;\n        if ((shift \u0026 -64) \u003d\u003d 0) { // shift \u003e\u003d 0 \u0026\u0026 shift \u003c 64\n            // a is a finite number such that pow(2,-64) \u003c\u003d ulp(a) \u003c 1\n            long r \u003d ((longBits \u0026 DoubleConsts.SIGNIF_BIT_MASK)\n                    | (DoubleConsts.SIGNIF_BIT_MASK + 1));\n            if (longBits \u003c 0) {\n                r \u003d -r;\n            }\n            // In the comments below each Java expression evaluates to the value\n            // the corresponding mathematical expression:\n            // (r) evaluates to a / ulp(a)\n            // (r \u003e\u003e shift) evaluates to floor(a * 2)\n            // ((r \u003e\u003e shift) + 1) evaluates to floor((a + 1/2) * 2)\n            // (((r \u003e\u003e shift) + 1) \u003e\u003e 1) evaluates to floor(a + 1/2)\n            return ((r \u003e\u003e shift) + 1) \u003e\u003e 1;\n        } else {\n            // a is either\n            // - a finite number with abs(a) \u003c exp(2,DoubleConsts.SIGNIFICAND_WIDTH-64) \u003c 1/2\n            // - a finite number with ulp(a) \u003e\u003d 1 and hence a is a mathematical integer\n            // - an infinity or NaN\n            return (long) a;\n        }\n    }\n\n    private static final class RandomNumberGeneratorHolder {\n        static final Random randomNumberGenerator \u003d new Random();\n    }\n\n    /**\n     * Returns a {@code double} value with a positive sign, greater\n     * than or equal to {@code 0.0} and less than {@code 1.0}.\n     * Returned values are chosen pseudorandomly with (approximately)\n     * uniform distribution from that range.\n     *\n     * \u003cp\u003eWhen this method is first called, it creates a single new\n     * pseudorandom-number generator, exactly as if by the expression\n     *\n     * \u003cblockquote\u003e{@code new java.util.Random()}\u003c/blockquote\u003e\n     *\n     * This new pseudorandom-number generator is used thereafter for\n     * all calls to this method and is used nowhere else.\n     *\n     * \u003cp\u003eThis method is properly synchronized to allow correct use by\n     * more than one thread. However, if many threads need to generate\n     * pseudorandom numbers at a great rate, it may reduce contention\n     * for each thread to have its own pseudorandom-number generator.\n     *\n     * @apiNote\n     * As the largest {@code double} value less than {@code 1.0}\n     * is {@code Math.nextDown(1.0)}, a value {@code x} in the closed range\n     * {@code [x1,x2]} where {@code x1\u003c\u003dx2} may be defined by the statements\n     *\n     * \u003cblockquote\u003e\u003cpre\u003e{@code\n     * double f \u003d Math.random()/Math.nextDown(1.0);\n     * double x \u003d x1*(1.0 - f) + x2*f;\n     * }\u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @return  a pseudorandom {@code double} greater than or equal\n     * to {@code 0.0} and less than {@code 1.0}.\n     * @see #nextDown(double)\n     * @see Random#nextDouble()\n     */\n    public static double random() {\n        return RandomNumberGeneratorHolder.randomNumberGenerator.nextDouble();\n    }\n\n    /**\n     * Returns the sum of its arguments,\n     * throwing an exception if the result overflows an {@code int}.\n     *\n     * @param x the first value\n     * @param y the second value\n     * @return the result\n     * @throws ArithmeticException if the result overflows an int\n     * @since 1.8\n     */\n    @IntrinsicCandidate\n    public static int addExact(int x, int y) {\n        int r \u003d x + y;\n        // HD 2-12 Overflow iff both arguments have the opposite sign of the result\n        if (((x ^ r) \u0026 (y ^ r)) \u003c 0) {\n            throw new ArithmeticException(\"integer overflow\");\n        }\n        return r;\n    }\n\n    /**\n     * Returns the sum of its arguments,\n     * throwing an exception if the result overflows a {@code long}.\n     *\n     * @param x the first value\n     * @param y the second value\n     * @return the result\n     * @throws ArithmeticException if the result overflows a long\n     * @since 1.8\n     */\n    @IntrinsicCandidate\n    public static long addExact(long x, long y) {\n        long r \u003d x + y;\n        // HD 2-12 Overflow iff both arguments have the opposite sign of the result\n        if (((x ^ r) \u0026 (y ^ r)) \u003c 0) {\n            throw new ArithmeticException(\"long overflow\");\n        }\n        return r;\n    }\n\n    /**\n     * Returns the difference of the arguments,\n     * throwing an exception if the result overflows an {@code int}.\n     *\n     * @param x the first value\n     * @param y the second value to subtract from the first\n     * @return the result\n     * @throws ArithmeticException if the result overflows an int\n     * @since 1.8\n     */\n    @IntrinsicCandidate\n    public static int subtractExact(int x, int y) {\n        int r \u003d x - y;\n        // HD 2-12 Overflow iff the arguments have different signs and\n        // the sign of the result is different from the sign of x\n        if (((x ^ y) \u0026 (x ^ r)) \u003c 0) {\n            throw new ArithmeticException(\"integer overflow\");\n        }\n        return r;\n    }\n\n    /**\n     * Returns the difference of the arguments,\n     * throwing an exception if the result overflows a {@code long}.\n     *\n     * @param x the first value\n     * @param y the second value to subtract from the first\n     * @return the result\n     * @throws ArithmeticException if the result overflows a long\n     * @since 1.8\n     */\n    @IntrinsicCandidate\n    public static long subtractExact(long x, long y) {\n        long r \u003d x - y;\n        // HD 2-12 Overflow iff the arguments have different signs and\n        // the sign of the result is different from the sign of x\n        if (((x ^ y) \u0026 (x ^ r)) \u003c 0) {\n            throw new ArithmeticException(\"long overflow\");\n        }\n        return r;\n    }\n\n    /**\n     * Returns the product of the arguments,\n     * throwing an exception if the result overflows an {@code int}.\n     *\n     * @param x the first value\n     * @param y the second value\n     * @return the result\n     * @throws ArithmeticException if the result overflows an int\n     * @since 1.8\n     */\n    @IntrinsicCandidate\n    public static int multiplyExact(int x, int y) {\n        long r \u003d (long)x * (long)y;\n        if ((int)r !\u003d r) {\n            throw new ArithmeticException(\"integer overflow\");\n        }\n        return (int)r;\n    }\n\n    /**\n     * Returns the product of the arguments, throwing an exception if the result\n     * overflows a {@code long}.\n     *\n     * @param x the first value\n     * @param y the second value\n     * @return the result\n     * @throws ArithmeticException if the result overflows a long\n     * @since 9\n     */\n    public static long multiplyExact(long x, int y) {\n        return multiplyExact(x, (long)y);\n    }\n\n    /**\n     * Returns the product of the arguments,\n     * throwing an exception if the result overflows a {@code long}.\n     *\n     * @param x the first value\n     * @param y the second value\n     * @return the result\n     * @throws ArithmeticException if the result overflows a long\n     * @since 1.8\n     */\n    @IntrinsicCandidate\n    public static long multiplyExact(long x, long y) {\n        long r \u003d x * y;\n        long ax \u003d Math.abs(x);\n        long ay \u003d Math.abs(y);\n        if (((ax | ay) \u003e\u003e\u003e 31 !\u003d 0)) {\n            // Some bits greater than 2^31 that might cause overflow\n            // Check the result using the divide operator\n            // and check for the special case of Long.MIN_VALUE * -1\n           if (((y !\u003d 0) \u0026\u0026 (r / y !\u003d x)) ||\n               (x \u003d\u003d Long.MIN_VALUE \u0026\u0026 y \u003d\u003d -1)) {\n                throw new ArithmeticException(\"long overflow\");\n            }\n        }\n        return r;\n    }\n\n    /**\n     * Returns the quotient of the arguments, throwing an exception if the\n     * result overflows an {@code int}.  Such overflow occurs in this method if\n     * {@code x} is {@link Integer#MIN_VALUE} and {@code y} is {@code -1}.\n     * In contrast, if {@code Integer.MIN_VALUE / -1} were evaluated directly,\n     * the result would be {@code Integer.MIN_VALUE} and no exception would be\n     * thrown.\n     * \u003cp\u003e\n     * If {@code y} is zero, an {@code ArithmeticException} is thrown\n     * (JLS {@jls 15.17.2}).\n     * \u003cp\u003e\n     * The built-in remainder operator \"{@code %}\" is a suitable counterpart\n     * both for this method and for the built-in division operator \"{@code /}\".\n     *\n     * @param x the dividend\n     * @param y the divisor\n     * @return the quotient {@code x / y}\n     * @throws ArithmeticException if {@code y} is zero or the quotient\n     * overflows an int\n     * @jls 15.17.2 Division Operator /\n     * @since 18\n     */\n    public static int divideExact(int x, int y) {\n        int q \u003d x / y;\n        if ((x \u0026 y \u0026 q) \u003e\u003d 0) {\n            return q;\n        }\n        throw new ArithmeticException(\"integer overflow\");\n    }\n\n    /**\n     * Returns the quotient of the arguments, throwing an exception if the\n     * result overflows a {@code long}.  Such overflow occurs in this method if\n     * {@code x} is {@link Long#MIN_VALUE} and {@code y} is {@code -1}.\n     * In contrast, if {@code Long.MIN_VALUE / -1} were evaluated directly,\n     * the result would be {@code Long.MIN_VALUE} and no exception would be\n     * thrown.\n     * \u003cp\u003e\n     * If {@code y} is zero, an {@code ArithmeticException} is thrown\n     * (JLS {@jls 15.17.2}).\n     * \u003cp\u003e\n     * The built-in remainder operator \"{@code %}\" is a suitable counterpart\n     * both for this method and for the built-in division operator \"{@code /}\".\n     *\n     * @param x the dividend\n     * @param y the divisor\n     * @return the quotient {@code x / y}\n     * @throws ArithmeticException if {@code y} is zero or the quotient\n     * overflows a long\n     * @jls 15.17.2 Division Operator /\n     * @since 18\n     */\n    public static long divideExact(long x, long y) {\n        long q \u003d x / y;\n        if ((x \u0026 y \u0026 q) \u003e\u003d 0) {\n            return q;\n        }\n        throw new ArithmeticException(\"long overflow\");\n    }\n\n    /**\n     * Returns the largest (closest to positive infinity)\n     * {@code int} value that is less than or equal to the algebraic quotient.\n     * This method is identical to {@link #floorDiv(int,int)} except that it\n     * throws an {@code ArithmeticException} when the dividend is\n     * {@linkplain Integer#MIN_VALUE Integer.MIN_VALUE} and the divisor is\n     * {@code -1} instead of ignoring the integer overflow and returning\n     * {@code Integer.MIN_VALUE}.\n     * \u003cp\u003e\n     * The floor modulus method {@link #floorMod(int,int)} is a suitable\n     * counterpart both for this method and for the {@link #floorDiv(int,int)}\n     * method.\n     * \u003cp\u003e\n     * For examples, see {@link #floorDiv(int, int)}.\n     *\n     * @param x the dividend\n     * @param y the divisor\n     * @return the largest (closest to positive infinity)\n     * {@code int} value that is less than or equal to the algebraic quotient.\n     * @throws ArithmeticException if the divisor {@code y} is zero, or the\n     * dividend {@code x} is {@code Integer.MIN_VALUE} and the divisor {@code y}\n     * is {@code -1}.\n     * @see #floorDiv(int, int)\n     * @since 18\n     */\n    public static int floorDivExact(int x, int y) {\n        final int q \u003d x / y;\n        if ((x \u0026 y \u0026 q) \u003e\u003d 0) {\n            // if the signs are different and modulo not zero, round down\n            if ((x ^ y) \u003c 0 \u0026\u0026 (q * y !\u003d x)) {\n                return q - 1;\n            }\n            return q;\n        }\n        throw new ArithmeticException(\"integer overflow\");\n    }\n\n    /**\n     * Returns the largest (closest to positive infinity)\n     * {@code long} value that is less than or equal to the algebraic quotient.\n     * This method is identical to {@link #floorDiv(long,long)} except that it\n     * throws an {@code ArithmeticException} when the dividend is\n     * {@linkplain Long#MIN_VALUE Long.MIN_VALUE} and the divisor is\n     * {@code -1} instead of ignoring the integer overflow and returning\n     * {@code Long.MIN_VALUE}.\n     * \u003cp\u003e\n     * The floor modulus method {@link #floorMod(long,long)} is a suitable\n     * counterpart both for this method and for the {@link #floorDiv(long,long)}\n     * method.\n     * \u003cp\u003e\n     * For examples, see {@link #floorDiv(int, int)}.\n     *\n     * @param x the dividend\n     * @param y the divisor\n     * @return the largest (closest to positive infinity)\n     * {@code long} value that is less than or equal to the algebraic quotient.\n     * @throws ArithmeticException if the divisor {@code y} is zero, or the\n     * dividend {@code x} is {@code Long.MIN_VALUE} and the divisor {@code y}\n     * is {@code -1}.\n     * @see #floorDiv(long,long)\n     * @since 18\n     */\n    public static long floorDivExact(long x, long y) {\n        final long q \u003d x / y;\n        if ((x \u0026 y \u0026 q) \u003e\u003d 0) {\n            // if the signs are different and modulo not zero, round down\n            if ((x ^ y) \u003c 0 \u0026\u0026 (q * y !\u003d x)) {\n                return q - 1;\n            }\n            return q;\n        }\n        throw new ArithmeticException(\"long overflow\");\n    }\n\n    /**\n     * Returns the smallest (closest to negative infinity)\n     * {@code int} value that is greater than or equal to the algebraic quotient.\n     * This method is identical to {@link #ceilDiv(int,int)} except that it\n     * throws an {@code ArithmeticException} when the dividend is\n     * {@linkplain Integer#MIN_VALUE Integer.MIN_VALUE} and the divisor is\n     * {@code -1} instead of ignoring the integer overflow and returning\n     * {@code Integer.MIN_VALUE}.\n     * \u003cp\u003e\n     * The ceil modulus method {@link #ceilMod(int,int)} is a suitable\n     * counterpart both for this method and for the {@link #ceilDiv(int,int)}\n     * method.\n     * \u003cp\u003e\n     * For examples, see {@link #ceilDiv(int, int)}.\n     *\n     * @param x the dividend\n     * @param y the divisor\n     * @return the smallest (closest to negative infinity)\n     * {@code int} value that is greater than or equal to the algebraic quotient.\n     * @throws ArithmeticException if the divisor {@code y} is zero, or the\n     * dividend {@code x} is {@code Integer.MIN_VALUE} and the divisor {@code y}\n     * is {@code -1}.\n     * @see #ceilDiv(int, int)\n     * @since 18\n     */\n    public static int ceilDivExact(int x, int y) {\n        final int q \u003d x / y;\n        if ((x \u0026 y \u0026 q) \u003e\u003d 0) {\n            // if the signs are the same and modulo not zero, round up\n            if ((x ^ y) \u003e\u003d 0 \u0026\u0026 (q * y !\u003d x)) {\n                return q + 1;\n            }\n            return q;\n        }\n        throw new ArithmeticException(\"integer overflow\");\n    }\n\n    /**\n     * Returns the smallest (closest to negative infinity)\n     * {@code long} value that is greater than or equal to the algebraic quotient.\n     * This method is identical to {@link #ceilDiv(long,long)} except that it\n     * throws an {@code ArithmeticException} when the dividend is\n     * {@linkplain Long#MIN_VALUE Long.MIN_VALUE} and the divisor is\n     * {@code -1} instead of ignoring the integer overflow and returning\n     * {@code Long.MIN_VALUE}.\n     * \u003cp\u003e\n     * The ceil modulus method {@link #ceilMod(long,long)} is a suitable\n     * counterpart both for this method and for the {@link #ceilDiv(long,long)}\n     * method.\n     * \u003cp\u003e\n     * For examples, see {@link #ceilDiv(int, int)}.\n     *\n     * @param x the dividend\n     * @param y the divisor\n     * @return the smallest (closest to negative infinity)\n     * {@code long} value that is greater than or equal to the algebraic quotient.\n     * @throws ArithmeticException if the divisor {@code y} is zero, or the\n     * dividend {@code x} is {@code Long.MIN_VALUE} and the divisor {@code y}\n     * is {@code -1}.\n     * @see #ceilDiv(long,long)\n     * @since 18\n     */\n    public static long ceilDivExact(long x, long y) {\n        final long q \u003d x / y;\n        if ((x \u0026 y \u0026 q) \u003e\u003d 0) {\n            // if the signs are the same and modulo not zero, round up\n            if ((x ^ y) \u003e\u003d 0 \u0026\u0026 (q * y !\u003d x)) {\n                return q + 1;\n            }\n            return q;\n        }\n        throw new ArithmeticException(\"long overflow\");\n    }\n\n    /**\n     * Returns the argument incremented by one, throwing an exception if the\n     * result overflows an {@code int}.\n     * The overflow only occurs for {@linkplain Integer#MAX_VALUE the maximum value}.\n     *\n     * @param a the value to increment\n     * @return the result\n     * @throws ArithmeticException if the result overflows an int\n     * @since 1.8\n     */\n    @IntrinsicCandidate\n    public static int incrementExact(int a) {\n        if (a \u003d\u003d Integer.MAX_VALUE) {\n            throw new ArithmeticException(\"integer overflow\");\n        }\n\n        return a + 1;\n    }\n\n    /**\n     * Returns the argument incremented by one, throwing an exception if the\n     * result overflows a {@code long}.\n     * The overflow only occurs for {@linkplain Long#MAX_VALUE the maximum value}.\n     *\n     * @param a the value to increment\n     * @return the result\n     * @throws ArithmeticException if the result overflows a long\n     * @since 1.8\n     */\n    @IntrinsicCandidate\n    public static long incrementExact(long a) {\n        if (a \u003d\u003d Long.MAX_VALUE) {\n            throw new ArithmeticException(\"long overflow\");\n        }\n\n        return a + 1L;\n    }\n\n    /**\n     * Returns the argument decremented by one, throwing an exception if the\n     * result overflows an {@code int}.\n     * The overflow only occurs for {@linkplain Integer#MIN_VALUE the minimum value}.\n     *\n     * @param a the value to decrement\n     * @return the result\n     * @throws ArithmeticException if the result overflows an int\n     * @since 1.8\n     */\n    @IntrinsicCandidate\n    public static int decrementExact(int a) {\n        if (a \u003d\u003d Integer.MIN_VALUE) {\n            throw new ArithmeticException(\"integer overflow\");\n        }\n\n        return a - 1;\n    }\n\n    /**\n     * Returns the argument decremented by one, throwing an exception if the\n     * result overflows a {@code long}.\n     * The overflow only occurs for {@linkplain Long#MIN_VALUE the minimum value}.\n     *\n     * @param a the value to decrement\n     * @return the result\n     * @throws ArithmeticException if the result overflows a long\n     * @since 1.8\n     */\n    @IntrinsicCandidate\n    public static long decrementExact(long a) {\n        if (a \u003d\u003d Long.MIN_VALUE) {\n            throw new ArithmeticException(\"long overflow\");\n        }\n\n        return a - 1L;\n    }\n\n    /**\n     * Returns the negation of the argument, throwing an exception if the\n     * result overflows an {@code int}.\n     * The overflow only occurs for {@linkplain Integer#MIN_VALUE the minimum value}.\n     *\n     * @param a the value to negate\n     * @return the result\n     * @throws ArithmeticException if the result overflows an int\n     * @since 1.8\n     */\n    @IntrinsicCandidate\n    public static int negateExact(int a) {\n        if (a \u003d\u003d Integer.MIN_VALUE) {\n            throw new ArithmeticException(\"integer overflow\");\n        }\n\n        return -a;\n    }\n\n    /**\n     * Returns the negation of the argument, throwing an exception if the\n     * result overflows a {@code long}.\n     * The overflow only occurs for {@linkplain Long#MIN_VALUE the minimum value}.\n     *\n     * @param a the value to negate\n     * @return the result\n     * @throws ArithmeticException if the result overflows a long\n     * @since 1.8\n     */\n    @IntrinsicCandidate\n    public static long negateExact(long a) {\n        if (a \u003d\u003d Long.MIN_VALUE) {\n            throw new ArithmeticException(\"long overflow\");\n        }\n\n        return -a;\n    }\n\n    /**\n     * Returns the value of the {@code long} argument,\n     * throwing an exception if the value overflows an {@code int}.\n     *\n     * @param value the long value\n     * @return the argument as an int\n     * @throws ArithmeticException if the {@code argument} overflows an int\n     * @since 1.8\n     */\n    public static int toIntExact(long value) {\n        if ((int)value !\u003d value) {\n            throw new ArithmeticException(\"integer overflow\");\n        }\n        return (int)value;\n    }\n\n    /**\n     * Returns the exact mathematical product of the arguments.\n     *\n     * @param x the first value\n     * @param y the second value\n     * @return the result\n     * @since 9\n     */\n    public static long multiplyFull(int x, int y) {\n        return (long)x * (long)y;\n    }\n\n    /**\n     * Returns as a {@code long} the most significant 64 bits of the 128-bit\n     * product of two 64-bit factors.\n     *\n     * @param x the first value\n     * @param y the second value\n     * @return the result\n     * @see #unsignedMultiplyHigh\n     * @since 9\n     */\n    @IntrinsicCandidate\n    public static long multiplyHigh(long x, long y) {\n        // Use technique from section 8-2 of Henry S. Warren, Jr.,\n        // Hacker\u0027s Delight (2nd ed.) (Addison Wesley, 2013), 173-174.\n        long x1 \u003d x \u003e\u003e 32;\n        long x2 \u003d x \u0026 0xFFFFFFFFL;\n        long y1 \u003d y \u003e\u003e 32;\n        long y2 \u003d y \u0026 0xFFFFFFFFL;\n\n        long z2 \u003d x2 * y2;\n        long t \u003d x1 * y2 + (z2 \u003e\u003e\u003e 32);\n        long z1 \u003d t \u0026 0xFFFFFFFFL;\n        long z0 \u003d t \u003e\u003e 32;\n        z1 +\u003d x2 * y1;\n\n        return x1 * y1 + z0 + (z1 \u003e\u003e 32);\n    }\n\n    /**\n     * Returns as a {@code long} the most significant 64 bits of the unsigned\n     * 128-bit product of two unsigned 64-bit factors.\n     *\n     * @param x the first value\n     * @param y the second value\n     * @return the result\n     * @see #multiplyHigh\n     * @since 18\n     */\n    @IntrinsicCandidate\n    public static long unsignedMultiplyHigh(long x, long y) {\n        // Compute via multiplyHigh() to leverage the intrinsic\n        long result \u003d Math.multiplyHigh(x, y);\n        result +\u003d (y \u0026 (x \u003e\u003e 63)); // equivalent to `if (x \u003c 0) result +\u003d y;`\n        result +\u003d (x \u0026 (y \u003e\u003e 63)); // equivalent to `if (y \u003c 0) result +\u003d x;`\n        return result;\n    }\n\n    /**\n     * Returns the largest (closest to positive infinity)\n     * {@code int} value that is less than or equal to the algebraic quotient.\n     * There is one special case: if the dividend is\n     * {@linkplain Integer#MIN_VALUE Integer.MIN_VALUE} and the divisor is {@code -1},\n     * then integer overflow occurs and\n     * the result is equal to {@code Integer.MIN_VALUE}.\n     * \u003cp\u003e\n     * Normal integer division operates under the round to zero rounding mode\n     * (truncation).  This operation instead acts under the round toward\n     * negative infinity (floor) rounding mode.\n     * The floor rounding mode gives different results from truncation\n     * when the exact quotient is not an integer and is negative.\n     * \u003cul\u003e\n     *   \u003cli\u003eIf the signs of the arguments are the same, the results of\n     *       {@code floorDiv} and the {@code /} operator are the same.  \u003cbr\u003e\n     *       For example, {@code floorDiv(4, 3) \u003d\u003d 1} and {@code (4 / 3) \u003d\u003d 1}.\u003c/li\u003e\n     *   \u003cli\u003eIf the signs of the arguments are different, {@code floorDiv}\n     *       returns the largest integer less than or equal to the quotient\n     *       while the {@code /} operator returns the smallest integer greater\n     *       than or equal to the quotient.\n     *       They differ if and only if the quotient is not an integer.\u003cbr\u003e\n     *       For example, {@code floorDiv(-4, 3) \u003d\u003d -2},\n     *       whereas {@code (-4 / 3) \u003d\u003d -1}.\n     *   \u003c/li\u003e\n     * \u003c/ul\u003e\n     *\n     * @param x the dividend\n     * @param y the divisor\n     * @return the largest (closest to positive infinity)\n     * {@code int} value that is less than or equal to the algebraic quotient.\n     * @throws ArithmeticException if the divisor {@code y} is zero\n     * @see #floorMod(int, int)\n     * @see #floor(double)\n     * @since 1.8\n     */\n    public static int floorDiv(int x, int y) {\n        final int q \u003d x / y;\n        // if the signs are different and modulo not zero, round down\n        if ((x ^ y) \u003c 0 \u0026\u0026 (q * y !\u003d x)) {\n            return q - 1;\n        }\n        return q;\n    }\n\n    /**\n     * Returns the largest (closest to positive infinity)\n     * {@code long} value that is less than or equal to the algebraic quotient.\n     * There is one special case: if the dividend is\n     * {@linkplain Long#MIN_VALUE Long.MIN_VALUE} and the divisor is {@code -1},\n     * then integer overflow occurs and\n     * the result is equal to {@code Long.MIN_VALUE}.\n     * \u003cp\u003e\n     * Normal integer division operates under the round to zero rounding mode\n     * (truncation).  This operation instead acts under the round toward\n     * negative infinity (floor) rounding mode.\n     * The floor rounding mode gives different results from truncation\n     * when the exact result is not an integer and is negative.\n     * \u003cp\u003e\n     * For examples, see {@link #floorDiv(int, int)}.\n     *\n     * @param x the dividend\n     * @param y the divisor\n     * @return the largest (closest to positive infinity)\n     * {@code long} value that is less than or equal to the algebraic quotient.\n     * @throws ArithmeticException if the divisor {@code y} is zero\n     * @see #floorMod(long, int)\n     * @see #floor(double)\n     * @since 9\n     */\n    public static long floorDiv(long x, int y) {\n        return floorDiv(x, (long)y);\n    }\n\n    /**\n     * Returns the largest (closest to positive infinity)\n     * {@code long} value that is less than or equal to the algebraic quotient.\n     * There is one special case: if the dividend is\n     * {@linkplain Long#MIN_VALUE Long.MIN_VALUE} and the divisor is {@code -1},\n     * then integer overflow occurs and\n     * the result is equal to {@code Long.MIN_VALUE}.\n     * \u003cp\u003e\n     * Normal integer division operates under the round to zero rounding mode\n     * (truncation).  This operation instead acts under the round toward\n     * negative infinity (floor) rounding mode.\n     * The floor rounding mode gives different results from truncation\n     * when the exact result is not an integer and is negative.\n     * \u003cp\u003e\n     * For examples, see {@link #floorDiv(int, int)}.\n     *\n     * @param x the dividend\n     * @param y the divisor\n     * @return the largest (closest to positive infinity)\n     * {@code long} value that is less than or equal to the algebraic quotient.\n     * @throws ArithmeticException if the divisor {@code y} is zero\n     * @see #floorMod(long, long)\n     * @see #floor(double)\n     * @since 1.8\n     */\n    public static long floorDiv(long x, long y) {\n        final long q \u003d x / y;\n        // if the signs are different and modulo not zero, round down\n        if ((x ^ y) \u003c 0 \u0026\u0026 (q * y !\u003d x)) {\n            return q - 1;\n        }\n        return q;\n    }\n\n    /**\n     * Returns the floor modulus of the {@code int} arguments.\n     * \u003cp\u003e\n     * The floor modulus is {@code r \u003d x - (floorDiv(x, y) * y)},\n     * has the same sign as the divisor {@code y} or is zero, and\n     * is in the range of {@code -abs(y) \u003c r \u003c +abs(y)}.\n     *\n     * \u003cp\u003e\n     * The relationship between {@code floorDiv} and {@code floorMod} is such that:\n     * \u003cul\u003e\n     *   \u003cli\u003e{@code floorDiv(x, y) * y + floorMod(x, y) \u003d\u003d x}\u003c/li\u003e\n     * \u003c/ul\u003e\n     * \u003cp\u003e\n     * The difference in values between {@code floorMod} and the {@code %} operator\n     * is due to the difference between {@code floorDiv} and the {@code /}\n     * operator, as detailed in {@linkplain #floorDiv(int, int)}.\n     * \u003cp\u003e\n     * Examples:\n     * \u003cul\u003e\n     *   \u003cli\u003eRegardless of the signs of the arguments, {@code floorMod}(x, y)\n     *       is zero exactly when {@code x % y} is zero as well.\u003c/li\u003e\n     *   \u003cli\u003eIf neither {@code floorMod}(x, y) nor {@code x % y} is zero,\n     *       they differ exactly when the signs of the arguments differ.\u003cbr\u003e\n     *       \u003cul\u003e\n     *       \u003cli\u003e{@code floorMod(+4, +3) \u003d\u003d +1}; \u0026nbsp; and {@code (+4 % +3) \u003d\u003d +1}\u003c/li\u003e\n     *       \u003cli\u003e{@code floorMod(-4, -3) \u003d\u003d -1}; \u0026nbsp; and {@code (-4 % -3) \u003d\u003d -1}\u003c/li\u003e\n     *       \u003cli\u003e{@code floorMod(+4, -3) \u003d\u003d -2}; \u0026nbsp; and {@code (+4 % -3) \u003d\u003d +1}\u003c/li\u003e\n     *       \u003cli\u003e{@code floorMod(-4, +3) \u003d\u003d +2}; \u0026nbsp; and {@code (-4 % +3) \u003d\u003d -1}\u003c/li\u003e\n     *       \u003c/ul\u003e\n     *   \u003c/li\u003e\n     * \u003c/ul\u003e\n     *\n     * @param x the dividend\n     * @param y the divisor\n     * @return the floor modulus {@code x - (floorDiv(x, y) * y)}\n     * @throws ArithmeticException if the divisor {@code y} is zero\n     * @see #floorDiv(int, int)\n     * @since 1.8\n     */\n    public static int floorMod(int x, int y) {\n        final int r \u003d x % y;\n        // if the signs are different and modulo not zero, adjust result\n        if ((x ^ y) \u003c 0 \u0026\u0026 r !\u003d 0) {\n            return r + y;\n        }\n        return r;\n    }\n\n    /**\n     * Returns the floor modulus of the {@code long} and {@code int} arguments.\n     * \u003cp\u003e\n     * The floor modulus is {@code r \u003d x - (floorDiv(x, y) * y)},\n     * has the same sign as the divisor {@code y} or is zero, and\n     * is in the range of {@code -abs(y) \u003c r \u003c +abs(y)}.\n     *\n     * \u003cp\u003e\n     * The relationship between {@code floorDiv} and {@code floorMod} is such that:\n     * \u003cul\u003e\n     *   \u003cli\u003e{@code floorDiv(x, y) * y + floorMod(x, y) \u003d\u003d x}\u003c/li\u003e\n     * \u003c/ul\u003e\n     * \u003cp\u003e\n     * For examples, see {@link #floorMod(int, int)}.\n     *\n     * @param x the dividend\n     * @param y the divisor\n     * @return the floor modulus {@code x - (floorDiv(x, y) * y)}\n     * @throws ArithmeticException if the divisor {@code y} is zero\n     * @see #floorDiv(long, int)\n     * @since 9\n     */\n    public static int floorMod(long x, int y) {\n        // Result cannot overflow the range of int.\n        return (int)floorMod(x, (long)y);\n    }\n\n    /**\n     * Returns the floor modulus of the {@code long} arguments.\n     * \u003cp\u003e\n     * The floor modulus is {@code r \u003d x - (floorDiv(x, y) * y)},\n     * has the same sign as the divisor {@code y} or is zero, and\n     * is in the range of {@code -abs(y) \u003c r \u003c +abs(y)}.\n     *\n     * \u003cp\u003e\n     * The relationship between {@code floorDiv} and {@code floorMod} is such that:\n     * \u003cul\u003e\n     *   \u003cli\u003e{@code floorDiv(x, y) * y + floorMod(x, y) \u003d\u003d x}\u003c/li\u003e\n     * \u003c/ul\u003e\n     * \u003cp\u003e\n     * For examples, see {@link #floorMod(int, int)}.\n     *\n     * @param x the dividend\n     * @param y the divisor\n     * @return the floor modulus {@code x - (floorDiv(x, y) * y)}\n     * @throws ArithmeticException if the divisor {@code y} is zero\n     * @see #floorDiv(long, long)\n     * @since 1.8\n     */\n    public static long floorMod(long x, long y) {\n        final long r \u003d x % y;\n        // if the signs are different and modulo not zero, adjust result\n        if ((x ^ y) \u003c 0 \u0026\u0026 r !\u003d 0) {\n            return r + y;\n        }\n        return r;\n    }\n\n    /**\n     * Returns the smallest (closest to negative infinity)\n     * {@code int} value that is greater than or equal to the algebraic quotient.\n     * There is one special case: if the dividend is\n     * {@linkplain Integer#MIN_VALUE Integer.MIN_VALUE} and the divisor is {@code -1},\n     * then integer overflow occurs and\n     * the result is equal to {@code Integer.MIN_VALUE}.\n     * \u003cp\u003e\n     * Normal integer division operates under the round to zero rounding mode\n     * (truncation).  This operation instead acts under the round toward\n     * positive infinity (ceiling) rounding mode.\n     * The ceiling rounding mode gives different results from truncation\n     * when the exact quotient is not an integer and is positive.\n     * \u003cul\u003e\n     *   \u003cli\u003eIf the signs of the arguments are different, the results of\n     *       {@code ceilDiv} and the {@code /} operator are the same.  \u003cbr\u003e\n     *       For example, {@code ceilDiv(-4, 3) \u003d\u003d -1} and {@code (-4 / 3) \u003d\u003d -1}.\u003c/li\u003e\n     *   \u003cli\u003eIf the signs of the arguments are the same, {@code ceilDiv}\n     *       returns the smallest integer greater than or equal to the quotient\n     *       while the {@code /} operator returns the largest integer less\n     *       than or equal to the quotient.\n     *       They differ if and only if the quotient is not an integer.\u003cbr\u003e\n     *       For example, {@code ceilDiv(4, 3) \u003d\u003d 2},\n     *       whereas {@code (4 / 3) \u003d\u003d 1}.\n     *   \u003c/li\u003e\n     * \u003c/ul\u003e\n     *\n     * @param x the dividend\n     * @param y the divisor\n     * @return the smallest (closest to negative infinity)\n     * {@code int} value that is greater than or equal to the algebraic quotient.\n     * @throws ArithmeticException if the divisor {@code y} is zero\n     * @see #ceilMod(int, int)\n     * @see #ceil(double)\n     * @since 18\n     */\n    public static int ceilDiv(int x, int y) {\n        final int q \u003d x / y;\n        // if the signs are the same and modulo not zero, round up\n        if ((x ^ y) \u003e\u003d 0 \u0026\u0026 (q * y !\u003d x)) {\n            return q + 1;\n        }\n        return q;\n    }\n\n    /**\n     * Returns the smallest (closest to negative infinity)\n     * {@code long} value that is greater than or equal to the algebraic quotient.\n     * There is one special case: if the dividend is\n     * {@linkplain Long#MIN_VALUE Long.MIN_VALUE} and the divisor is {@code -1},\n     * then integer overflow occurs and\n     * the result is equal to {@code Long.MIN_VALUE}.\n     * \u003cp\u003e\n     * Normal integer division operates under the round to zero rounding mode\n     * (truncation).  This operation instead acts under the round toward\n     * positive infinity (ceiling) rounding mode.\n     * The ceiling rounding mode gives different results from truncation\n     * when the exact result is not an integer and is positive.\n     * \u003cp\u003e\n     * For examples, see {@link #ceilDiv(int, int)}.\n     *\n     * @param x the dividend\n     * @param y the divisor\n     * @return the smallest (closest to negative infinity)\n     * {@code long} value that is greater than or equal to the algebraic quotient.\n     * @throws ArithmeticException if the divisor {@code y} is zero\n     * @see #ceilMod(int, int)\n     * @see #ceil(double)\n     * @since 18\n     */\n    public static long ceilDiv(long x, int y) {\n        return ceilDiv(x, (long)y);\n    }\n\n    /**\n     * Returns the smallest (closest to negative infinity)\n     * {@code long} value that is greater than or equal to the algebraic quotient.\n     * There is one special case: if the dividend is\n     * {@linkplain Long#MIN_VALUE Long.MIN_VALUE} and the divisor is {@code -1},\n     * then integer overflow occurs and\n     * the result is equal to {@code Long.MIN_VALUE}.\n     * \u003cp\u003e\n     * Normal integer division operates under the round to zero rounding mode\n     * (truncation).  This operation instead acts under the round toward\n     * positive infinity (ceiling) rounding mode.\n     * The ceiling rounding mode gives different results from truncation\n     * when the exact result is not an integer and is positive.\n     * \u003cp\u003e\n     * For examples, see {@link #ceilDiv(int, int)}.\n     *\n     * @param x the dividend\n     * @param y the divisor\n     * @return the smallest (closest to negative infinity)\n     * {@code long} value that is greater than or equal to the algebraic quotient.\n     * @throws ArithmeticException if the divisor {@code y} is zero\n     * @see #ceilMod(int, int)\n     * @see #ceil(double)\n     * @since 18\n     */\n    public static long ceilDiv(long x, long y) {\n        final long q \u003d x / y;\n        // if the signs are the same and modulo not zero, round up\n        if ((x ^ y) \u003e\u003d 0 \u0026\u0026 (q * y !\u003d x)) {\n            return q + 1;\n        }\n        return q;\n    }\n\n    /**\n     * Returns the ceiling modulus of the {@code int} arguments.\n     * \u003cp\u003e\n     * The ceiling modulus is {@code r \u003d x - (ceilDiv(x, y) * y)},\n     * has the opposite sign as the divisor {@code y} or is zero, and\n     * is in the range of {@code -abs(y) \u003c r \u003c +abs(y)}.\n     *\n     * \u003cp\u003e\n     * The relationship between {@code ceilDiv} and {@code ceilMod} is such that:\n     * \u003cul\u003e\n     *   \u003cli\u003e{@code ceilDiv(x, y) * y + ceilMod(x, y) \u003d\u003d x}\u003c/li\u003e\n     * \u003c/ul\u003e\n     * \u003cp\u003e\n     * The difference in values between {@code ceilMod} and the {@code %} operator\n     * is due to the difference between {@code ceilDiv} and the {@code /}\n     * operator, as detailed in {@linkplain #ceilDiv(int, int)}.\n     * \u003cp\u003e\n     * Examples:\n     * \u003cul\u003e\n     *   \u003cli\u003eRegardless of the signs of the arguments, {@code ceilMod}(x, y)\n     *       is zero exactly when {@code x % y} is zero as well.\u003c/li\u003e\n     *   \u003cli\u003eIf neither {@code ceilMod}(x, y) nor {@code x % y} is zero,\n     *       they differ exactly when the signs of the arguments are the same.\u003cbr\u003e\n     *       \u003cul\u003e\n     *       \u003cli\u003e{@code ceilMod(+4, +3) \u003d\u003d -2}; \u0026nbsp; and {@code (+4 % +3) \u003d\u003d +1}\u003c/li\u003e\n     *       \u003cli\u003e{@code ceilMod(-4, -3) \u003d\u003d +2}; \u0026nbsp; and {@code (-4 % -3) \u003d\u003d -1}\u003c/li\u003e\n     *       \u003cli\u003e{@code ceilMod(+4, -3) \u003d\u003d +1}; \u0026nbsp; and {@code (+4 % -3) \u003d\u003d +1}\u003c/li\u003e\n     *       \u003cli\u003e{@code ceilMod(-4, +3) \u003d\u003d -1}; \u0026nbsp; and {@code (-4 % +3) \u003d\u003d -1}\u003c/li\u003e\n     *       \u003c/ul\u003e\n     *   \u003c/li\u003e\n     * \u003c/ul\u003e\n     *\n     * @param x the dividend\n     * @param y the divisor\n     * @return the ceiling modulus {@code x - (ceilDiv(x, y) * y)}\n     * @throws ArithmeticException if the divisor {@code y} is zero\n     * @see #ceilDiv(int, int)\n     * @since 18\n     */\n    public static int ceilMod(int x, int y) {\n        final int r \u003d x % y;\n        // if the signs are the same and modulo not zero, adjust result\n        if ((x ^ y) \u003e\u003d 0 \u0026\u0026 r !\u003d 0) {\n            return r - y;\n        }\n        return r;\n    }\n\n    /**\n     * Returns the ceiling modulus of the {@code long} and {@code int} arguments.\n     * \u003cp\u003e\n     * The ceiling modulus is {@code r \u003d x - (ceilDiv(x, y) * y)},\n     * has the opposite sign as the divisor {@code y} or is zero, and\n     * is in the range of {@code -abs(y) \u003c r \u003c +abs(y)}.\n     *\n     * \u003cp\u003e\n     * The relationship between {@code ceilDiv} and {@code ceilMod} is such that:\n     * \u003cul\u003e\n     *   \u003cli\u003e{@code ceilDiv(x, y) * y + ceilMod(x, y) \u003d\u003d x}\u003c/li\u003e\n     * \u003c/ul\u003e\n     * \u003cp\u003e\n     * For examples, see {@link #ceilMod(int, int)}.\n     *\n     * @param x the dividend\n     * @param y the divisor\n     * @return the ceiling modulus {@code x - (ceilDiv(x, y) * y)}\n     * @throws ArithmeticException if the divisor {@code y} is zero\n     * @see #ceilDiv(long, int)\n     * @since 18\n     */\n    public static int ceilMod(long x, int y) {\n        // Result cannot overflow the range of int.\n        return (int)ceilMod(x, (long)y);\n    }\n\n    /**\n     * Returns the ceiling modulus of the {@code long} arguments.\n     * \u003cp\u003e\n     * The ceiling modulus is {@code r \u003d x - (ceilDiv(x, y) * y)},\n     * has the opposite sign as the divisor {@code y} or is zero, and\n     * is in the range of {@code -abs(y) \u003c r \u003c +abs(y)}.\n     *\n     * \u003cp\u003e\n     * The relationship between {@code ceilDiv} and {@code ceilMod} is such that:\n     * \u003cul\u003e\n     *   \u003cli\u003e{@code ceilDiv(x, y) * y + ceilMod(x, y) \u003d\u003d x}\u003c/li\u003e\n     * \u003c/ul\u003e\n     * \u003cp\u003e\n     * For examples, see {@link #ceilMod(int, int)}.\n     *\n     * @param x the dividend\n     * @param y the divisor\n     * @return the ceiling modulus {@code x - (ceilDiv(x, y) * y)}\n     * @throws ArithmeticException if the divisor {@code y} is zero\n     * @see #ceilDiv(long, long)\n     * @since 18\n     */\n    public static long ceilMod(long x, long y) {\n        final long r \u003d x % y;\n        // if the signs are the same and modulo not zero, adjust result\n        if ((x ^ y) \u003e\u003d 0 \u0026\u0026 r !\u003d 0) {\n            return r - y;\n        }\n        return r;\n    }\n\n    /**\n     * Returns the absolute value of an {@code int} value.\n     * If the argument is not negative, the argument is returned.\n     * If the argument is negative, the negation of the argument is returned.\n     *\n     * \u003cp\u003eNote that if the argument is equal to the value of {@link\n     * Integer#MIN_VALUE}, the most negative representable {@code int}\n     * value, the result is that same value, which is negative. In\n     * contrast, the {@link Math#absExact(int)} method throws an\n     * {@code ArithmeticException} for this value.\n     *\n     * @param   a   the argument whose absolute value is to be determined\n     * @return  the absolute value of the argument.\n     * @see Math#absExact(int)\n     */\n    @IntrinsicCandidate\n    public static int abs(int a) {\n        return (a \u003c 0) ? -a : a;\n    }\n\n    /**\n     * Returns the mathematical absolute value of an {@code int} value\n     * if it is exactly representable as an {@code int}, throwing\n     * {@code ArithmeticException} if the result overflows the\n     * positive {@code int} range.\n     *\n     * \u003cp\u003eSince the range of two\u0027s complement integers is asymmetric\n     * with one additional negative value (JLS {@jls 4.2.1}), the\n     * mathematical absolute value of {@link Integer#MIN_VALUE}\n     * overflows the positive {@code int} range, so an exception is\n     * thrown for that argument.\n     *\n     * @param  a  the argument whose absolute value is to be determined\n     * @return the absolute value of the argument, unless overflow occurs\n     * @throws ArithmeticException if the argument is {@link Integer#MIN_VALUE}\n     * @see Math#abs(int)\n     * @since 15\n     */\n    public static int absExact(int a) {\n        if (a \u003d\u003d Integer.MIN_VALUE)\n            throw new ArithmeticException(\n                \"Overflow to represent absolute value of Integer.MIN_VALUE\");\n        else\n            return abs(a);\n    }\n\n    /**\n     * Returns the absolute value of a {@code long} value.\n     * If the argument is not negative, the argument is returned.\n     * If the argument is negative, the negation of the argument is returned.\n     *\n     * \u003cp\u003eNote that if the argument is equal to the value of {@link\n     * Long#MIN_VALUE}, the most negative representable {@code long}\n     * value, the result is that same value, which is negative. In\n     * contrast, the {@link Math#absExact(long)} method throws an\n     * {@code ArithmeticException} for this value.\n     *\n     * @param   a   the argument whose absolute value is to be determined\n     * @return  the absolute value of the argument.\n     * @see Math#absExact(long)\n     */\n    @IntrinsicCandidate\n    public static long abs(long a) {\n        return (a \u003c 0) ? -a : a;\n    }\n\n    /**\n     * Returns the mathematical absolute value of an {@code long} value\n     * if it is exactly representable as an {@code long}, throwing\n     * {@code ArithmeticException} if the result overflows the\n     * positive {@code long} range.\n     *\n     * \u003cp\u003eSince the range of two\u0027s complement integers is asymmetric\n     * with one additional negative value (JLS {@jls 4.2.1}), the\n     * mathematical absolute value of {@link Long#MIN_VALUE} overflows\n     * the positive {@code long} range, so an exception is thrown for\n     * that argument.\n     *\n     * @param  a  the argument whose absolute value is to be determined\n     * @return the absolute value of the argument, unless overflow occurs\n     * @throws ArithmeticException if the argument is {@link Long#MIN_VALUE}\n     * @see Math#abs(long)\n     * @since 15\n     */\n    public static long absExact(long a) {\n        if (a \u003d\u003d Long.MIN_VALUE)\n            throw new ArithmeticException(\n                \"Overflow to represent absolute value of Long.MIN_VALUE\");\n        else\n            return abs(a);\n    }\n\n    /**\n     * Returns the absolute value of a {@code float} value.\n     * If the argument is not negative, the argument is returned.\n     * If the argument is negative, the negation of the argument is returned.\n     * Special cases:\n     * \u003cul\u003e\u003cli\u003eIf the argument is positive zero or negative zero, the\n     * result is positive zero.\n     * \u003cli\u003eIf the argument is infinite, the result is positive infinity.\n     * \u003cli\u003eIf the argument is NaN, the result is NaN.\u003c/ul\u003e\n     *\n     * @apiNote As implied by the above, one valid implementation of\n     * this method is given by the expression below which computes a\n     * {@code float} with the same exponent and significand as the\n     * argument but with a guaranteed zero sign bit indicating a\n     * positive value:\u003cbr\u003e\n     * {@code Float.intBitsToFloat(0x7fffffff \u0026 Float.floatToRawIntBits(a))}\n     *\n     * @param   a   the argument whose absolute value is to be determined\n     * @return  the absolute value of the argument.\n     */\n    @IntrinsicCandidate\n    public static float abs(float a) {\n        // Convert to bit field form, zero the sign bit, and convert back\n        return Float.intBitsToFloat(Float.floatToRawIntBits(a) \u0026 FloatConsts.MAG_BIT_MASK);\n    }\n\n    /**\n     * Returns the absolute value of a {@code double} value.\n     * If the argument is not negative, the argument is returned.\n     * If the argument is negative, the negation of the argument is returned.\n     * Special cases:\n     * \u003cul\u003e\u003cli\u003eIf the argument is positive zero or negative zero, the result\n     * is positive zero.\n     * \u003cli\u003eIf the argument is infinite, the result is positive infinity.\n     * \u003cli\u003eIf the argument is NaN, the result is NaN.\u003c/ul\u003e\n     *\n     * @apiNote As implied by the above, one valid implementation of\n     * this method is given by the expression below which computes a\n     * {@code double} with the same exponent and significand as the\n     * argument but with a guaranteed zero sign bit indicating a\n     * positive value:\u003cbr\u003e\n     * {@code Double.longBitsToDouble((Double.doubleToRawLongBits(a)\u003c\u003c1)\u003e\u003e\u003e1)}\n     *\n     * @param   a   the argument whose absolute value is to be determined\n     * @return  the absolute value of the argument.\n     */\n    @IntrinsicCandidate\n    public static double abs(double a) {\n        // Convert to bit field form, zero the sign bit, and convert back\n        return Double.longBitsToDouble(Double.doubleToRawLongBits(a) \u0026 DoubleConsts.MAG_BIT_MASK);\n\n    }\n\n    /**\n     * Returns the greater of two {@code int} values. That is, the\n     * result is the argument closer to the value of\n     * {@link Integer#MAX_VALUE}. If the arguments have the same value,\n     * the result is that same value.\n     *\n     * @param   a   an argument.\n     * @param   b   another argument.\n     * @return  the larger of {@code a} and {@code b}.\n     */\n    @IntrinsicCandidate\n    public static int max(int a, int b) {\n        return (a \u003e\u003d b) ? a : b;\n    }\n\n    /**\n     * Returns the greater of two {@code long} values. That is, the\n     * result is the argument closer to the value of\n     * {@link Long#MAX_VALUE}. If the arguments have the same value,\n     * the result is that same value.\n     *\n     * @param   a   an argument.\n     * @param   b   another argument.\n     * @return  the larger of {@code a} and {@code b}.\n     */\n    public static long max(long a, long b) {\n        return (a \u003e\u003d b) ? a : b;\n    }\n\n    // Use raw bit-wise conversions on guaranteed non-NaN arguments.\n    private static final long negativeZeroFloatBits  \u003d Float.floatToRawIntBits(-0.0f);\n    private static final long negativeZeroDoubleBits \u003d Double.doubleToRawLongBits(-0.0d);\n\n    /**\n     * Returns the greater of two {@code float} values.  That is,\n     * the result is the argument closer to positive infinity. If the\n     * arguments have the same value, the result is that same\n     * value. If either value is NaN, then the result is NaN.  Unlike\n     * the numerical comparison operators, this method considers\n     * negative zero to be strictly smaller than positive zero. If one\n     * argument is positive zero and the other negative zero, the\n     * result is positive zero.\n     *\n     * @apiNote\n     * This method corresponds to the maximum operation defined in\n     * IEEE 754.\n     *\n     * @param   a   an argument.\n     * @param   b   another argument.\n     * @return  the larger of {@code a} and {@code b}.\n     */\n    @IntrinsicCandidate\n    public static float max(float a, float b) {\n        if (a !\u003d a)\n            return a;   // a is NaN\n        if ((a \u003d\u003d 0.0f) \u0026\u0026\n            (b \u003d\u003d 0.0f) \u0026\u0026\n            (Float.floatToRawIntBits(a) \u003d\u003d negativeZeroFloatBits)) {\n            // Raw conversion ok since NaN can\u0027t map to -0.0.\n            return b;\n        }\n        return (a \u003e\u003d b) ? a : b;\n    }\n\n    /**\n     * Returns the greater of two {@code double} values.  That\n     * is, the result is the argument closer to positive infinity. If\n     * the arguments have the same value, the result is that same\n     * value. If either value is NaN, then the result is NaN.  Unlike\n     * the numerical comparison operators, this method considers\n     * negative zero to be strictly smaller than positive zero. If one\n     * argument is positive zero and the other negative zero, the\n     * result is positive zero.\n     *\n     * @apiNote\n     * This method corresponds to the maximum operation defined in\n     * IEEE 754.\n     *\n     * @param   a   an argument.\n     * @param   b   another argument.\n     * @return  the larger of {@code a} and {@code b}.\n     */\n    @IntrinsicCandidate\n    public static double max(double a, double b) {\n        if (a !\u003d a)\n            return a;   // a is NaN\n        if ((a \u003d\u003d 0.0d) \u0026\u0026\n            (b \u003d\u003d 0.0d) \u0026\u0026\n            (Double.doubleToRawLongBits(a) \u003d\u003d negativeZeroDoubleBits)) {\n            // Raw conversion ok since NaN can\u0027t map to -0.0.\n            return b;\n        }\n        return (a \u003e\u003d b) ? a : b;\n    }\n\n    /**\n     * Returns the smaller of two {@code int} values. That is,\n     * the result the argument closer to the value of\n     * {@link Integer#MIN_VALUE}.  If the arguments have the same\n     * value, the result is that same value.\n     *\n     * @param   a   an argument.\n     * @param   b   another argument.\n     * @return  the smaller of {@code a} and {@code b}.\n     */\n    @IntrinsicCandidate\n    public static int min(int a, int b) {\n        return (a \u003c\u003d b) ? a : b;\n    }\n\n    /**\n     * Returns the smaller of two {@code long} values. That is,\n     * the result is the argument closer to the value of\n     * {@link Long#MIN_VALUE}. If the arguments have the same\n     * value, the result is that same value.\n     *\n     * @param   a   an argument.\n     * @param   b   another argument.\n     * @return  the smaller of {@code a} and {@code b}.\n     */\n    public static long min(long a, long b) {\n        return (a \u003c\u003d b) ? a : b;\n    }\n\n    /**\n     * Returns the smaller of two {@code float} values.  That is,\n     * the result is the value closer to negative infinity. If the\n     * arguments have the same value, the result is that same\n     * value. If either value is NaN, then the result is NaN.  Unlike\n     * the numerical comparison operators, this method considers\n     * negative zero to be strictly smaller than positive zero.  If\n     * one argument is positive zero and the other is negative zero,\n     * the result is negative zero.\n     *\n     * @apiNote\n     * This method corresponds to the minimum operation defined in\n     * IEEE 754.\n     *\n     * @param   a   an argument.\n     * @param   b   another argument.\n     * @return  the smaller of {@code a} and {@code b}.\n     */\n    @IntrinsicCandidate\n    public static float min(float a, float b) {\n        if (a !\u003d a)\n            return a;   // a is NaN\n        if ((a \u003d\u003d 0.0f) \u0026\u0026\n            (b \u003d\u003d 0.0f) \u0026\u0026\n            (Float.floatToRawIntBits(b) \u003d\u003d negativeZeroFloatBits)) {\n            // Raw conversion ok since NaN can\u0027t map to -0.0.\n            return b;\n        }\n        return (a \u003c\u003d b) ? a : b;\n    }\n\n    /**\n     * Returns the smaller of two {@code double} values.  That\n     * is, the result is the value closer to negative infinity. If the\n     * arguments have the same value, the result is that same\n     * value. If either value is NaN, then the result is NaN.  Unlike\n     * the numerical comparison operators, this method considers\n     * negative zero to be strictly smaller than positive zero. If one\n     * argument is positive zero and the other is negative zero, the\n     * result is negative zero.\n     *\n     * @apiNote\n     * This method corresponds to the minimum operation defined in\n     * IEEE 754.\n     *\n     * @param   a   an argument.\n     * @param   b   another argument.\n     * @return  the smaller of {@code a} and {@code b}.\n     */\n    @IntrinsicCandidate\n    public static double min(double a, double b) {\n        if (a !\u003d a)\n            return a;   // a is NaN\n        if ((a \u003d\u003d 0.0d) \u0026\u0026\n            (b \u003d\u003d 0.0d) \u0026\u0026\n            (Double.doubleToRawLongBits(b) \u003d\u003d negativeZeroDoubleBits)) {\n            // Raw conversion ok since NaN can\u0027t map to -0.0.\n            return b;\n        }\n        return (a \u003c\u003d b) ? a : b;\n    }\n\n    /**\n     * Returns the fused multiply add of the three arguments; that is,\n     * returns the exact product of the first two arguments summed\n     * with the third argument and then rounded once to the nearest\n     * {@code double}.\n     *\n     * The rounding is done using the {@linkplain\n     * java.math.RoundingMode#HALF_EVEN round to nearest even\n     * rounding mode}.\n     *\n     * In contrast, if {@code a * b + c} is evaluated as a regular\n     * floating-point expression, two rounding errors are involved,\n     * the first for the multiply operation, the second for the\n     * addition operation.\n     *\n     * \u003cp\u003eSpecial cases:\n     * \u003cul\u003e\n     * \u003cli\u003e If any argument is NaN, the result is NaN.\n     *\n     * \u003cli\u003e If one of the first two arguments is infinite and the\n     * other is zero, the result is NaN.\n     *\n     * \u003cli\u003e If the exact product of the first two arguments is infinite\n     * (in other words, at least one of the arguments is infinite and\n     * the other is neither zero nor NaN) and the third argument is an\n     * infinity of the opposite sign, the result is NaN.\n     *\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eNote that {@code fma(a, 1.0, c)} returns the same\n     * result as ({@code a + c}).  However,\n     * {@code fma(a, b, +0.0)} does \u003cem\u003enot\u003c/em\u003e always return the\n     * same result as ({@code a * b}) since\n     * {@code fma(-0.0, +0.0, +0.0)} is {@code +0.0} while\n     * ({@code -0.0 * +0.0}) is {@code -0.0}; {@code fma(a, b, -0.0)} is\n     * equivalent to ({@code a * b}) however.\n     *\n     * @apiNote This method corresponds to the fusedMultiplyAdd\n     * operation defined in IEEE 754.\n     *\n     * @param a a value\n     * @param b a value\n     * @param c a value\n     *\n     * @return (\u003ci\u003ea\u003c/i\u003e\u0026nbsp;\u0026times;\u0026nbsp;\u003ci\u003eb\u003c/i\u003e\u0026nbsp;+\u0026nbsp;\u003ci\u003ec\u003c/i\u003e)\n     * computed, as if with unlimited range and precision, and rounded\n     * once to the nearest {@code double} value\n     *\n     * @since 9\n     */\n    @IntrinsicCandidate\n    public static double fma(double a, double b, double c) {\n        /*\n         * Infinity and NaN arithmetic is not quite the same with two\n         * roundings as opposed to just one so the simple expression\n         * \"a * b + c\" cannot always be used to compute the correct\n         * result.  With two roundings, the product can overflow and\n         * if the addend is infinite, a spurious NaN can be produced\n         * if the infinity from the overflow and the infinite addend\n         * have opposite signs.\n         */\n\n        // First, screen for and handle non-finite input values whose\n        // arithmetic is not supported by BigDecimal.\n        if (Double.isNaN(a) || Double.isNaN(b) || Double.isNaN(c)) {\n            return Double.NaN;\n        } else { // All inputs non-NaN\n            boolean infiniteA \u003d Double.isInfinite(a);\n            boolean infiniteB \u003d Double.isInfinite(b);\n            boolean infiniteC \u003d Double.isInfinite(c);\n            double result;\n\n            if (infiniteA || infiniteB || infiniteC) {\n                if (infiniteA \u0026\u0026 b \u003d\u003d 0.0 ||\n                    infiniteB \u0026\u0026 a \u003d\u003d 0.0 ) {\n                    return Double.NaN;\n                }\n                double product \u003d a * b;\n                if (Double.isInfinite(product) \u0026\u0026 !infiniteA \u0026\u0026 !infiniteB) {\n                    // Intermediate overflow; might cause a\n                    // spurious NaN if added to infinite c.\n                    assert Double.isInfinite(c);\n                    return c;\n                } else {\n                    result \u003d product + c;\n                    assert !Double.isFinite(result);\n                    return result;\n                }\n            } else { // All inputs finite\n                BigDecimal product \u003d (new BigDecimal(a)).multiply(new BigDecimal(b));\n                if (c \u003d\u003d 0.0) { // Positive or negative zero\n                    // If the product is an exact zero, use a\n                    // floating-point expression to compute the sign\n                    // of the zero final result. The product is an\n                    // exact zero if and only if at least one of a and\n                    // b is zero.\n                    if (a \u003d\u003d 0.0 || b \u003d\u003d 0.0) {\n                        return a * b + c;\n                    } else {\n                        // The sign of a zero addend doesn\u0027t matter if\n                        // the product is nonzero. The sign of a zero\n                        // addend is not factored in the result if the\n                        // exact product is nonzero but underflows to\n                        // zero; see IEEE-754 2008 section 6.3 \"The\n                        // sign bit\".\n                        return product.doubleValue();\n                    }\n                } else {\n                    return product.add(new BigDecimal(c)).doubleValue();\n                }\n            }\n        }\n    }\n\n    /**\n     * Returns the fused multiply add of the three arguments; that is,\n     * returns the exact product of the first two arguments summed\n     * with the third argument and then rounded once to the nearest\n     * {@code float}.\n     *\n     * The rounding is done using the {@linkplain\n     * java.math.RoundingMode#HALF_EVEN round to nearest even\n     * rounding mode}.\n     *\n     * In contrast, if {@code a * b + c} is evaluated as a regular\n     * floating-point expression, two rounding errors are involved,\n     * the first for the multiply operation, the second for the\n     * addition operation.\n     *\n     * \u003cp\u003eSpecial cases:\n     * \u003cul\u003e\n     * \u003cli\u003e If any argument is NaN, the result is NaN.\n     *\n     * \u003cli\u003e If one of the first two arguments is infinite and the\n     * other is zero, the result is NaN.\n     *\n     * \u003cli\u003e If the exact product of the first two arguments is infinite\n     * (in other words, at least one of the arguments is infinite and\n     * the other is neither zero nor NaN) and the third argument is an\n     * infinity of the opposite sign, the result is NaN.\n     *\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eNote that {@code fma(a, 1.0f, c)} returns the same\n     * result as ({@code a + c}).  However,\n     * {@code fma(a, b, +0.0f)} does \u003cem\u003enot\u003c/em\u003e always return the\n     * same result as ({@code a * b}) since\n     * {@code fma(-0.0f, +0.0f, +0.0f)} is {@code +0.0f} while\n     * ({@code -0.0f * +0.0f}) is {@code -0.0f}; {@code fma(a, b, -0.0f)} is\n     * equivalent to ({@code a * b}) however.\n     *\n     * @apiNote This method corresponds to the fusedMultiplyAdd\n     * operation defined in IEEE 754.\n     *\n     * @param a a value\n     * @param b a value\n     * @param c a value\n     *\n     * @return (\u003ci\u003ea\u003c/i\u003e\u0026nbsp;\u0026times;\u0026nbsp;\u003ci\u003eb\u003c/i\u003e\u0026nbsp;+\u0026nbsp;\u003ci\u003ec\u003c/i\u003e)\n     * computed, as if with unlimited range and precision, and rounded\n     * once to the nearest {@code float} value\n     *\n     * @since 9\n     */\n    @IntrinsicCandidate\n    public static float fma(float a, float b, float c) {\n        if (Float.isFinite(a) \u0026\u0026 Float.isFinite(b) \u0026\u0026 Float.isFinite(c)) {\n            if (a \u003d\u003d 0.0 || b \u003d\u003d 0.0) {\n                return a * b + c; // Handled signed zero cases\n            } else {\n                return (new BigDecimal((double)a * (double)b) // Exact multiply\n                        .add(new BigDecimal((double)c)))      // Exact sum\n                    .floatValue();                            // One rounding\n                                                              // to a float value\n            }\n        } else {\n            // At least one of a,b, and c is non-finite. The result\n            // will be non-finite as well and will be the same\n            // non-finite value under double as float arithmetic.\n            return (float)fma((double)a, (double)b, (double)c);\n        }\n    }\n\n    /**\n     * Returns the size of an ulp of the argument.  An ulp, unit in\n     * the last place, of a {@code double} value is the positive\n     * distance between this floating-point value and the {@code\n     * double} value next larger in magnitude.  Note that for non-NaN\n     * \u003ci\u003ex\u003c/i\u003e, \u003ccode\u003eulp(-\u003ci\u003ex\u003c/i\u003e) \u003d\u003d ulp(\u003ci\u003ex\u003c/i\u003e)\u003c/code\u003e.\n     *\n     * \u003cp\u003eSpecial Cases:\n     * \u003cul\u003e\n     * \u003cli\u003e If the argument is NaN, then the result is NaN.\n     * \u003cli\u003e If the argument is positive or negative infinity, then the\n     * result is positive infinity.\n     * \u003cli\u003e If the argument is positive or negative zero, then the result is\n     * {@code Double.MIN_VALUE}.\n     * \u003cli\u003e If the argument is \u0026plusmn;{@code Double.MAX_VALUE}, then\n     * the result is equal to 2\u003csup\u003e971\u003c/sup\u003e.\n     * \u003c/ul\u003e\n     *\n     * @param d the floating-point value whose ulp is to be returned\n     * @return the size of an ulp of the argument\n     * @author Joseph D. Darcy\n     * @since 1.5\n     */\n    public static double ulp(double d) {\n        int exp \u003d getExponent(d);\n\n        return switch(exp) {\n            case Double.MAX_EXPONENT + 1 -\u003e Math.abs(d);      // NaN or infinity\n            case Double.MIN_EXPONENT - 1 -\u003e Double.MIN_VALUE; // zero or subnormal\n            default -\u003e {\n                assert exp \u003c\u003d Double.MAX_EXPONENT \u0026\u0026 exp \u003e\u003d Double.MIN_EXPONENT;\n\n                // ulp(x) is usually 2^(SIGNIFICAND_WIDTH-1)*(2^ilogb(x))\n                exp \u003d exp - (DoubleConsts.SIGNIFICAND_WIDTH - 1);\n                if (exp \u003e\u003d Double.MIN_EXPONENT) {\n                    yield powerOfTwoD(exp);\n                } else {\n                    // return a subnormal result; left shift integer\n                    // representation of Double.MIN_VALUE appropriate\n                    // number of positions\n                    yield Double.longBitsToDouble(1L \u003c\u003c\n                            (exp - (Double.MIN_EXPONENT - (DoubleConsts.SIGNIFICAND_WIDTH - 1))));\n                }\n            }\n        };\n    }\n\n    /**\n     * Returns the size of an ulp of the argument.  An ulp, unit in\n     * the last place, of a {@code float} value is the positive\n     * distance between this floating-point value and the {@code\n     * float} value next larger in magnitude.  Note that for non-NaN\n     * \u003ci\u003ex\u003c/i\u003e, \u003ccode\u003eulp(-\u003ci\u003ex\u003c/i\u003e) \u003d\u003d ulp(\u003ci\u003ex\u003c/i\u003e)\u003c/code\u003e.\n     *\n     * \u003cp\u003eSpecial Cases:\n     * \u003cul\u003e\n     * \u003cli\u003e If the argument is NaN, then the result is NaN.\n     * \u003cli\u003e If the argument is positive or negative infinity, then the\n     * result is positive infinity.\n     * \u003cli\u003e If the argument is positive or negative zero, then the result is\n     * {@code Float.MIN_VALUE}.\n     * \u003cli\u003e If the argument is \u0026plusmn;{@code Float.MAX_VALUE}, then\n     * the result is equal to 2\u003csup\u003e104\u003c/sup\u003e.\n     * \u003c/ul\u003e\n     *\n     * @param f the floating-point value whose ulp is to be returned\n     * @return the size of an ulp of the argument\n     * @author Joseph D. Darcy\n     * @since 1.5\n     */\n    public static float ulp(float f) {\n        int exp \u003d getExponent(f);\n\n        return switch(exp) {\n            case Float.MAX_EXPONENT + 1 -\u003e Math.abs(f);     // NaN or infinity\n            case Float.MIN_EXPONENT - 1 -\u003e Float.MIN_VALUE; // zero or subnormal\n            default -\u003e {\n                assert exp \u003c\u003d Float.MAX_EXPONENT \u0026\u0026 exp \u003e\u003d Float.MIN_EXPONENT;\n\n                // ulp(x) is usually 2^(SIGNIFICAND_WIDTH-1)*(2^ilogb(x))\n                exp \u003d exp - (FloatConsts.SIGNIFICAND_WIDTH - 1);\n                if (exp \u003e\u003d Float.MIN_EXPONENT) {\n                    yield powerOfTwoF(exp);\n                } else {\n                    // return a subnormal result; left shift integer\n                    // representation of FloatConsts.MIN_VALUE appropriate\n                    // number of positions\n                    yield Float.intBitsToFloat(1 \u003c\u003c\n                            (exp - (Float.MIN_EXPONENT - (FloatConsts.SIGNIFICAND_WIDTH - 1))));\n                }\n            }\n        };\n    }\n\n    /**\n     * Returns the signum function of the argument; zero if the argument\n     * is zero, 1.0 if the argument is greater than zero, -1.0 if the\n     * argument is less than zero.\n     *\n     * \u003cp\u003eSpecial Cases:\n     * \u003cul\u003e\n     * \u003cli\u003e If the argument is NaN, then the result is NaN.\n     * \u003cli\u003e If the argument is positive zero or negative zero, then the\n     *      result is the same as the argument.\n     * \u003c/ul\u003e\n     *\n     * @param d the floating-point value whose signum is to be returned\n     * @return the signum function of the argument\n     * @author Joseph D. Darcy\n     * @since 1.5\n     */\n    @IntrinsicCandidate\n    public static double signum(double d) {\n        return (d \u003d\u003d 0.0 || Double.isNaN(d))?d:copySign(1.0, d);\n    }\n\n    /**\n     * Returns the signum function of the argument; zero if the argument\n     * is zero, 1.0f if the argument is greater than zero, -1.0f if the\n     * argument is less than zero.\n     *\n     * \u003cp\u003eSpecial Cases:\n     * \u003cul\u003e\n     * \u003cli\u003e If the argument is NaN, then the result is NaN.\n     * \u003cli\u003e If the argument is positive zero or negative zero, then the\n     *      result is the same as the argument.\n     * \u003c/ul\u003e\n     *\n     * @param f the floating-point value whose signum is to be returned\n     * @return the signum function of the argument\n     * @author Joseph D. Darcy\n     * @since 1.5\n     */\n    @IntrinsicCandidate\n    public static float signum(float f) {\n        return (f \u003d\u003d 0.0f || Float.isNaN(f))?f:copySign(1.0f, f);\n    }\n\n    /**\n     * Returns the hyperbolic sine of a {@code double} value.\n     * The hyperbolic sine of \u003ci\u003ex\u003c/i\u003e is defined to be\n     * (\u003ci\u003ee\u003csup\u003ex\u003c/sup\u003e\u0026nbsp;-\u0026nbsp;e\u003csup\u003e-x\u003c/sup\u003e\u003c/i\u003e)/2\n     * where \u003ci\u003ee\u003c/i\u003e is {@linkplain Math#E Euler\u0027s number}.\n     *\n     * \u003cp\u003eSpecial cases:\n     * \u003cul\u003e\n     *\n     * \u003cli\u003eIf the argument is NaN, then the result is NaN.\n     *\n     * \u003cli\u003eIf the argument is infinite, then the result is an infinity\n     * with the same sign as the argument.\n     *\n     * \u003cli\u003eIf the argument is zero, then the result is a zero with the\n     * same sign as the argument.\n     *\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eThe computed result must be within 2.5 ulps of the exact result.\n     *\n     * @param   x The number whose hyperbolic sine is to be returned.\n     * @return  The hyperbolic sine of {@code x}.\n     * @since 1.5\n     */\n    public static double sinh(double x) {\n        return StrictMath.sinh(x);\n    }\n\n    /**\n     * Returns the hyperbolic cosine of a {@code double} value.\n     * The hyperbolic cosine of \u003ci\u003ex\u003c/i\u003e is defined to be\n     * (\u003ci\u003ee\u003csup\u003ex\u003c/sup\u003e\u0026nbsp;+\u0026nbsp;e\u003csup\u003e-x\u003c/sup\u003e\u003c/i\u003e)/2\n     * where \u003ci\u003ee\u003c/i\u003e is {@linkplain Math#E Euler\u0027s number}.\n     *\n     * \u003cp\u003eSpecial cases:\n     * \u003cul\u003e\n     *\n     * \u003cli\u003eIf the argument is NaN, then the result is NaN.\n     *\n     * \u003cli\u003eIf the argument is infinite, then the result is positive\n     * infinity.\n     *\n     * \u003cli\u003eIf the argument is zero, then the result is {@code 1.0}.\n     *\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eThe computed result must be within 2.5 ulps of the exact result.\n     *\n     * @param   x The number whose hyperbolic cosine is to be returned.\n     * @return  The hyperbolic cosine of {@code x}.\n     * @since 1.5\n     */\n    public static double cosh(double x) {\n        return StrictMath.cosh(x);\n    }\n\n    /**\n     * Returns the hyperbolic tangent of a {@code double} value.\n     * The hyperbolic tangent of \u003ci\u003ex\u003c/i\u003e is defined to be\n     * (\u003ci\u003ee\u003csup\u003ex\u003c/sup\u003e\u0026nbsp;-\u0026nbsp;e\u003csup\u003e-x\u003c/sup\u003e\u003c/i\u003e)/(\u003ci\u003ee\u003csup\u003ex\u003c/sup\u003e\u0026nbsp;+\u0026nbsp;e\u003csup\u003e-x\u003c/sup\u003e\u003c/i\u003e),\n     * in other words, {@linkplain Math#sinh\n     * sinh(\u003ci\u003ex\u003c/i\u003e)}/{@linkplain Math#cosh cosh(\u003ci\u003ex\u003c/i\u003e)}.  Note\n     * that the absolute value of the exact tanh is always less than\n     * 1.\n     *\n     * \u003cp\u003eSpecial cases:\n     * \u003cul\u003e\n     *\n     * \u003cli\u003eIf the argument is NaN, then the result is NaN.\n     *\n     * \u003cli\u003eIf the argument is zero, then the result is a zero with the\n     * same sign as the argument.\n     *\n     * \u003cli\u003eIf the argument is positive infinity, then the result is\n     * {@code +1.0}.\n     *\n     * \u003cli\u003eIf the argument is negative infinity, then the result is\n     * {@code -1.0}.\n     *\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eThe computed result must be within 2.5 ulps of the exact result.\n     * The result of {@code tanh} for any finite input must have\n     * an absolute value less than or equal to 1.  Note that once the\n     * exact result of tanh is within 1/2 of an ulp of the limit value\n     * of \u0026plusmn;1, correctly signed \u0026plusmn;{@code 1.0} should\n     * be returned.\n     *\n     * @param   x The number whose hyperbolic tangent is to be returned.\n     * @return  The hyperbolic tangent of {@code x}.\n     * @since 1.5\n     */\n    public static double tanh(double x) {\n        return StrictMath.tanh(x);\n    }\n\n    /**\n     * Returns sqrt(\u003ci\u003ex\u003c/i\u003e\u003csup\u003e2\u003c/sup\u003e\u0026nbsp;+\u003ci\u003ey\u003c/i\u003e\u003csup\u003e2\u003c/sup\u003e)\n     * without intermediate overflow or underflow.\n     *\n     * \u003cp\u003eSpecial cases:\n     * \u003cul\u003e\n     *\n     * \u003cli\u003e If either argument is infinite, then the result\n     * is positive infinity.\n     *\n     * \u003cli\u003e If either argument is NaN and neither argument is infinite,\n     * then the result is NaN.\n     *\n     * \u003cli\u003e If both arguments are zero, the result is positive zero.\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eThe computed result must be within 1 ulp of the exact\n     * result.  If one parameter is held constant, the results must be\n     * semi-monotonic in the other parameter.\n     *\n     * @param x a value\n     * @param y a value\n     * @return sqrt(\u003ci\u003ex\u003c/i\u003e\u003csup\u003e2\u003c/sup\u003e\u0026nbsp;+\u003ci\u003ey\u003c/i\u003e\u003csup\u003e2\u003c/sup\u003e)\n     * without intermediate overflow or underflow\n     * @since 1.5\n     */\n    public static double hypot(double x, double y) {\n        return StrictMath.hypot(x, y);\n    }\n\n    /**\n     * Returns \u003ci\u003ee\u003c/i\u003e\u003csup\u003ex\u003c/sup\u003e\u0026nbsp;-1.  Note that for values of\n     * \u003ci\u003ex\u003c/i\u003e near 0, the exact sum of\n     * {@code expm1(x)}\u0026nbsp;+\u0026nbsp;1 is much closer to the true\n     * result of \u003ci\u003ee\u003c/i\u003e\u003csup\u003ex\u003c/sup\u003e than {@code exp(x)}.\n     *\n     * \u003cp\u003eSpecial cases:\n     * \u003cul\u003e\n     * \u003cli\u003eIf the argument is NaN, the result is NaN.\n     *\n     * \u003cli\u003eIf the argument is positive infinity, then the result is\n     * positive infinity.\n     *\n     * \u003cli\u003eIf the argument is negative infinity, then the result is\n     * -1.0.\n     *\n     * \u003cli\u003eIf the argument is zero, then the result is a zero with the\n     * same sign as the argument.\n     *\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eThe computed result must be within 1 ulp of the exact result.\n     * Results must be semi-monotonic.  The result of\n     * {@code expm1} for any finite input must be greater than or\n     * equal to {@code -1.0}.  Note that once the exact result of\n     * \u003ci\u003ee\u003c/i\u003e\u003csup\u003e{@code x}\u003c/sup\u003e\u0026nbsp;-\u0026nbsp;1 is within 1/2\n     * ulp of the limit value -1, {@code -1.0} should be\n     * returned.\n     *\n     * @param   x   the exponent to raise \u003ci\u003ee\u003c/i\u003e to in the computation of\n     *              \u003ci\u003ee\u003c/i\u003e\u003csup\u003e{@code x}\u003c/sup\u003e\u0026nbsp;-1.\n     * @return  the value \u003ci\u003ee\u003c/i\u003e\u003csup\u003e{@code x}\u003c/sup\u003e\u0026nbsp;-\u0026nbsp;1.\n     * @since 1.5\n     */\n    public static double expm1(double x) {\n        return StrictMath.expm1(x);\n    }\n\n    /**\n     * Returns the natural logarithm of the sum of the argument and 1.\n     * Note that for small values {@code x}, the result of\n     * {@code log1p(x)} is much closer to the true result of ln(1\n     * + {@code x}) than the floating-point evaluation of\n     * {@code log(1.0+x)}.\n     *\n     * \u003cp\u003eSpecial cases:\n     *\n     * \u003cul\u003e\n     *\n     * \u003cli\u003eIf the argument is NaN or less than -1, then the result is\n     * NaN.\n     *\n     * \u003cli\u003eIf the argument is positive infinity, then the result is\n     * positive infinity.\n     *\n     * \u003cli\u003eIf the argument is negative one, then the result is\n     * negative infinity.\n     *\n     * \u003cli\u003eIf the argument is zero, then the result is a zero with the\n     * same sign as the argument.\n     *\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eThe computed result must be within 1 ulp of the exact result.\n     * Results must be semi-monotonic.\n     *\n     * @param   x   a value\n     * @return the value ln({@code x}\u0026nbsp;+\u0026nbsp;1), the natural\n     * log of {@code x}\u0026nbsp;+\u0026nbsp;1\n     * @since 1.5\n     */\n    public static double log1p(double x) {\n        return StrictMath.log1p(x);\n    }\n\n    /**\n     * Returns the first floating-point argument with the sign of the\n     * second floating-point argument.  Note that unlike the {@link\n     * StrictMath#copySign(double, double) StrictMath.copySign}\n     * method, this method does not require NaN {@code sign}\n     * arguments to be treated as positive values; implementations are\n     * permitted to treat some NaN arguments as positive and other NaN\n     * arguments as negative to allow greater performance.\n     *\n     * @apiNote\n     * This method corresponds to the copySign operation defined in\n     * IEEE 754.\n     *\n     * @param magnitude  the parameter providing the magnitude of the result\n     * @param sign   the parameter providing the sign of the result\n     * @return a value with the magnitude of {@code magnitude}\n     * and the sign of {@code sign}.\n     * @since 1.6\n     */\n    @IntrinsicCandidate\n    public static double copySign(double magnitude, double sign) {\n        return Double.longBitsToDouble((Double.doubleToRawLongBits(sign) \u0026\n                                        (DoubleConsts.SIGN_BIT_MASK)) |\n                                       (Double.doubleToRawLongBits(magnitude) \u0026\n                                        (DoubleConsts.EXP_BIT_MASK |\n                                         DoubleConsts.SIGNIF_BIT_MASK)));\n    }\n\n    /**\n     * Returns the first floating-point argument with the sign of the\n     * second floating-point argument.  Note that unlike the {@link\n     * StrictMath#copySign(float, float) StrictMath.copySign}\n     * method, this method does not require NaN {@code sign}\n     * arguments to be treated as positive values; implementations are\n     * permitted to treat some NaN arguments as positive and other NaN\n     * arguments as negative to allow greater performance.\n     *\n     * @apiNote\n     * This method corresponds to the copySign operation defined in\n     * IEEE 754.\n     *\n     * @param magnitude  the parameter providing the magnitude of the result\n     * @param sign   the parameter providing the sign of the result\n     * @return a value with the magnitude of {@code magnitude}\n     * and the sign of {@code sign}.\n     * @since 1.6\n     */\n    @IntrinsicCandidate\n    public static float copySign(float magnitude, float sign) {\n        return Float.intBitsToFloat((Float.floatToRawIntBits(sign) \u0026\n                                     (FloatConsts.SIGN_BIT_MASK)) |\n                                    (Float.floatToRawIntBits(magnitude) \u0026\n                                     (FloatConsts.EXP_BIT_MASK |\n                                      FloatConsts.SIGNIF_BIT_MASK)));\n    }\n\n    /**\n     * Returns the unbiased exponent used in the representation of a\n     * {@code float}.  Special cases:\n     *\n     * \u003cul\u003e\n     * \u003cli\u003eIf the argument is NaN or infinite, then the result is\n     * {@link Float#MAX_EXPONENT} + 1.\n     * \u003cli\u003eIf the argument is zero or subnormal, then the result is\n     * {@link Float#MIN_EXPONENT} - 1.\n     * \u003c/ul\u003e\n     * @apiNote\n     * This method is analogous to the logB operation defined in IEEE\n     * 754, but returns a different value on subnormal arguments.\n     *\n     * @param f a {@code float} value\n     * @return the unbiased exponent of the argument\n     * @since 1.6\n     */\n    public static int getExponent(float f) {\n        /*\n         * Bitwise convert f to integer, mask out exponent bits, shift\n         * to the right and then subtract out float\u0027s bias adjust to\n         * get true exponent value\n         */\n        return ((Float.floatToRawIntBits(f) \u0026 FloatConsts.EXP_BIT_MASK) \u003e\u003e\n                (FloatConsts.SIGNIFICAND_WIDTH - 1)) - FloatConsts.EXP_BIAS;\n    }\n\n    /**\n     * Returns the unbiased exponent used in the representation of a\n     * {@code double}.  Special cases:\n     *\n     * \u003cul\u003e\n     * \u003cli\u003eIf the argument is NaN or infinite, then the result is\n     * {@link Double#MAX_EXPONENT} + 1.\n     * \u003cli\u003eIf the argument is zero or subnormal, then the result is\n     * {@link Double#MIN_EXPONENT} - 1.\n     * \u003c/ul\u003e\n     * @apiNote\n     * This method is analogous to the logB operation defined in IEEE\n     * 754, but returns a different value on subnormal arguments.\n     *\n     * @param d a {@code double} value\n     * @return the unbiased exponent of the argument\n     * @since 1.6\n     */\n    public static int getExponent(double d) {\n        /*\n         * Bitwise convert d to long, mask out exponent bits, shift\n         * to the right and then subtract out double\u0027s bias adjust to\n         * get true exponent value.\n         */\n        return (int)(((Double.doubleToRawLongBits(d) \u0026 DoubleConsts.EXP_BIT_MASK) \u003e\u003e\n                      (DoubleConsts.SIGNIFICAND_WIDTH - 1)) - DoubleConsts.EXP_BIAS);\n    }\n\n    /**\n     * Returns the floating-point number adjacent to the first\n     * argument in the direction of the second argument.  If both\n     * arguments compare as equal the second argument is returned.\n     *\n     * \u003cp\u003e\n     * Special cases:\n     * \u003cul\u003e\n     * \u003cli\u003e If either argument is a NaN, then NaN is returned.\n     *\n     * \u003cli\u003e If both arguments are signed zeros, {@code direction}\n     * is returned unchanged (as implied by the requirement of\n     * returning the second argument if the arguments compare as\n     * equal).\n     *\n     * \u003cli\u003e If {@code start} is\n     * \u0026plusmn;{@link Double#MIN_VALUE} and {@code direction}\n     * has a value such that the result should have a smaller\n     * magnitude, then a zero with the same sign as {@code start}\n     * is returned.\n     *\n     * \u003cli\u003e If {@code start} is infinite and\n     * {@code direction} has a value such that the result should\n     * have a smaller magnitude, {@link Double#MAX_VALUE} with the\n     * same sign as {@code start} is returned.\n     *\n     * \u003cli\u003e If {@code start} is equal to \u0026plusmn;\n     * {@link Double#MAX_VALUE} and {@code direction} has a\n     * value such that the result should have a larger magnitude, an\n     * infinity with same sign as {@code start} is returned.\n     * \u003c/ul\u003e\n     *\n     * @param start  starting floating-point value\n     * @param direction value indicating which of\n     * {@code start}\u0027s neighbors or {@code start} should\n     * be returned\n     * @return The floating-point number adjacent to {@code start} in the\n     * direction of {@code direction}.\n     * @since 1.6\n     */\n    public static double nextAfter(double start, double direction) {\n        /*\n         * The cases:\n         *\n         * nextAfter(+infinity, 0)  \u003d\u003d MAX_VALUE\n         * nextAfter(+infinity, +infinity)  \u003d\u003d +infinity\n         * nextAfter(-infinity, 0)  \u003d\u003d -MAX_VALUE\n         * nextAfter(-infinity, -infinity)  \u003d\u003d -infinity\n         *\n         * are naturally handled without any additional testing\n         */\n\n        /*\n         * IEEE 754 floating-point numbers are lexicographically\n         * ordered if treated as signed-magnitude integers.\n         * Since Java\u0027s integers are two\u0027s complement,\n         * incrementing the two\u0027s complement representation of a\n         * logically negative floating-point value *decrements*\n         * the signed-magnitude representation. Therefore, when\n         * the integer representation of a floating-point value\n         * is negative, the adjustment to the representation is in\n         * the opposite direction from what would initially be expected.\n         */\n\n        // Branch to descending case first as it is more costly than ascending\n        // case due to start !\u003d 0.0d conditional.\n        if (start \u003e direction) { // descending\n            if (start !\u003d 0.0d) {\n                final long transducer \u003d Double.doubleToRawLongBits(start);\n                return Double.longBitsToDouble(transducer + ((transducer \u003e 0L) ? -1L : 1L));\n            } else { // start \u003d\u003d 0.0d \u0026\u0026 direction \u003c 0.0d\n                return -Double.MIN_VALUE;\n            }\n        } else if (start \u003c direction) { // ascending\n            // Add +0.0 to get rid of a -0.0 (+0.0 + -0.0 \u003d\u003e +0.0)\n            // then bitwise convert start to integer.\n            final long transducer \u003d Double.doubleToRawLongBits(start + 0.0d);\n            return Double.longBitsToDouble(transducer + ((transducer \u003e\u003d 0L) ? 1L : -1L));\n        } else if (start \u003d\u003d direction) {\n            return direction;\n        } else { // isNaN(start) || isNaN(direction)\n            return start + direction;\n        }\n    }\n\n    /**\n     * Returns the floating-point number adjacent to the first\n     * argument in the direction of the second argument.  If both\n     * arguments compare as equal a value equivalent to the second argument\n     * is returned.\n     *\n     * \u003cp\u003e\n     * Special cases:\n     * \u003cul\u003e\n     * \u003cli\u003e If either argument is a NaN, then NaN is returned.\n     *\n     * \u003cli\u003e If both arguments are signed zeros, a value equivalent\n     * to {@code direction} is returned.\n     *\n     * \u003cli\u003e If {@code start} is\n     * \u0026plusmn;{@link Float#MIN_VALUE} and {@code direction}\n     * has a value such that the result should have a smaller\n     * magnitude, then a zero with the same sign as {@code start}\n     * is returned.\n     *\n     * \u003cli\u003e If {@code start} is infinite and\n     * {@code direction} has a value such that the result should\n     * have a smaller magnitude, {@link Float#MAX_VALUE} with the\n     * same sign as {@code start} is returned.\n     *\n     * \u003cli\u003e If {@code start} is equal to \u0026plusmn;\n     * {@link Float#MAX_VALUE} and {@code direction} has a\n     * value such that the result should have a larger magnitude, an\n     * infinity with same sign as {@code start} is returned.\n     * \u003c/ul\u003e\n     *\n     * @param start  starting floating-point value\n     * @param direction value indicating which of\n     * {@code start}\u0027s neighbors or {@code start} should\n     * be returned\n     * @return The floating-point number adjacent to {@code start} in the\n     * direction of {@code direction}.\n     * @since 1.6\n     */\n    public static float nextAfter(float start, double direction) {\n        /*\n         * The cases:\n         *\n         * nextAfter(+infinity, 0)  \u003d\u003d MAX_VALUE\n         * nextAfter(+infinity, +infinity)  \u003d\u003d +infinity\n         * nextAfter(-infinity, 0)  \u003d\u003d -MAX_VALUE\n         * nextAfter(-infinity, -infinity)  \u003d\u003d -infinity\n         *\n         * are naturally handled without any additional testing\n         */\n\n        /*\n         * IEEE 754 floating-point numbers are lexicographically\n         * ordered if treated as signed-magnitude integers.\n         * Since Java\u0027s integers are two\u0027s complement,\n         * incrementing the two\u0027s complement representation of a\n         * logically negative floating-point value *decrements*\n         * the signed-magnitude representation. Therefore, when\n         * the integer representation of a floating-point value\n         * is negative, the adjustment to the representation is in\n         * the opposite direction from what would initially be expected.\n         */\n\n        // Branch to descending case first as it is more costly than ascending\n        // case due to start !\u003d 0.0f conditional.\n        if (start \u003e direction) { // descending\n            if (start !\u003d 0.0f) {\n                final int transducer \u003d Float.floatToRawIntBits(start);\n                return Float.intBitsToFloat(transducer + ((transducer \u003e 0) ? -1 : 1));\n            } else { // start \u003d\u003d 0.0f \u0026\u0026 direction \u003c 0.0f\n                return -Float.MIN_VALUE;\n            }\n        } else if (start \u003c direction) { // ascending\n            // Add +0.0 to get rid of a -0.0 (+0.0 + -0.0 \u003d\u003e +0.0)\n            // then bitwise convert start to integer.\n            final int transducer \u003d Float.floatToRawIntBits(start + 0.0f);\n            return Float.intBitsToFloat(transducer + ((transducer \u003e\u003d 0) ? 1 : -1));\n        } else if (start \u003d\u003d direction) {\n            return (float)direction;\n        } else { // isNaN(start) || isNaN(direction)\n            return start + (float)direction;\n        }\n    }\n\n    /**\n     * Returns the floating-point value adjacent to {@code d} in\n     * the direction of positive infinity.  This method is\n     * semantically equivalent to {@code nextAfter(d,\n     * Double.POSITIVE_INFINITY)}; however, a {@code nextUp}\n     * implementation may run faster than its equivalent\n     * {@code nextAfter} call.\n     *\n     * \u003cp\u003eSpecial Cases:\n     * \u003cul\u003e\n     * \u003cli\u003e If the argument is NaN, the result is NaN.\n     *\n     * \u003cli\u003e If the argument is positive infinity, the result is\n     * positive infinity.\n     *\n     * \u003cli\u003e If the argument is zero, the result is\n     * {@link Double#MIN_VALUE}\n     *\n     * \u003c/ul\u003e\n     *\n     * @apiNote This method corresponds to the nextUp\n     * operation defined in IEEE 754.\n     *\n     * @param d starting floating-point value\n     * @return The adjacent floating-point value closer to positive\n     * infinity.\n     * @since 1.6\n     */\n    public static double nextUp(double d) {\n        // Use a single conditional and handle the likely cases first.\n        if (d \u003c Double.POSITIVE_INFINITY) {\n            // Add +0.0 to get rid of a -0.0 (+0.0 + -0.0 \u003d\u003e +0.0).\n            final long transducer \u003d Double.doubleToRawLongBits(d + 0.0D);\n            return Double.longBitsToDouble(transducer + ((transducer \u003e\u003d 0L) ? 1L : -1L));\n        } else { // d is NaN or +Infinity\n            return d;\n        }\n    }\n\n    /**\n     * Returns the floating-point value adjacent to {@code f} in\n     * the direction of positive infinity.  This method is\n     * semantically equivalent to {@code nextAfter(f,\n     * Float.POSITIVE_INFINITY)}; however, a {@code nextUp}\n     * implementation may run faster than its equivalent\n     * {@code nextAfter} call.\n     *\n     * \u003cp\u003eSpecial Cases:\n     * \u003cul\u003e\n     * \u003cli\u003e If the argument is NaN, the result is NaN.\n     *\n     * \u003cli\u003e If the argument is positive infinity, the result is\n     * positive infinity.\n     *\n     * \u003cli\u003e If the argument is zero, the result is\n     * {@link Float#MIN_VALUE}\n     *\n     * \u003c/ul\u003e\n     *\n     * @apiNote This method corresponds to the nextUp\n     * operation defined in IEEE 754.\n     *\n     * @param f starting floating-point value\n     * @return The adjacent floating-point value closer to positive\n     * infinity.\n     * @since 1.6\n     */\n    public static float nextUp(float f) {\n        // Use a single conditional and handle the likely cases first.\n        if (f \u003c Float.POSITIVE_INFINITY) {\n            // Add +0.0 to get rid of a -0.0 (+0.0 + -0.0 \u003d\u003e +0.0).\n            final int transducer \u003d Float.floatToRawIntBits(f + 0.0F);\n            return Float.intBitsToFloat(transducer + ((transducer \u003e\u003d 0) ? 1 : -1));\n        } else { // f is NaN or +Infinity\n            return f;\n        }\n    }\n\n    /**\n     * Returns the floating-point value adjacent to {@code d} in\n     * the direction of negative infinity.  This method is\n     * semantically equivalent to {@code nextAfter(d,\n     * Double.NEGATIVE_INFINITY)}; however, a\n     * {@code nextDown} implementation may run faster than its\n     * equivalent {@code nextAfter} call.\n     *\n     * \u003cp\u003eSpecial Cases:\n     * \u003cul\u003e\n     * \u003cli\u003e If the argument is NaN, the result is NaN.\n     *\n     * \u003cli\u003e If the argument is negative infinity, the result is\n     * negative infinity.\n     *\n     * \u003cli\u003e If the argument is zero, the result is\n     * {@code -Double.MIN_VALUE}\n     *\n     * \u003c/ul\u003e\n     *\n     * @apiNote This method corresponds to the nextDown\n     * operation defined in IEEE 754.\n     *\n     * @param d  starting floating-point value\n     * @return The adjacent floating-point value closer to negative\n     * infinity.\n     * @since 1.8\n     */\n    public static double nextDown(double d) {\n        if (Double.isNaN(d) || d \u003d\u003d Double.NEGATIVE_INFINITY)\n            return d;\n        else {\n            if (d \u003d\u003d 0.0)\n                return -Double.MIN_VALUE;\n            else\n                return Double.longBitsToDouble(Double.doubleToRawLongBits(d) +\n                                               ((d \u003e 0.0d)?-1L:+1L));\n        }\n    }\n\n    /**\n     * Returns the floating-point value adjacent to {@code f} in\n     * the direction of negative infinity.  This method is\n     * semantically equivalent to {@code nextAfter(f,\n     * Float.NEGATIVE_INFINITY)}; however, a\n     * {@code nextDown} implementation may run faster than its\n     * equivalent {@code nextAfter} call.\n     *\n     * \u003cp\u003eSpecial Cases:\n     * \u003cul\u003e\n     * \u003cli\u003e If the argument is NaN, the result is NaN.\n     *\n     * \u003cli\u003e If the argument is negative infinity, the result is\n     * negative infinity.\n     *\n     * \u003cli\u003e If the argument is zero, the result is\n     * {@code -Float.MIN_VALUE}\n     *\n     * \u003c/ul\u003e\n     *\n     * @apiNote This method corresponds to the nextDown\n     * operation defined in IEEE 754.\n     *\n     * @param f  starting floating-point value\n     * @return The adjacent floating-point value closer to negative\n     * infinity.\n     * @since 1.8\n     */\n    public static float nextDown(float f) {\n        if (Float.isNaN(f) || f \u003d\u003d Float.NEGATIVE_INFINITY)\n            return f;\n        else {\n            if (f \u003d\u003d 0.0f)\n                return -Float.MIN_VALUE;\n            else\n                return Float.intBitsToFloat(Float.floatToRawIntBits(f) +\n                                            ((f \u003e 0.0f)?-1:+1));\n        }\n    }\n\n    /**\n     * Returns {@code d} \u0026times; 2\u003csup\u003e{@code scaleFactor}\u003c/sup\u003e\n     * rounded as if performed by a single correctly rounded\n     * floating-point multiply.  If the exponent of the result is\n     * between {@link Double#MIN_EXPONENT} and {@link\n     * Double#MAX_EXPONENT}, the answer is calculated exactly.  If the\n     * exponent of the result would be larger than {@code\n     * Double.MAX_EXPONENT}, an infinity is returned.  Note that if\n     * the result is subnormal, precision may be lost; that is, when\n     * {@code scalb(x, n)} is subnormal, {@code scalb(scalb(x, n),\n     * -n)} may not equal \u003ci\u003ex\u003c/i\u003e.  When the result is non-NaN, the\n     * result has the same sign as {@code d}.\n     *\n     * \u003cp\u003eSpecial cases:\n     * \u003cul\u003e\n     * \u003cli\u003e If the first argument is NaN, NaN is returned.\n     * \u003cli\u003e If the first argument is infinite, then an infinity of the\n     * same sign is returned.\n     * \u003cli\u003e If the first argument is zero, then a zero of the same\n     * sign is returned.\n     * \u003c/ul\u003e\n     *\n     * @apiNote This method corresponds to the scaleB operation\n     * defined in IEEE 754.\n     *\n     * @param d number to be scaled by a power of two.\n     * @param scaleFactor power of 2 used to scale {@code d}\n     * @return {@code d} \u0026times; 2\u003csup\u003e{@code scaleFactor}\u003c/sup\u003e\n     * @since 1.6\n     */\n    public static double scalb(double d, int scaleFactor) {\n        /*\n         * When scaling up, it does not matter what order the\n         * multiply-store operations are done; the result will be\n         * finite or overflow regardless of the operation ordering.\n         * However, to get the correct result when scaling down, a\n         * particular ordering must be used.\n         *\n         * When scaling down, the multiply-store operations are\n         * sequenced so that it is not possible for two consecutive\n         * multiply-stores to return subnormal results.  If one\n         * multiply-store result is subnormal, the next multiply will\n         * round it away to zero.  This is done by first multiplying\n         * by 2 ^ (scaleFactor % n) and then multiplying several\n         * times by 2^n as needed where n is the exponent of number\n         * that is a convenient power of two.  In this way, at most one\n         * real rounding error occurs.\n         */\n\n        // magnitude of a power of two so large that scaling a finite\n        // nonzero value by it would be guaranteed to over or\n        // underflow; due to rounding, scaling down takes an\n        // additional power of two which is reflected here\n        final int MAX_SCALE \u003d Double.MAX_EXPONENT + -Double.MIN_EXPONENT +\n                              DoubleConsts.SIGNIFICAND_WIDTH + 1;\n        int exp_adjust \u003d 0;\n        int scale_increment \u003d 0;\n        double exp_delta \u003d Double.NaN;\n\n        // Make sure scaling factor is in a reasonable range\n\n        if(scaleFactor \u003c 0) {\n            scaleFactor \u003d Math.max(scaleFactor, -MAX_SCALE);\n            scale_increment \u003d -512;\n            exp_delta \u003d twoToTheDoubleScaleDown;\n        }\n        else {\n            scaleFactor \u003d Math.min(scaleFactor, MAX_SCALE);\n            scale_increment \u003d 512;\n            exp_delta \u003d twoToTheDoubleScaleUp;\n        }\n\n        // Calculate (scaleFactor % +/-512), 512 \u003d 2^9, using\n        // technique from \"Hacker\u0027s Delight\" section 10-2.\n        int t \u003d (scaleFactor \u003e\u003e 9-1) \u003e\u003e\u003e 32 - 9;\n        exp_adjust \u003d ((scaleFactor + t) \u0026 (512 -1)) - t;\n\n        d *\u003d powerOfTwoD(exp_adjust);\n        scaleFactor -\u003d exp_adjust;\n\n        while(scaleFactor !\u003d 0) {\n            d *\u003d exp_delta;\n            scaleFactor -\u003d scale_increment;\n        }\n        return d;\n    }\n\n    /**\n     * Returns {@code f} \u0026times; 2\u003csup\u003e{@code scaleFactor}\u003c/sup\u003e\n     * rounded as if performed by a single correctly rounded\n     * floating-point multiply.  If the exponent of the result is\n     * between {@link Float#MIN_EXPONENT} and {@link\n     * Float#MAX_EXPONENT}, the answer is calculated exactly.  If the\n     * exponent of the result would be larger than {@code\n     * Float.MAX_EXPONENT}, an infinity is returned.  Note that if the\n     * result is subnormal, precision may be lost; that is, when\n     * {@code scalb(x, n)} is subnormal, {@code scalb(scalb(x, n),\n     * -n)} may not equal \u003ci\u003ex\u003c/i\u003e.  When the result is non-NaN, the\n     * result has the same sign as {@code f}.\n     *\n     * \u003cp\u003eSpecial cases:\n     * \u003cul\u003e\n     * \u003cli\u003e If the first argument is NaN, NaN is returned.\n     * \u003cli\u003e If the first argument is infinite, then an infinity of the\n     * same sign is returned.\n     * \u003cli\u003e If the first argument is zero, then a zero of the same\n     * sign is returned.\n     * \u003c/ul\u003e\n     *\n     * @apiNote This method corresponds to the scaleB operation\n     * defined in IEEE 754.\n     *\n     * @param f number to be scaled by a power of two.\n     * @param scaleFactor power of 2 used to scale {@code f}\n     * @return {@code f} \u0026times; 2\u003csup\u003e{@code scaleFactor}\u003c/sup\u003e\n     * @since 1.6\n     */\n    public static float scalb(float f, int scaleFactor) {\n        // magnitude of a power of two so large that scaling a finite\n        // nonzero value by it would be guaranteed to over or\n        // underflow; due to rounding, scaling down takes an\n        // additional power of two which is reflected here\n        final int MAX_SCALE \u003d Float.MAX_EXPONENT + -Float.MIN_EXPONENT +\n                              FloatConsts.SIGNIFICAND_WIDTH + 1;\n\n        // Make sure scaling factor is in a reasonable range\n        scaleFactor \u003d Math.max(Math.min(scaleFactor, MAX_SCALE), -MAX_SCALE);\n\n        /*\n         * Since + MAX_SCALE for float fits well within the double\n         * exponent range and + float -\u003e double conversion is exact\n         * the multiplication below will be exact. Therefore, the\n         * rounding that occurs when the double product is cast to\n         * float will be the correctly rounded float result.\n         */\n        return (float)((double)f*powerOfTwoD(scaleFactor));\n    }\n\n    // Constants used in scalb\n    static double twoToTheDoubleScaleUp \u003d powerOfTwoD(512);\n    static double twoToTheDoubleScaleDown \u003d powerOfTwoD(-512);\n\n    /**\n     * Returns a floating-point power of two in the normal range.\n     */\n    static double powerOfTwoD(int n) {\n        assert(n \u003e\u003d Double.MIN_EXPONENT \u0026\u0026 n \u003c\u003d Double.MAX_EXPONENT);\n        return Double.longBitsToDouble((((long)n + (long)DoubleConsts.EXP_BIAS) \u003c\u003c\n                                        (DoubleConsts.SIGNIFICAND_WIDTH-1))\n                                       \u0026 DoubleConsts.EXP_BIT_MASK);\n    }\n\n    /**\n     * Returns a floating-point power of two in the normal range.\n     */\n    static float powerOfTwoF(int n) {\n        assert(n \u003e\u003d Float.MIN_EXPONENT \u0026\u0026 n \u003c\u003d Float.MAX_EXPONENT);\n        return Float.intBitsToFloat(((n + FloatConsts.EXP_BIAS) \u003c\u003c\n                                     (FloatConsts.SIGNIFICAND_WIDTH-1))\n                                    \u0026 FloatConsts.EXP_BIT_MASK);\n    }\n}\n"
    }
  }
}
java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-20/lib/src.zip!/java.base/java/lang/Math.java
	at java.base/java.net.URI.create(URI.java:911)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:178)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:175)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:175)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:756)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:753)
	at scala.meta.internal.metals.WorkspaceLspService.didOpen(WorkspaceLspService.scala:389)
	at scala.meta.metals.lsp.DelegatingScalaService.didOpen(DelegatingScalaService.scala:39)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$recursiveFindRpcMethods$0(GenericEndpoint.java:65)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:160)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:231)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:198)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:185)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:97)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:114)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:577)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1623)
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-20/lib/src.zip!/java.base/java/lang/Math.java
	at java.base/java.net.URI$Parser.fail(URI.java:2963)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3134)
	at java.base/java.net.URI$Parser.parse(URI.java:3170)
	at java.base/java.net.URI.<init>(URI.java:628)
	at java.base/java.net.URI.create(URI.java:909)
	... 22 more

Jul 30, 2024 3:57:40 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didClose",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-20/lib/src.zip%21/java.base/java/lang/Math.java"
    }
  }
}
java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-20/lib/src.zip!/java.base/java/lang/Math.java
	at java.base/java.net.URI.create(URI.java:911)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:178)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:175)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:175)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:756)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:753)
	at scala.meta.internal.metals.WorkspaceLspService.didClose(WorkspaceLspService.scala:408)
	at scala.meta.metals.lsp.DelegatingScalaService.didClose(DelegatingScalaService.scala:53)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$recursiveFindRpcMethods$0(GenericEndpoint.java:65)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:160)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:231)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:198)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:185)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:97)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:114)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:577)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1623)
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-20/lib/src.zip!/java.base/java/lang/Math.java
	at java.base/java.net.URI$Parser.fail(URI.java:2963)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3134)
	at java.base/java.net.URI$Parser.parse(URI.java:3170)
	at java.base/java.net.URI.<init>(URI.java:628)
	at java.base/java.net.URI.create(URI.java:909)
	... 22 more

2024.07.30 04:14:18 INFO  no build target found for D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 06\12.scala. Using presentation compiler with project's scala-library version: 3.3.3
2024.07.30 04:14:19 INFO  time: Imported build in 0.14s
2024.07.30 04:14:19 INFO  running doctor check
2024.07.30 04:14:19 INFO  java targets: FunctionalProgramming_Practicals_53cb6fdf00-test, FunctionalProgramming_Practicals_53cb6fdf00
2024.07.30 04:14:19 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 04:14:19 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.47s
2024.07.30 04:14:19 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 04:14:20 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.54s
2024.07.30 04:14:21 INFO  time: indexed workspace in 1.81s
2024.07.30 04:14:20 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 04:14:21 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.28s
Jul 30, 2024 4:14:27 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 715
Jul 30, 2024 4:14:34 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 747
2024.07.30 04:14:34 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 04:14:34 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.43s
Jul 30, 2024 4:14:35 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 751
2024.07.30 04:15:15 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 04:15:15 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.36s
2024.07.30 04:15:44 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 04:15:44 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.59s
2024.07.30 04:16:03 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 04:16:03 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.7s
2024.07.30 04:16:10 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 04:16:10 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.48s
Jul 30, 2024 4:16:11 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 943
2024.07.30 04:16:28 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 04:16:28 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.57s
2024.07.30 04:16:34 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 04:16:34 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.66s
2024.07.30 04:17:10 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 04:17:10 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.43s
2024.07.30 04:17:20 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 04:17:24 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 3.58s
2024.07.30 04:17:25 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 04:17:26 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 1.19s
2024.07.30 04:17:43 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 04:17:43 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.48s
2024.07.30 04:18:03 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 04:18:03 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.38s
2024.07.30 04:18:35 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 04:18:35 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.32s
Jul 30, 2024 4:18:57 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1303
2024.07.30 04:18:57 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 04:18:57 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.28s
Jul 30, 2024 4:19:05 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1318
2024.07.30 04:19:46 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 04:19:46 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.54s
2024.07.30 04:19:54 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 04:19:54 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.55s
2024.07.30 04:20:16 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 04:20:16 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.35s
Jul 30, 2024 4:20:35 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1523
2024.07.30 04:21:01 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 04:21:01 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.38s
2024.07.30 04:21:29 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 04:21:29 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.28s
2024.07.30 04:23:03 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 04:23:03 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.41s
Jul 30, 2024 4:24:12 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1759
2024.07.30 04:25:35 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 04:25:35 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.46s
2024.07.30 04:26:25 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 04:26:25 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.37s
2024.07.30 04:26:45 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 04:26:45 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.35s
2024.07.30 04:26:59 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 04:26:59 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.55s
Jul 30, 2024 4:27:19 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1994
2024.07.30 04:27:47 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 04:27:47 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.57s
2024.07.30 04:30:40 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 04:30:40 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.25s
Jul 30, 2024 4:33:11 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2112
2024.07.30 04:33:28 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 04:33:28 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.86s
Jul 30, 2024 4:34:54 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2188
2024.07.30 04:35:32 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 04:35:32 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.65s
2024.07.30 04:35:47 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 04:35:47 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.29s
2024.07.30 04:36:09 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 04:36:09 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.29s
Jul 30, 2024 4:36:26 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2365
2024.07.30 04:36:26 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 04:36:26 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.3s
2024.07.30 04:37:26 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 04:37:26 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.27s
2024.07.30 04:38:59 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 04:38:59 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.25s
Jul 30, 2024 4:39:34 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2563
2024.07.30 04:40:34 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 04:40:34 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.26s
2024.07.30 04:40:47 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 04:40:47 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.23s
Jul 30, 2024 4:42:03 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2741
2024.07.30 04:42:14 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 04:42:14 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.28s
2024.07.30 04:43:00 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 04:43:00 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.31s
Jul 30, 2024 4:44:09 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2916
2024.07.30 04:44:54 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 04:44:54 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.76s
Jul 30, 2024 4:45:04 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2998
2024.07.30 04:45:10 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 04:45:10 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.41s
Jul 30, 2024 4:45:19 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3049
2024.07.30 04:46:06 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 04:46:07 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 1.29s
Jul 30, 2024 4:47:40 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3153
2024.07.30 04:47:46 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 04:47:46 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.27s
2024.07.30 04:49:06 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 04:49:06 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.41s
2024.07.30 04:52:55 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 04:52:55 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.29s
2024.07.30 04:59:56 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 04:59:56 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.24s
2024.07.30 05:00:26 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 05:00:26 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.37s
2024.07.30 05:01:31 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 05:01:31 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.27s
2024.07.30 05:01:55 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 05:01:55 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.19s
2024.07.30 05:05:13 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 05:05:13 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.27s
2024.07.30 05:05:20 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 05:05:20 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.28s
Exception in thread "pool-9-thread-1" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:244)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:153)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1623)
2024.07.30 05:06:48 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 05:06:48 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.31s
Jul 30, 2024 5:06:53 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3817
2024.07.30 05:07:11 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 05:07:11 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.27s
Jul 30, 2024 5:07:42 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3875
2024.07.30 05:07:43 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 05:07:43 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.2s
2024.07.30 05:10:11 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 05:10:11 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.23s
2024.07.30 05:10:42 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 05:10:42 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.35s
2024.07.30 05:13:28 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 05:13:28 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.19s
Jul 30, 2024 5:13:44 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4277
2024.07.30 05:14:20 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 05:14:20 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.37s
Jul 30, 2024 5:15:05 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4337
2024.07.30 05:16:11 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 05:16:11 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.31s
Jul 30, 2024 5:16:29 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4544
2024.07.30 05:17:10 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 05:17:10 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.96s
2024.07.30 05:17:36 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 05:17:36 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.26s
2024.07.30 05:24:11 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 05:24:11 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.35s
2024.07.30 05:24:22 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 05:24:22 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.38s
2024.07.30 05:24:35 INFO  no build target found for D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 06\2.scala. Using presentation compiler with project's scala-library version: 3.3.3
2024.07.30 05:24:35 INFO  time: Imported build in 0.33s
2024.07.30 05:24:35 INFO  running doctor check
2024.07.30 05:24:35 INFO  java targets: FunctionalProgramming_Practicals_53cb6fdf00-test, FunctionalProgramming_Practicals_53cb6fdf00
2024.07.30 05:24:35 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (24 scala sources)
2024.07.30 05:24:35 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.95s
2024.07.30 05:24:37 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (24 scala sources)
2024.07.30 05:24:38 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 1.19s
2024.07.30 05:24:42 INFO  time: indexed workspace in 7.33s
2024.07.30 05:24:44 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (24 scala sources)
2024.07.30 05:24:44 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.74s
2024.07.30 05:24:56 INFO  Cancelling compilation on scala-cli server
2024.07.30 05:24:56 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 05:24:56 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.48s
2024.07.30 05:24:57 INFO  time: Imported build in 0.66s
2024.07.30 05:24:57 INFO  running doctor check
2024.07.30 05:24:57 INFO  java targets: FunctionalProgramming_Practicals_53cb6fdf00-test, FunctionalProgramming_Practicals_53cb6fdf00
2024.07.30 05:24:56 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
Jul 30, 2024 5:24:57 AM scala.meta.internal.mtags.SymbolIndexBucket addMtagsSourceFile
WARNING: Error indexing D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 06\11.scala
java.nio.file.NoSuchFileException: D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 06\11.scala
	at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at java.base/sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:234)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:379)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:431)
	at java.base/java.nio.file.Files.readAllBytes(Files.java:3263)
	at scala.meta.internal.io.PlatformFileIO$.slurp(PlatformFileIO.scala:43)
	at scala.meta.internal.io.FileIO$.slurp(FileIO.scala:21)
	at scala.meta.internal.mtags.ScalametaCommonEnrichments$XtensionAbsolutePath.toInput(ScalametaCommonEnrichments.scala:410)
	at scala.meta.internal.mtags.Mtags.index(Mtags.scala:96)
	at scala.meta.internal.mtags.Mtags.allSymbols(Mtags.scala:21)
	at scala.meta.internal.mtags.SymbolIndexBucket.allSymbols(SymbolIndexBucket.scala:273)
	at scala.meta.internal.mtags.SymbolIndexBucket.addMtagsSourceFile(SymbolIndexBucket.scala:284)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$1(SymbolIndexBucket.scala:199)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$1$adapted(SymbolIndexBucket.scala:199)
	at scala.collection.immutable.Set$Set1.foreach(Set.scala:177)
	at scala.meta.internal.mtags.SymbolIndexBucket.query0(SymbolIndexBucket.scala:199)
	at scala.meta.internal.mtags.SymbolIndexBucket.query(SymbolIndexBucket.scala:172)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.$anonfun$findSymbolDefinition$1(OnDemandSymbolIndex.scala:142)
	at scala.collection.immutable.List.flatMap(List.scala:294)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.findSymbolDefinition(OnDemandSymbolIndex.scala:142)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.definition(OnDemandSymbolIndex.scala:48)
	at scala.meta.internal.metals.Docstrings.indexSymbol(Docstrings.scala:129)
	at scala.meta.internal.metals.Docstrings.documentation(Docstrings.scala:49)
	at scala.meta.internal.metals.MetalsSymbolSearch.documentation(MetalsSymbolSearch.scala:51)
	at scala.meta.internal.metals.MetalsSymbolSearch.documentation(MetalsSymbolSearch.scala:44)
	at dotty.tools.pc.utils.MtagsEnrichments$.symbolDocumentation(MtagsEnrichments.scala:283)
	at dotty.tools.pc.HoverProvider$.$anonfun$3(HoverProvider.scala:129)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at dotty.tools.pc.HoverProvider$.hover(HoverProvider.scala:129)
	at dotty.tools.pc.ScalaPresentationCompiler.hover$$anonfun$1(ScalaPresentationCompiler.scala:363)
	at scala.meta.internal.pc.CompilerAccess.withSharedCompiler(CompilerAccess.scala:157)
	at scala.meta.internal.pc.CompilerAccess.withNonInterruptableCompiler$$anonfun$1(CompilerAccess.scala:143)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:246)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:153)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1623)

Jul 30, 2024 5:24:57 AM scala.meta.internal.mtags.SymbolIndexBucket addMtagsSourceFile
WARNING: Error indexing D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 06\11.scala
java.nio.file.NoSuchFileException: D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 06\11.scala
	at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at java.base/sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:234)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:379)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:431)
	at java.base/java.nio.file.Files.readAllBytes(Files.java:3263)
	at scala.meta.internal.io.PlatformFileIO$.slurp(PlatformFileIO.scala:43)
	at scala.meta.internal.io.FileIO$.slurp(FileIO.scala:21)
	at scala.meta.internal.mtags.ScalametaCommonEnrichments$XtensionAbsolutePath.toInput(ScalametaCommonEnrichments.scala:410)
	at scala.meta.internal.mtags.Mtags.index(Mtags.scala:96)
	at scala.meta.internal.mtags.Mtags.allSymbols(Mtags.scala:21)
	at scala.meta.internal.mtags.SymbolIndexBucket.allSymbols(SymbolIndexBucket.scala:273)
	at scala.meta.internal.mtags.SymbolIndexBucket.addMtagsSourceFile(SymbolIndexBucket.scala:284)
	at scala.meta.internal.mtags.SymbolIndexBucket.addMtagsSourceFile(SymbolIndexBucket.scala:295)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$1(SymbolIndexBucket.scala:199)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$1$adapted(SymbolIndexBucket.scala:199)
	at scala.collection.immutable.Set$Set1.foreach(Set.scala:177)
	at scala.meta.internal.mtags.SymbolIndexBucket.query0(SymbolIndexBucket.scala:199)
	at scala.meta.internal.mtags.SymbolIndexBucket.query(SymbolIndexBucket.scala:172)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.$anonfun$findSymbolDefinition$1(OnDemandSymbolIndex.scala:142)
	at scala.collection.immutable.List.flatMap(List.scala:294)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.findSymbolDefinition(OnDemandSymbolIndex.scala:142)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.definition(OnDemandSymbolIndex.scala:48)
	at scala.meta.internal.metals.Docstrings.indexSymbol(Docstrings.scala:129)
	at scala.meta.internal.metals.Docstrings.documentation(Docstrings.scala:49)
	at scala.meta.internal.metals.MetalsSymbolSearch.documentation(MetalsSymbolSearch.scala:51)
	at scala.meta.internal.metals.MetalsSymbolSearch.documentation(MetalsSymbolSearch.scala:44)
	at dotty.tools.pc.utils.MtagsEnrichments$.symbolDocumentation(MtagsEnrichments.scala:283)
	at dotty.tools.pc.HoverProvider$.$anonfun$3(HoverProvider.scala:129)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at dotty.tools.pc.HoverProvider$.hover(HoverProvider.scala:129)
	at dotty.tools.pc.ScalaPresentationCompiler.hover$$anonfun$1(ScalaPresentationCompiler.scala:363)
	at scala.meta.internal.pc.CompilerAccess.withSharedCompiler(CompilerAccess.scala:157)
	at scala.meta.internal.pc.CompilerAccess.withNonInterruptableCompiler$$anonfun$1(CompilerAccess.scala:143)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:246)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:153)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1623)

Jul 30, 2024 5:24:57 AM scala.meta.internal.mtags.SymbolIndexBucket addMtagsSourceFile
WARNING: Error indexing D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 06\11.scala
java.nio.file.NoSuchFileException: D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 06\11.scala
	at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at java.base/sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:234)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:379)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:431)
	at java.base/java.nio.file.Files.readAllBytes(Files.java:3263)
	at scala.meta.internal.io.PlatformFileIO$.slurp(PlatformFileIO.scala:43)
	at scala.meta.internal.io.FileIO$.slurp(FileIO.scala:21)
	at scala.meta.internal.mtags.ScalametaCommonEnrichments$XtensionAbsolutePath.toInput(ScalametaCommonEnrichments.scala:410)
	at scala.meta.internal.mtags.Mtags.index(Mtags.scala:96)
	at scala.meta.internal.mtags.Mtags.allSymbols(Mtags.scala:21)
	at scala.meta.internal.mtags.SymbolIndexBucket.allSymbols(SymbolIndexBucket.scala:273)
	at scala.meta.internal.mtags.SymbolIndexBucket.addMtagsSourceFile(SymbolIndexBucket.scala:284)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$1(SymbolIndexBucket.scala:199)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$1$adapted(SymbolIndexBucket.scala:199)
	at scala.collection.immutable.Set$Set1.foreach(Set.scala:177)
	at scala.meta.internal.mtags.SymbolIndexBucket.query0(SymbolIndexBucket.scala:199)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$8(SymbolIndexBucket.scala:222)
	at scala.collection.immutable.List.flatMap(List.scala:294)
	at scala.meta.internal.mtags.SymbolIndexBucket.query0(SymbolIndexBucket.scala:222)
	at scala.meta.internal.mtags.SymbolIndexBucket.query(SymbolIndexBucket.scala:172)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.$anonfun$findSymbolDefinition$1(OnDemandSymbolIndex.scala:142)
	at scala.collection.immutable.List.flatMap(List.scala:294)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.findSymbolDefinition(OnDemandSymbolIndex.scala:142)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.definition(OnDemandSymbolIndex.scala:48)
	at scala.meta.internal.metals.Docstrings.indexSymbol(Docstrings.scala:129)
	at scala.meta.internal.metals.Docstrings.documentation(Docstrings.scala:49)
	at scala.meta.internal.metals.MetalsSymbolSearch.documentation(MetalsSymbolSearch.scala:51)
	at scala.meta.internal.metals.MetalsSymbolSearch.documentation(MetalsSymbolSearch.scala:44)
	at dotty.tools.pc.utils.MtagsEnrichments$.symbolDocumentation(MtagsEnrichments.scala:283)
	at dotty.tools.pc.HoverProvider$.$anonfun$3(HoverProvider.scala:129)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at dotty.tools.pc.HoverProvider$.hover(HoverProvider.scala:129)
	at dotty.tools.pc.ScalaPresentationCompiler.hover$$anonfun$1(ScalaPresentationCompiler.scala:363)
	at scala.meta.internal.pc.CompilerAccess.withSharedCompiler(CompilerAccess.scala:157)
	at scala.meta.internal.pc.CompilerAccess.withNonInterruptableCompiler$$anonfun$1(CompilerAccess.scala:143)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:246)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:153)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1623)

Jul 30, 2024 5:24:57 AM scala.meta.internal.mtags.SymbolIndexBucket addMtagsSourceFile
WARNING: Error indexing D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 06\11.scala
java.nio.file.NoSuchFileException: D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 06\11.scala
	at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at java.base/sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:234)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:379)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:431)
	at java.base/java.nio.file.Files.readAllBytes(Files.java:3263)
	at scala.meta.internal.io.PlatformFileIO$.slurp(PlatformFileIO.scala:43)
	at scala.meta.internal.io.FileIO$.slurp(FileIO.scala:21)
	at scala.meta.internal.mtags.ScalametaCommonEnrichments$XtensionAbsolutePath.toInput(ScalametaCommonEnrichments.scala:410)
	at scala.meta.internal.mtags.Mtags.index(Mtags.scala:96)
	at scala.meta.internal.mtags.Mtags.allSymbols(Mtags.scala:21)
	at scala.meta.internal.mtags.SymbolIndexBucket.allSymbols(SymbolIndexBucket.scala:273)
	at scala.meta.internal.mtags.SymbolIndexBucket.addMtagsSourceFile(SymbolIndexBucket.scala:284)
	at scala.meta.internal.mtags.SymbolIndexBucket.addMtagsSourceFile(SymbolIndexBucket.scala:295)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$1(SymbolIndexBucket.scala:199)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$1$adapted(SymbolIndexBucket.scala:199)
	at scala.collection.immutable.Set$Set1.foreach(Set.scala:177)
	at scala.meta.internal.mtags.SymbolIndexBucket.query0(SymbolIndexBucket.scala:199)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$8(SymbolIndexBucket.scala:222)
	at scala.collection.immutable.List.flatMap(List.scala:294)
	at scala.meta.internal.mtags.SymbolIndexBucket.query0(SymbolIndexBucket.scala:222)
	at scala.meta.internal.mtags.SymbolIndexBucket.query(SymbolIndexBucket.scala:172)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.$anonfun$findSymbolDefinition$1(OnDemandSymbolIndex.scala:142)
	at scala.collection.immutable.List.flatMap(List.scala:294)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.findSymbolDefinition(OnDemandSymbolIndex.scala:142)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.definition(OnDemandSymbolIndex.scala:48)
	at scala.meta.internal.metals.Docstrings.indexSymbol(Docstrings.scala:129)
	at scala.meta.internal.metals.Docstrings.documentation(Docstrings.scala:49)
	at scala.meta.internal.metals.MetalsSymbolSearch.documentation(MetalsSymbolSearch.scala:51)
	at scala.meta.internal.metals.MetalsSymbolSearch.documentation(MetalsSymbolSearch.scala:44)
	at dotty.tools.pc.utils.MtagsEnrichments$.symbolDocumentation(MtagsEnrichments.scala:283)
	at dotty.tools.pc.HoverProvider$.$anonfun$3(HoverProvider.scala:129)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at dotty.tools.pc.HoverProvider$.hover(HoverProvider.scala:129)
	at dotty.tools.pc.ScalaPresentationCompiler.hover$$anonfun$1(ScalaPresentationCompiler.scala:363)
	at scala.meta.internal.pc.CompilerAccess.withSharedCompiler(CompilerAccess.scala:157)
	at scala.meta.internal.pc.CompilerAccess.withNonInterruptableCompiler$$anonfun$1(CompilerAccess.scala:143)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:246)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:153)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1623)

Jul 30, 2024 5:24:57 AM scala.meta.internal.mtags.SymbolIndexBucket addMtagsSourceFile
WARNING: Error indexing D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 06\11.scala
java.nio.file.NoSuchFileException: D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 06\11.scala
	at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at java.base/sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:234)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:379)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:431)
	at java.base/java.nio.file.Files.readAllBytes(Files.java:3263)
	at scala.meta.internal.io.PlatformFileIO$.slurp(PlatformFileIO.scala:43)
	at scala.meta.internal.io.FileIO$.slurp(FileIO.scala:21)
	at scala.meta.internal.mtags.ScalametaCommonEnrichments$XtensionAbsolutePath.toInput(ScalametaCommonEnrichments.scala:410)
	at scala.meta.internal.mtags.Mtags.index(Mtags.scala:96)
	at scala.meta.internal.mtags.Mtags.allSymbols(Mtags.scala:21)
	at scala.meta.internal.mtags.SymbolIndexBucket.allSymbols(SymbolIndexBucket.scala:273)
	at scala.meta.internal.mtags.SymbolIndexBucket.addMtagsSourceFile(SymbolIndexBucket.scala:284)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$1(SymbolIndexBucket.scala:199)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$1$adapted(SymbolIndexBucket.scala:199)
	at scala.collection.immutable.Set$Set1.foreach(Set.scala:177)
	at scala.meta.internal.mtags.SymbolIndexBucket.query0(SymbolIndexBucket.scala:199)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$8(SymbolIndexBucket.scala:222)
	at scala.collection.immutable.List.flatMap(List.scala:294)
	at scala.meta.internal.mtags.SymbolIndexBucket.query0(SymbolIndexBucket.scala:222)
	at scala.meta.internal.mtags.SymbolIndexBucket.query(SymbolIndexBucket.scala:172)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.$anonfun$findSymbolDefinition$1(OnDemandSymbolIndex.scala:142)
	at scala.collection.immutable.List.flatMap(List.scala:294)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.findSymbolDefinition(OnDemandSymbolIndex.scala:142)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.definition(OnDemandSymbolIndex.scala:48)
	at scala.meta.internal.metals.Docstrings.indexSymbol(Docstrings.scala:129)
	at scala.meta.internal.metals.Docstrings.documentation(Docstrings.scala:49)
	at scala.meta.internal.metals.MetalsSymbolSearch.documentation(MetalsSymbolSearch.scala:51)
	at scala.meta.internal.metals.MetalsSymbolSearch.documentation(MetalsSymbolSearch.scala:44)
	at dotty.tools.pc.utils.MtagsEnrichments$.symbolDocumentation(MtagsEnrichments.scala:283)
	at dotty.tools.pc.HoverProvider$.$anonfun$3(HoverProvider.scala:129)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at dotty.tools.pc.HoverProvider$.hover(HoverProvider.scala:129)
	at dotty.tools.pc.ScalaPresentationCompiler.hover$$anonfun$1(ScalaPresentationCompiler.scala:363)
	at scala.meta.internal.pc.CompilerAccess.withSharedCompiler(CompilerAccess.scala:157)
	at scala.meta.internal.pc.CompilerAccess.withNonInterruptableCompiler$$anonfun$1(CompilerAccess.scala:143)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:246)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:153)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1623)

Jul 30, 2024 5:24:57 AM scala.meta.internal.mtags.SymbolIndexBucket addMtagsSourceFile
WARNING: Error indexing D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 06\11.scala
java.nio.file.NoSuchFileException: D:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 06\11.scala
	at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at java.base/sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:234)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:379)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:431)
	at java.base/java.nio.file.Files.readAllBytes(Files.java:3263)
	at scala.meta.internal.io.PlatformFileIO$.slurp(PlatformFileIO.scala:43)
	at scala.meta.internal.io.FileIO$.slurp(FileIO.scala:21)
	at scala.meta.internal.mtags.ScalametaCommonEnrichments$XtensionAbsolutePath.toInput(ScalametaCommonEnrichments.scala:410)
	at scala.meta.internal.mtags.Mtags.index(Mtags.scala:96)
	at scala.meta.internal.mtags.Mtags.allSymbols(Mtags.scala:21)
	at scala.meta.internal.mtags.SymbolIndexBucket.allSymbols(SymbolIndexBucket.scala:273)
	at scala.meta.internal.mtags.SymbolIndexBucket.addMtagsSourceFile(SymbolIndexBucket.scala:284)
	at scala.meta.internal.mtags.SymbolIndexBucket.addMtagsSourceFile(SymbolIndexBucket.scala:295)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$1(SymbolIndexBucket.scala:199)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$1$adapted(SymbolIndexBucket.scala:199)
	at scala.collection.immutable.Set$Set1.foreach(Set.scala:177)
	at scala.meta.internal.mtags.SymbolIndexBucket.query0(SymbolIndexBucket.scala:199)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$8(SymbolIndexBucket.scala:222)
	at scala.collection.immutable.List.flatMap(List.scala:294)
	at scala.meta.internal.mtags.SymbolIndexBucket.query0(SymbolIndexBucket.scala:222)
	at scala.meta.internal.mtags.SymbolIndexBucket.query(SymbolIndexBucket.scala:172)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.$anonfun$findSymbolDefinition$1(OnDemandSymbolIndex.scala:142)
	at scala.collection.immutable.List.flatMap(List.scala:294)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.findSymbolDefinition(OnDemandSymbolIndex.scala:142)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.definition(OnDemandSymbolIndex.scala:48)
	at scala.meta.internal.metals.Docstrings.indexSymbol(Docstrings.scala:129)
	at scala.meta.internal.metals.Docstrings.documentation(Docstrings.scala:49)
	at scala.meta.internal.metals.MetalsSymbolSearch.documentation(MetalsSymbolSearch.scala:51)
	at scala.meta.internal.metals.MetalsSymbolSearch.documentation(MetalsSymbolSearch.scala:44)
	at dotty.tools.pc.utils.MtagsEnrichments$.symbolDocumentation(MtagsEnrichments.scala:283)
	at dotty.tools.pc.HoverProvider$.$anonfun$3(HoverProvider.scala:129)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at dotty.tools.pc.HoverProvider$.hover(HoverProvider.scala:129)
	at dotty.tools.pc.ScalaPresentationCompiler.hover$$anonfun$1(ScalaPresentationCompiler.scala:363)
	at scala.meta.internal.pc.CompilerAccess.withSharedCompiler(CompilerAccess.scala:157)
	at scala.meta.internal.pc.CompilerAccess.withNonInterruptableCompiler$$anonfun$1(CompilerAccess.scala:143)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:246)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:153)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1623)

2024.07.30 05:24:58 INFO  no build target found for d:\University\Sem 3\Functional Programming\practical\FunctionalProgramming_Practicals\Practical 06\11.scala. Using presentation compiler with project's scala-library version: 3.3.3
2024.07.30 05:24:58 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 1.21s
2024.07.30 05:24:58 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 05:25:00 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 1.11s
2024.07.30 05:25:04 INFO  time: indexed workspace in 7.14s
2024.07.30 05:25:04 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 05:25:04 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.5s
2024.07.30 05:35:32 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 05:35:32 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.32s
Jul 30, 2024 5:35:37 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 5032
2024.07.30 05:35:50 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 05:35:50 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.19s
2024.07.30 05:36:20 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 05:36:20 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.2s
2024.07.30 05:38:07 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 05:38:07 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.28s
2024.07.30 05:41:47 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 05:41:47 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.22s
2024.07.30 05:42:46 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (23 scala sources)
2024.07.30 05:42:46 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.38s
2024.07.30 05:42:52 INFO  Cancelling compilation on scala-cli server
2024.07.30 05:42:53 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (22 scala sources)
2024.07.30 05:42:53 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.37s
2024.07.30 05:42:53 INFO  time: Imported build in 0.51s
2024.07.30 05:42:53 INFO  running doctor check
2024.07.30 05:42:53 INFO  java targets: FunctionalProgramming_Practicals_53cb6fdf00-test, FunctionalProgramming_Practicals_53cb6fdf00
2024.07.30 05:42:53 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (22 scala sources)
2024.07.30 05:42:53 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.36s
2024.07.30 05:42:53 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (22 scala sources)
2024.07.30 05:42:54 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.36s
2024.07.30 05:42:55 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (22 scala sources)
2024.07.30 05:42:56 INFO  time: indexed workspace in 2.79s
2024.07.30 05:42:55 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.73s
2024.07.30 05:42:57 INFO  compiling functionalprogramming_practicals_53cb6fdf00 (22 scala sources)
2024.07.30 05:42:57 INFO  time: compiled FunctionalProgramming_Practicals_53cb6fdf00 in 0.81s
